
GSM_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00800060  000010f6  0000118a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ef  00800136  00800136  00001260  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017ed  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009cd  00000000  00000000  00002be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b44  00000000  00000000  000035b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  000040f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c0  00000000  00000000  000043dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eae  00000000  00000000  0000499c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000584a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 32       	cpi	r26, 0x25	; 37
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 18 04 	call	0x830	; 0x830 <main>
      8a:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
#include "LCD_16x2_H_file.h"						/* Include LCD header file */


void LCD_Command (char cmd)							/* LCD command write function */
{
	LCD_Data_Port = cmd;							/* Write command data to LCD data port */
      92:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~((1<<RS)|(1<<RW));			/* Make RS LOW (command reg.), RW LOW (Write) */
      94:	85 b3       	in	r24, 0x15	; 21
      96:	8c 7f       	andi	r24, 0xFC	; 252
      98:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<EN);					/* High to Low transition on EN (Enable) */
      9a:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      9c:	82 e0       	ldi	r24, 0x02	; 2
      9e:	8a 95       	dec	r24
      a0:	f1 f7       	brne	.-4      	; 0x9e <LCD_Command+0xc>
      a2:	00 c0       	rjmp	.+0      	; 0xa4 <LCD_Command+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
      a4:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      a6:	8f e6       	ldi	r24, 0x6F	; 111
      a8:	97 e1       	ldi	r25, 0x17	; 23
      aa:	01 97       	sbiw	r24, 0x01	; 1
      ac:	f1 f7       	brne	.-4      	; 0xaa <LCD_Command+0x18>
      ae:	00 c0       	rjmp	.+0      	; 0xb0 <LCD_Command+0x1e>
      b0:	00 00       	nop
      b2:	08 95       	ret

000000b4 <LCD_Char>:
	_delay_ms(3);									/* Wait little bit */
}

void LCD_Char (char char_data)						/* LCD data write function */
{
	LCD_Data_Port = char_data;						/* Write data to LCD data port */
      b4:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~(1<<RW);					/* Make RW LOW (Write) */
      b6:	a9 98       	cbi	0x15, 1	; 21
	LCD_Command_Port |= (1<<EN)|(1<<RS);			/* Make RS HIGH (data reg.) and High to Low transition on EN (Enable) */
      b8:	85 b3       	in	r24, 0x15	; 21
      ba:	85 60       	ori	r24, 0x05	; 5
      bc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      be:	82 e0       	ldi	r24, 0x02	; 2
      c0:	8a 95       	dec	r24
      c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_Char+0xc>
      c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCD_Char+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
      c6:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c8:	8f ec       	ldi	r24, 0xCF	; 207
      ca:	97 e0       	ldi	r25, 0x07	; 7
      cc:	01 97       	sbiw	r24, 0x01	; 1
      ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_Char+0x18>
      d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_Char+0x1e>
      d2:	00 00       	nop
      d4:	08 95       	ret

000000d6 <LCD_Init>:
	_delay_ms(1);									/* Wait little bit */
}

void LCD_Init (void)								/* LCD Initialize function */
{
	LCD_Command_Dir |= (1<<RS)|(1<<RW)|(1<<EN);		/* Make LCD command port direction as o/p */
      d6:	84 b3       	in	r24, 0x14	; 20
      d8:	87 60       	ori	r24, 0x07	; 7
      da:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF;							/* Make LCD data port direction as o/p */
      dc:	8f ef       	ldi	r24, 0xFF	; 255
      de:	87 bb       	out	0x17, r24	; 23
      e0:	8f e3       	ldi	r24, 0x3F	; 63
      e2:	9c e9       	ldi	r25, 0x9C	; 156
      e4:	01 97       	sbiw	r24, 0x01	; 1
      e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_Init+0xe>
      e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_Init+0x14>
      ea:	00 00       	nop
	
	_delay_ms(20);									/* LCD power up time to get things ready, it should always >15ms */
	LCD_Command (0x38);								/* Initialize 16X2 LCD in 8bit mode */
      ec:	88 e3       	ldi	r24, 0x38	; 56
      ee:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x0C);								/* Display ON, Cursor OFF command */
      f2:	8c e0       	ldi	r24, 0x0C	; 12
      f4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x06);								/* Auto Increment cursor */
      f8:	86 e0       	ldi	r24, 0x06	; 6
      fa:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x01);								/* Clear LCD command */
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
     104:	80 e8       	ldi	r24, 0x80	; 128
     106:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     10a:	08 95       	ret

0000010c <LCD_String>:
}

void LCD_String (char *str)							/* Send string to LCD function */
{
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
     112:	88 81       	ld	r24, Y
     114:	88 23       	and	r24, r24
     116:	31 f0       	breq	.+12     	; 0x124 <LCD_String+0x18>
     118:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);							/* Call LCD data write */
     11a:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Char>
}

void LCD_String (char *str)							/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
     11e:	89 91       	ld	r24, Y+
     120:	81 11       	cpse	r24, r1
     122:	fb cf       	rjmp	.-10     	; 0x11a <LCD_String+0xe>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD function */
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	ea 01       	movw	r28, r20
	if (row == 1)
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	31 f4       	brne	.+12     	; 0x140 <LCD_String_xy+0x16>
		LCD_Command((pos & 0x0F)|0x80);				/* Command of first row and required position<16 */
     134:	86 2f       	mov	r24, r22
     136:	8f 70       	andi	r24, 0x0F	; 15
     138:	80 68       	ori	r24, 0x80	; 128
     13a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     13e:	07 c0       	rjmp	.+14     	; 0x14e <LCD_String_xy+0x24>
	else if (row == 2)
     140:	82 30       	cpi	r24, 0x02	; 2
     142:	29 f4       	brne	.+10     	; 0x14e <LCD_String_xy+0x24>
		LCD_Command((pos & 0x0F)|0xC0);				/* Command of Second row and required position<16 */
     144:	86 2f       	mov	r24, r22
     146:	8f 70       	andi	r24, 0x0F	; 15
     148:	80 6c       	ori	r24, 0xC0	; 192
     14a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_String(str);								/* Call LCD string function */
     14e:	ce 01       	movw	r24, r28
     150:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_String>
}
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command(0x01);								/* clear display */
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     160:	08 95       	ret

00000162 <GSM_Msg_Delete>:
	}
	_delay_ms(300);
	buffer_pointer = 0;
	memset(buff,0,strlen(buff));
	memset(sms_buffer,0,strlen(sms_buffer));
}
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
     16e:	64 97       	sbiw	r28, 0x14	; 20
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	f8 94       	cli
     174:	de bf       	out	0x3e, r29	; 62
     176:	0f be       	out	0x3f, r0	; 63
     178:	cd bf       	out	0x3d, r28	; 61
     17a:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <buffer_pointer+0x1>
     17e:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <buffer_pointer>
     182:	9f 93       	push	r25
     184:	8f 93       	push	r24
     186:	80 e6       	ldi	r24, 0x60	; 96
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	9f 93       	push	r25
     18c:	8f 93       	push	r24
     18e:	8e 01       	movw	r16, r28
     190:	0f 5f       	subi	r16, 0xFF	; 255
     192:	1f 4f       	sbci	r17, 0xFF	; 255
     194:	1f 93       	push	r17
     196:	0f 93       	push	r16
     198:	0e 94 8f 05 	call	0xb1e	; 0xb1e <sprintf>
     19c:	c8 01       	movw	r24, r16
     19e:	0e 94 09 05 	call	0xa12	; 0xa12 <USART_SendString>
     1a2:	0f 90       	pop	r0
     1a4:	0f 90       	pop	r0
     1a6:	0f 90       	pop	r0
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	64 96       	adiw	r28, 0x14	; 20
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	f8 94       	cli
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	0f be       	out	0x3f, r0	; 63
     1b8:	cd bf       	out	0x3d, r28	; 61
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	1f 91       	pop	r17
     1c0:	0f 91       	pop	r16
     1c2:	08 95       	ret

000001c4 <GSM_Wait_for_Msg>:
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	00 d0       	rcall	.+0      	; 0x1ca <GSM_Wait_for_Msg+0x6>
     1ca:	00 d0       	rcall	.+0      	; 0x1cc <GSM_Wait_for_Msg+0x8>
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
     1d0:	2f ef       	ldi	r18, 0xFF	; 255
     1d2:	84 e3       	ldi	r24, 0x34	; 52
     1d4:	9c e0       	ldi	r25, 0x0C	; 12
     1d6:	21 50       	subi	r18, 0x01	; 1
     1d8:	80 40       	sbci	r24, 0x00	; 0
     1da:	90 40       	sbci	r25, 0x00	; 0
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <GSM_Wait_for_Msg+0x12>
     1de:	00 c0       	rjmp	.+0      	; 0x1e0 <GSM_Wait_for_Msg+0x1c>
     1e0:	00 00       	nop
     1e2:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <buffer_pointer+0x1>
     1e6:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <buffer_pointer>
     1ea:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     1ee:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     1f2:	e7 5c       	subi	r30, 0xC7	; 199
     1f4:	fe 4f       	sbci	r31, 0xFE	; 254
     1f6:	80 81       	ld	r24, Z
     1f8:	8d 30       	cpi	r24, 0x0D	; 13
     1fa:	49 f0       	breq	.+18     	; 0x20e <GSM_Wait_for_Msg+0x4a>
     1fc:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     200:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     204:	e7 5c       	subi	r30, 0xC7	; 199
     206:	fe 4f       	sbci	r31, 0xFE	; 254
     208:	80 81       	ld	r24, Z
     20a:	8a 30       	cpi	r24, 0x0A	; 10
     20c:	51 f4       	brne	.+20     	; 0x222 <GSM_Wait_for_Msg+0x5e>
     20e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <buffer_pointer>
     212:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <buffer_pointer+0x1>
     216:	01 96       	adiw	r24, 0x01	; 1
     218:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <buffer_pointer+0x1>
     21c:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <buffer_pointer>
     220:	e4 cf       	rjmp	.-56     	; 0x1ea <GSM_Wait_for_Msg+0x26>
     222:	60 e8       	ldi	r22, 0x80	; 128
     224:	70 e0       	ldi	r23, 0x00	; 0
     226:	89 e3       	ldi	r24, 0x39	; 57
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	0e 94 6d 05 	call	0xada	; 0xada <strstr>
     22e:	89 2b       	or	r24, r25
     230:	09 f4       	brne	.+2      	; 0x234 <GSM_Wait_for_Msg+0x70>
     232:	66 c0       	rjmp	.+204    	; 0x300 <GSM_Wait_for_Msg+0x13c>
     234:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     238:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     23c:	e7 5c       	subi	r30, 0xC7	; 199
     23e:	fe 4f       	sbci	r31, 0xFE	; 254
     240:	80 81       	ld	r24, Z
     242:	8c 32       	cpi	r24, 0x2C	; 44
     244:	91 f0       	breq	.+36     	; 0x26a <GSM_Wait_for_Msg+0xa6>
     246:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <buffer_pointer>
     24a:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <buffer_pointer+0x1>
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <buffer_pointer+0x1>
     254:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <buffer_pointer>
     258:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     25c:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     260:	e7 5c       	subi	r30, 0xC7	; 199
     262:	fe 4f       	sbci	r31, 0xFE	; 254
     264:	80 81       	ld	r24, Z
     266:	8c 32       	cpi	r24, 0x2C	; 44
     268:	71 f7       	brne	.-36     	; 0x246 <GSM_Wait_for_Msg+0x82>
     26a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <buffer_pointer>
     26e:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <buffer_pointer+0x1>
     272:	01 96       	adiw	r24, 0x01	; 1
     274:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <buffer_pointer+0x1>
     278:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <buffer_pointer>
     27c:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     280:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     284:	e7 5c       	subi	r30, 0xC7	; 199
     286:	fe 4f       	sbci	r31, 0xFE	; 254
     288:	80 81       	ld	r24, Z
     28a:	8d 30       	cpi	r24, 0x0D	; 13
     28c:	e1 f0       	breq	.+56     	; 0x2c6 <GSM_Wait_for_Msg+0x102>
     28e:	de 01       	movw	r26, r28
     290:	11 96       	adiw	r26, 0x01	; 1
     292:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     296:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     29a:	e7 5c       	subi	r30, 0xC7	; 199
     29c:	fe 4f       	sbci	r31, 0xFE	; 254
     29e:	80 81       	ld	r24, Z
     2a0:	8d 93       	st	X+, r24
     2a2:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <buffer_pointer>
     2a6:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <buffer_pointer+0x1>
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <buffer_pointer+0x1>
     2b0:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <buffer_pointer>
     2b4:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     2b8:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     2bc:	e7 5c       	subi	r30, 0xC7	; 199
     2be:	fe 4f       	sbci	r31, 0xFE	; 254
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 30       	cpi	r24, 0x0D	; 13
     2c4:	31 f7       	brne	.-52     	; 0x292 <GSM_Wait_for_Msg+0xce>
     2c6:	ce 01       	movw	r24, r28
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	0e 94 3a 05 	call	0xa74	; 0xa74 <atoi>
     2ce:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__data_end+0x1>
     2d2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
     2d6:	e9 e3       	ldi	r30, 0x39	; 57
     2d8:	f1 e0       	ldi	r31, 0x01	; 1
     2da:	01 90       	ld	r0, Z+
     2dc:	00 20       	and	r0, r0
     2de:	e9 f7       	brne	.-6      	; 0x2da <GSM_Wait_for_Msg+0x116>
     2e0:	31 97       	sbiw	r30, 0x01	; 1
     2e2:	af 01       	movw	r20, r30
     2e4:	49 53       	subi	r20, 0x39	; 57
     2e6:	51 40       	sbci	r21, 0x01	; 1
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	89 e3       	ldi	r24, 0x39	; 57
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	0e 94 58 05 	call	0xab0	; 0xab0 <memset>
     2f4:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <buffer_pointer+0x1>
     2f8:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <buffer_pointer>
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <GSM_Wait_for_Msg+0x13e>
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	08 95       	ret

00000310 <__vector_13>:
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	8f 93       	push	r24
     31c:	9f 93       	push	r25
     31e:	ef 93       	push	r30
     320:	ff 93       	push	r31
     322:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     326:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     32a:	8c b1       	in	r24, 0x0c	; 12
     32c:	e7 5c       	subi	r30, 0xC7	; 199
     32e:	fe 4f       	sbci	r31, 0xFE	; 254
     330:	80 83       	st	Z, r24
     332:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <buffer_pointer>
     336:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <buffer_pointer+0x1>
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <buffer_pointer+0x1>
     340:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <buffer_pointer>
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <status_flag>
     34a:	ff 91       	pop	r31
     34c:	ef 91       	pop	r30
     34e:	9f 91       	pop	r25
     350:	8f 91       	pop	r24
     352:	0f 90       	pop	r0
     354:	0f be       	out	0x3f, r0	; 63
     356:	0f 90       	pop	r0
     358:	1f 90       	pop	r1
     35a:	18 95       	reti

0000035c <GSM_Calling>:

void GSM_Calling(char *Mob_no)
{
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	64 97       	sbiw	r28, 0x14	; 20
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	de bf       	out	0x3e, r29	; 62
     370:	0f be       	out	0x3f, r0	; 63
     372:	cd bf       	out	0x3d, r28	; 61
	char call[20];
	sprintf(call,"ATD%s;\r",Mob_no);		
     374:	9f 93       	push	r25
     376:	8f 93       	push	r24
     378:	84 e9       	ldi	r24, 0x94	; 148
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	9f 93       	push	r25
     37e:	8f 93       	push	r24
     380:	8e 01       	movw	r16, r28
     382:	0f 5f       	subi	r16, 0xFF	; 255
     384:	1f 4f       	sbci	r17, 0xFF	; 255
     386:	1f 93       	push	r17
     388:	0f 93       	push	r16
     38a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <sprintf>
	USART_SendString(call);						        /* send command ATD<Mobile_No>; for calling*/
     38e:	c8 01       	movw	r24, r16
     390:	0e 94 09 05 	call	0xa12	; 0xa12 <USART_SendString>
}
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	64 96       	adiw	r28, 0x14	; 20
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	08 95       	ret

000003b6 <GSM_HangCall>:

void GSM_HangCall()
{
	LCD_Clear();
     3b6:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
	USART_SendString("ATH\r");					        /*send command ATH\r to hang call*/
     3ba:	8c e9       	ldi	r24, 0x9C	; 156
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 09 05 	call	0xa12	; 0xa12 <USART_SendString>
     3c2:	08 95       	ret

000003c4 <GSM_Response_Display>:
	}
	status_flag=0;
}

void GSM_Response_Display()
{
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
	buffer_pointer = 0;
     3c8:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <buffer_pointer+0x1>
     3cc:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <buffer_pointer>
	int lcd_pointer = 0;
	while(1)
	{
		if(buff[buffer_pointer]== '\r' || buff[buffer_pointer]== '\n')  /* search for \r\n in string */
     3d0:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     3d4:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     3d8:	e7 5c       	subi	r30, 0xC7	; 199
     3da:	fe 4f       	sbci	r31, 0xFE	; 254
     3dc:	80 81       	ld	r24, Z
     3de:	8d 30       	cpi	r24, 0x0D	; 13
     3e0:	49 f0       	breq	.+18     	; 0x3f4 <GSM_Response_Display+0x30>
     3e2:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     3e6:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     3ea:	e7 5c       	subi	r30, 0xC7	; 199
     3ec:	fe 4f       	sbci	r31, 0xFE	; 254
     3ee:	80 81       	ld	r24, Z
     3f0:	8a 30       	cpi	r24, 0x0A	; 10
     3f2:	51 f4       	brne	.+20     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		{
			buffer_pointer++;
     3f4:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <buffer_pointer>
     3f8:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <buffer_pointer+0x1>
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <buffer_pointer+0x1>
     402:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <buffer_pointer>
		}
		else
			break;
	}
     406:	e4 cf       	rjmp	.-56     	; 0x3d0 <GSM_Response_Display+0xc>
	

	LCD_Command(0xc0);
     408:	80 ec       	ldi	r24, 0xC0	; 192
     40a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
}

void GSM_Response_Display()
{
	buffer_pointer = 0;
	int lcd_pointer = 0;
     40e:	c0 e0       	ldi	r28, 0x00	; 0
     410:	d0 e0       	ldi	r29, 0x00	; 0
			break;
	}
	

	LCD_Command(0xc0);
	while(buff[buffer_pointer]!='\r')								   /* display response till "\r" */
     412:	19 c0       	rjmp	.+50     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	{
		LCD_Char(buff[buffer_pointer]);								
     414:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     418:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     41c:	e7 5c       	subi	r30, 0xC7	; 199
     41e:	fe 4f       	sbci	r31, 0xFE	; 254
     420:	80 81       	ld	r24, Z
     422:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Char>
		buffer_pointer++;
     426:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <buffer_pointer>
     42a:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <buffer_pointer+0x1>
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <buffer_pointer+0x1>
     434:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <buffer_pointer>
		lcd_pointer++;
     438:	21 96       	adiw	r28, 0x01	; 1
		if(lcd_pointer==15)								               /* check for end of LCD line */
     43a:	cf 30       	cpi	r28, 0x0F	; 15
     43c:	d1 05       	cpc	r29, r1
     43e:	19 f4       	brne	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		LCD_Command(0x80);
     440:	80 e8       	ldi	r24, 0x80	; 128
     442:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
			break;
	}
	

	LCD_Command(0xc0);
	while(buff[buffer_pointer]!='\r')								   /* display response till "\r" */
     446:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     44a:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     44e:	e7 5c       	subi	r30, 0xC7	; 199
     450:	fe 4f       	sbci	r31, 0xFE	; 254
     452:	80 81       	ld	r24, Z
     454:	8d 30       	cpi	r24, 0x0D	; 13
     456:	f1 f6       	brne	.-68     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		buffer_pointer++;
		lcd_pointer++;
		if(lcd_pointer==15)								               /* check for end of LCD line */
		LCD_Command(0x80);
	}
	buffer_pointer=0;
     458:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <buffer_pointer+0x1>
     45c:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <buffer_pointer>
	memset(buff,0,strlen(buff));
     460:	e9 e3       	ldi	r30, 0x39	; 57
     462:	f1 e0       	ldi	r31, 0x01	; 1
     464:	01 90       	ld	r0, Z+
     466:	00 20       	and	r0, r0
     468:	e9 f7       	brne	.-6      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     46a:	31 97       	sbiw	r30, 0x01	; 1
     46c:	af 01       	movw	r20, r30
     46e:	49 53       	subi	r20, 0x39	; 57
     470:	51 40       	sbci	r21, 0x01	; 1
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	89 e3       	ldi	r24, 0x39	; 57
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 58 05 	call	0xab0	; 0xab0 <memset>
}
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	08 95       	ret

00000484 <GSM_Response>:
	USART_SendString("ATH\r");					        /*send command ATH\r to hang call*/
	
}

void GSM_Response()
{
     484:	6f 92       	push	r6
     486:	7f 92       	push	r7
     488:	8f 92       	push	r8
     48a:	9f 92       	push	r9
     48c:	af 92       	push	r10
     48e:	bf 92       	push	r11
     490:	cf 92       	push	r12
     492:	df 92       	push	r13
     494:	ef 92       	push	r14
     496:	ff 92       	push	r15
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <GSM_Response+0x1e>
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
	unsigned int timeout=0;
     4a6:	e1 2c       	mov	r14, r1
     4a8:	f1 2c       	mov	r15, r1
	int Response_Length=0;
	while(1)
	{
		if(timeout>=60000)								/*if timeout occur then return */
		return;
		Response_Length = strlen(buff);
     4aa:	0f 2e       	mov	r0, r31
     4ac:	f9 e3       	ldi	r31, 0x39	; 57
     4ae:	cf 2e       	mov	r12, r31
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	df 2e       	mov	r13, r31
     4b4:	f0 2d       	mov	r31, r0
		{
			_delay_ms(2);
			timeout++;
			if(Response_Length==strlen(buff))
			{
				for(int i=0;i<Response_Length;i++)
     4b6:	61 2c       	mov	r6, r1
     4b8:	71 2c       	mov	r7, r1
	int Response_Length=0;
	while(1)
	{
		if(timeout>=60000)								/*if timeout occur then return */
		return;
		Response_Length = strlen(buff);
     4ba:	f6 01       	movw	r30, r12
     4bc:	01 90       	ld	r0, Z+
     4be:	00 20       	and	r0, r0
     4c0:	e9 f7       	brne	.-6      	; 0x4bc <GSM_Response+0x38>
     4c2:	31 97       	sbiw	r30, 0x01	; 1
     4c4:	e9 53       	subi	r30, 0x39	; 57
     4c6:	f1 40       	sbci	r31, 0x01	; 1
		if(Response_Length)
     4c8:	f1 f1       	breq	.+124    	; 0x546 <GSM_Response+0xc2>
     4ca:	af e9       	ldi	r26, 0x9F	; 159
     4cc:	bf e0       	ldi	r27, 0x0F	; 15
     4ce:	11 97       	sbiw	r26, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <GSM_Response+0x4a>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <GSM_Response+0x50>
     4d4:	00 00       	nop
		{
			_delay_ms(2);
			timeout++;
     4d6:	bf ef       	ldi	r27, 0xFF	; 255
     4d8:	eb 1a       	sub	r14, r27
     4da:	fb 0a       	sbc	r15, r27
			if(Response_Length==strlen(buff))
     4dc:	d6 01       	movw	r26, r12
     4de:	0d 90       	ld	r0, X+
     4e0:	00 20       	and	r0, r0
     4e2:	e9 f7       	brne	.-6      	; 0x4de <GSM_Response+0x5a>
     4e4:	11 97       	sbiw	r26, 0x01	; 1
     4e6:	a9 53       	subi	r26, 0x39	; 57
     4e8:	b1 40       	sbci	r27, 0x01	; 1
     4ea:	ea 17       	cp	r30, r26
     4ec:	fb 07       	cpc	r31, r27
     4ee:	59 f5       	brne	.+86     	; 0x546 <GSM_Response+0xc2>
			{
				for(int i=0;i<Response_Length;i++)
     4f0:	1e 16       	cp	r1, r30
     4f2:	1f 06       	cpc	r1, r31
     4f4:	44 f5       	brge	.+80     	; 0x546 <GSM_Response+0xc2>
     4f6:	0f 2e       	mov	r0, r31
     4f8:	f9 e3       	ldi	r31, 0x39	; 57
     4fa:	af 2e       	mov	r10, r31
     4fc:	f1 e0       	ldi	r31, 0x01	; 1
     4fe:	bf 2e       	mov	r11, r31
     500:	f0 2d       	mov	r31, r0
     502:	8f 01       	movw	r16, r30
     504:	07 5c       	subi	r16, 0xC7	; 199
     506:	1e 4f       	sbci	r17, 0xFE	; 254
     508:	86 2c       	mov	r8, r6
     50a:	97 2c       	mov	r9, r7
				{
					memmove(CRLF_buff,CRLF_buff+1,1);
     50c:	8a 81       	ldd	r24, Y+2	; 0x02
     50e:	89 83       	std	Y+1, r24	; 0x01
					CRLF_buff[1]=buff[i];
     510:	f5 01       	movw	r30, r10
     512:	81 91       	ld	r24, Z+
     514:	5f 01       	movw	r10, r30
     516:	8a 83       	std	Y+2, r24	; 0x02
					if(strncmp(CRLF_buff,"\r\n",2))
     518:	42 e0       	ldi	r20, 0x02	; 2
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	61 ea       	ldi	r22, 0xA1	; 161
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	ce 01       	movw	r24, r28
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	0e 94 5f 05 	call	0xabe	; 0xabe <strncmp>
     528:	89 2b       	or	r24, r25
     52a:	51 f0       	breq	.+20     	; 0x540 <GSM_Response+0xbc>
					{
						if(CRLF_Found++==2)				/* search for \r\n in string */
     52c:	c4 01       	movw	r24, r8
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	f2 e0       	ldi	r31, 0x02	; 2
     532:	8f 16       	cp	r8, r31
     534:	91 04       	cpc	r9, r1
     536:	19 f4       	brne	.+6      	; 0x53e <GSM_Response+0xba>
						{
							GSM_Response_Display();		/* display response */
     538:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <GSM_Response_Display>
							return;
     53c:	13 c0       	rjmp	.+38     	; 0x564 <GSM_Response+0xe0>
				{
					memmove(CRLF_buff,CRLF_buff+1,1);
					CRLF_buff[1]=buff[i];
					if(strncmp(CRLF_buff,"\r\n",2))
					{
						if(CRLF_Found++==2)				/* search for \r\n in string */
     53e:	4c 01       	movw	r8, r24
		{
			_delay_ms(2);
			timeout++;
			if(Response_Length==strlen(buff))
			{
				for(int i=0;i<Response_Length;i++)
     540:	a0 16       	cp	r10, r16
     542:	b1 06       	cpc	r11, r17
     544:	19 f7       	brne	.-58     	; 0x50c <GSM_Response+0x88>
     546:	8f ec       	ldi	r24, 0xCF	; 207
     548:	97 e0       	ldi	r25, 0x07	; 7
     54a:	01 97       	sbiw	r24, 0x01	; 1
     54c:	f1 f7       	brne	.-4      	; 0x54a <GSM_Response+0xc6>
     54e:	00 c0       	rjmp	.+0      	; 0x550 <GSM_Response+0xcc>
     550:	00 00       	nop

			}
			
		}
		_delay_ms(1);
		timeout++;
     552:	9f ef       	ldi	r25, 0xFF	; 255
     554:	e9 1a       	sub	r14, r25
     556:	f9 0a       	sbc	r15, r25
	int CRLF_Found=0;
	char CRLF_buff[2];
	int Response_Length=0;
	while(1)
	{
		if(timeout>=60000)								/*if timeout occur then return */
     558:	a0 e6       	ldi	r26, 0x60	; 96
     55a:	ea 16       	cp	r14, r26
     55c:	aa ee       	ldi	r26, 0xEA	; 234
     55e:	fa 06       	cpc	r15, r26
     560:	08 f4       	brcc	.+2      	; 0x564 <GSM_Response+0xe0>
     562:	ab cf       	rjmp	.-170    	; 0x4ba <GSM_Response+0x36>
		}
		_delay_ms(1);
		timeout++;
	}
	status_flag=0;
}
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
     574:	df 90       	pop	r13
     576:	cf 90       	pop	r12
     578:	bf 90       	pop	r11
     57a:	af 90       	pop	r10
     57c:	9f 90       	pop	r9
     57e:	8f 90       	pop	r8
     580:	7f 90       	pop	r7
     582:	6f 90       	pop	r6
     584:	08 95       	ret

00000586 <GSM_Begin>:
void GSM_Begin()
{

	while(1)
	{
		LCD_Command(0xc0);
     586:	80 ec       	ldi	r24, 0xC0	; 192
     588:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
		USART_SendString("ATE0\r");			/* send ATE0 to check module is ready or not */
     58c:	84 ea       	ldi	r24, 0xA4	; 164
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 09 05 	call	0xa12	; 0xa12 <USART_SendString>
     594:	2f ef       	ldi	r18, 0xFF	; 255
     596:	81 ee       	ldi	r24, 0xE1	; 225
     598:	94 e0       	ldi	r25, 0x04	; 4
     59a:	21 50       	subi	r18, 0x01	; 1
     59c:	80 40       	sbci	r24, 0x00	; 0
     59e:	90 40       	sbci	r25, 0x00	; 0
     5a0:	e1 f7       	brne	.-8      	; 0x59a <GSM_Begin+0x14>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <GSM_Begin+0x1e>
     5a4:	00 00       	nop
		_delay_ms(200);
		if(strstr(buff,"OK"))
     5a6:	6a ea       	ldi	r22, 0xAA	; 170
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	89 e3       	ldi	r24, 0x39	; 57
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 6d 05 	call	0xada	; 0xada <strstr>
     5b2:	89 2b       	or	r24, r25
     5b4:	69 f1       	breq	.+90     	; 0x610 <GSM_Begin+0x8a>
		{
			GSM_Response();                 /* get Response */
     5b6:	0e 94 42 02 	call	0x484	; 0x484 <GSM_Response>
			memset(buff,0,160);
     5ba:	80 ea       	ldi	r24, 0xA0	; 160
     5bc:	e9 e3       	ldi	r30, 0x39	; 57
     5be:	f1 e0       	ldi	r31, 0x01	; 1
     5c0:	df 01       	movw	r26, r30
     5c2:	1d 92       	st	X+, r1
     5c4:	8a 95       	dec	r24
     5c6:	e9 f7       	brne	.-6      	; 0x5c2 <GSM_Begin+0x3c>
     5c8:	bf ef       	ldi	r27, 0xFF	; 255
     5ca:	29 e6       	ldi	r18, 0x69	; 105
     5cc:	88 e1       	ldi	r24, 0x18	; 24
     5ce:	b1 50       	subi	r27, 0x01	; 1
     5d0:	20 40       	sbci	r18, 0x00	; 0
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <GSM_Begin+0x48>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <GSM_Begin+0x52>
     5d8:	00 00       	nop
			LCD_String(buff);
		}
	}
	_delay_ms(1000);

	LCD_Clear();
     5da:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
	LCD_String_xy(1,0,"Text Mode");
     5de:	4d ea       	ldi	r20, 0xAD	; 173
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
	LCD_Command(0xc0);
     5ea:	80 ec       	ldi	r24, 0xC0	; 192
     5ec:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	USART_SendString("AT+CMGF=1\r");/* select message format as text */
     5f0:	87 eb       	ldi	r24, 0xB7	; 183
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 09 05 	call	0xa12	; 0xa12 <USART_SendString>
	GSM_Response();
     5f8:	0e 94 42 02 	call	0x484	; 0x484 <GSM_Response>
     5fc:	9f ef       	ldi	r25, 0xFF	; 255
     5fe:	a9 e6       	ldi	r26, 0x69	; 105
     600:	b8 e1       	ldi	r27, 0x18	; 24
     602:	91 50       	subi	r25, 0x01	; 1
     604:	a0 40       	sbci	r26, 0x00	; 0
     606:	b0 40       	sbci	r27, 0x00	; 0
     608:	e1 f7       	brne	.-8      	; 0x602 <GSM_Begin+0x7c>
     60a:	00 c0       	rjmp	.+0      	; 0x60c <GSM_Begin+0x86>
     60c:	00 00       	nop
	_delay_ms(1000);
}
     60e:	08 95       	ret
			break;
		}
		else
		{

			LCD_String(buff);
     610:	89 e3       	ldi	r24, 0x39	; 57
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_String>
		}
	}
     618:	b6 cf       	rjmp	.-148    	; 0x586 <GSM_Begin>

0000061a <GSM_Msg_Display>:
	USART_SendString(read_cmd);							/* read message at specified location/position */
	GSM_Msg_Display();									/* display message */
}

void GSM_Msg_Display()
{
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	2f ef       	ldi	r18, 0xFF	; 255
     624:	84 e3       	ldi	r24, 0x34	; 52
     626:	9c e0       	ldi	r25, 0x0C	; 12
     628:	21 50       	subi	r18, 0x01	; 1
     62a:	80 40       	sbci	r24, 0x00	; 0
     62c:	90 40       	sbci	r25, 0x00	; 0
     62e:	e1 f7       	brne	.-8      	; 0x628 <GSM_Msg_Display+0xe>
     630:	00 c0       	rjmp	.+0      	; 0x632 <GSM_Msg_Display+0x18>
     632:	00 00       	nop
	_delay_ms(500);
	if(!(strstr(buff,"+CMGR")))                         /*check for +CMGR response */
     634:	62 ec       	ldi	r22, 0xC2	; 194
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	89 e3       	ldi	r24, 0x39	; 57
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	0e 94 6d 05 	call	0xada	; 0xada <strstr>
     640:	89 2b       	or	r24, r25
     642:	39 f4       	brne	.+14     	; 0x652 <GSM_Msg_Display+0x38>
	{
		LCD_String_xy(1,0,"No message");
     644:	48 ec       	ldi	r20, 0xC8	; 200
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
     650:	b9 c0       	rjmp	.+370    	; 0x7c4 <GSM_Msg_Display+0x1aa>
	}
	else
	{
		buffer_pointer = 0;
     652:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <buffer_pointer+0x1>
     656:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <buffer_pointer>
		
		while(1)
		{
			if(buff[buffer_pointer]=='\r' || buff[buffer_pointer]== 'n')  /*wait till \r\n not over*/
     65a:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     65e:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     662:	e7 5c       	subi	r30, 0xC7	; 199
     664:	fe 4f       	sbci	r31, 0xFE	; 254
     666:	80 81       	ld	r24, Z
     668:	8d 30       	cpi	r24, 0x0D	; 13
     66a:	99 f0       	breq	.+38     	; 0x692 <GSM_Msg_Display+0x78>
     66c:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     670:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     674:	e7 5c       	subi	r30, 0xC7	; 199
     676:	fe 4f       	sbci	r31, 0xFE	; 254
     678:	80 81       	ld	r24, Z
     67a:	8e 36       	cpi	r24, 0x6E	; 110
     67c:	51 f0       	breq	.+20     	; 0x692 <GSM_Msg_Display+0x78>
			else
			break;
		}
		
		/* search for 1st ',' to get mobile no.*/
		while(buff[buffer_pointer]!=',')
     67e:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     682:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     686:	e7 5c       	subi	r30, 0xC7	; 199
     688:	fe 4f       	sbci	r31, 0xFE	; 254
     68a:	80 81       	ld	r24, Z
     68c:	8c 32       	cpi	r24, 0x2C	; 44
     68e:	59 f4       	brne	.+22     	; 0x6a6 <GSM_Msg_Display+0x8c>
     690:	1c c0       	rjmp	.+56     	; 0x6ca <GSM_Msg_Display+0xb0>
		
		while(1)
		{
			if(buff[buffer_pointer]=='\r' || buff[buffer_pointer]== 'n')  /*wait till \r\n not over*/
			{
				buffer_pointer++;
     692:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <buffer_pointer>
     696:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <buffer_pointer+0x1>
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <buffer_pointer+0x1>
     6a0:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <buffer_pointer>
			}
			else
			break;
		}
     6a4:	da cf       	rjmp	.-76     	; 0x65a <GSM_Msg_Display+0x40>
		
		/* search for 1st ',' to get mobile no.*/
		while(buff[buffer_pointer]!=',')
		{
			buffer_pointer++;
     6a6:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <buffer_pointer>
     6aa:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <buffer_pointer+0x1>
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <buffer_pointer+0x1>
     6b4:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <buffer_pointer>
			else
			break;
		}
		
		/* search for 1st ',' to get mobile no.*/
		while(buff[buffer_pointer]!=',')
     6b8:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     6bc:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     6c0:	e7 5c       	subi	r30, 0xC7	; 199
     6c2:	fe 4f       	sbci	r31, 0xFE	; 254
     6c4:	80 81       	ld	r24, Z
     6c6:	8c 32       	cpi	r24, 0x2C	; 44
     6c8:	71 f7       	brne	.-36     	; 0x6a6 <GSM_Msg_Display+0x8c>
		{
			buffer_pointer++;
		}
		buffer_pointer = buffer_pointer+2;
     6ca:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <buffer_pointer>
     6ce:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <buffer_pointer+0x1>
     6d2:	02 96       	adiw	r24, 0x02	; 2
     6d4:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <buffer_pointer+0x1>
     6d8:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <buffer_pointer>
     6dc:	a9 ed       	ldi	r26, 0xD9	; 217
     6de:	b1 e0       	ldi	r27, 0x01	; 1
     6e0:	26 ee       	ldi	r18, 0xE6	; 230
     6e2:	31 e0       	ldi	r19, 0x01	; 1

		/* extract mobile no. of message sender */
		for(int i=0;i<=12;i++)
		{
			Mobile_no[i] = buff[buffer_pointer];
     6e4:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     6e8:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     6ec:	e7 5c       	subi	r30, 0xC7	; 199
     6ee:	fe 4f       	sbci	r31, 0xFE	; 254
     6f0:	80 81       	ld	r24, Z
     6f2:	8d 93       	st	X+, r24
			buffer_pointer++;
     6f4:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <buffer_pointer>
     6f8:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <buffer_pointer+0x1>
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <buffer_pointer+0x1>
     702:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <buffer_pointer>
			buffer_pointer++;
		}
		buffer_pointer = buffer_pointer+2;

		/* extract mobile no. of message sender */
		for(int i=0;i<=12;i++)
     706:	a2 17       	cp	r26, r18
     708:	b3 07       	cpc	r27, r19
     70a:	61 f7       	brne	.-40     	; 0x6e4 <GSM_Msg_Display+0xca>
			buffer_pointer++;
		}
		
		do
		{
			buffer_pointer++;
     70c:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <buffer_pointer>
     710:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <buffer_pointer+0x1>
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <buffer_pointer+0x1>
     71a:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <buffer_pointer>
		}while(buff[buffer_pointer-1]!= '\n');
     71e:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     722:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     726:	e8 5c       	subi	r30, 0xC8	; 200
     728:	fe 4f       	sbci	r31, 0xFE	; 254
     72a:	80 81       	ld	r24, Z
     72c:	8a 30       	cpi	r24, 0x0A	; 10
     72e:	71 f7       	brne	.-36     	; 0x70c <GSM_Msg_Display+0xf2>
		
		LCD_Command(0xC0);
     730:	80 ec       	ldi	r24, 0xC0	; 192
     732:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     736:	07 ee       	ldi	r16, 0xE7	; 231
     738:	11 e0       	ldi	r17, 0x01	; 1
		int i=0;
     73a:	c0 e0       	ldi	r28, 0x00	; 0
     73c:	d0 e0       	ldi	r29, 0x00	; 0

		/* display and save message */
		while(buff[buffer_pointer]!= '\r' && i<31)
     73e:	23 c0       	rjmp	.+70     	; 0x786 <GSM_Msg_Display+0x16c>
		{
				LCD_Char(buff[buffer_pointer]);
     740:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     744:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     748:	e7 5c       	subi	r30, 0xC7	; 199
     74a:	fe 4f       	sbci	r31, 0xFE	; 254
     74c:	80 81       	ld	r24, Z
     74e:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Char>
				message_received[i]=buff[buffer_pointer];
     752:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     756:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     75a:	e7 5c       	subi	r30, 0xC7	; 199
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	80 81       	ld	r24, Z
     760:	f8 01       	movw	r30, r16
     762:	81 93       	st	Z+, r24
     764:	8f 01       	movw	r16, r30
				
				buffer_pointer++;
     766:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <buffer_pointer>
     76a:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <buffer_pointer+0x1>
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <buffer_pointer+0x1>
     774:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <buffer_pointer>
				i++;
     778:	21 96       	adiw	r28, 0x01	; 1
				if(i==16)
     77a:	c0 31       	cpi	r28, 0x10	; 16
     77c:	d1 05       	cpc	r29, r1
     77e:	19 f4       	brne	.+6      	; 0x786 <GSM_Msg_Display+0x16c>
					LCD_Command(0x80);						/* display on 1st line */
     780:	80 e8       	ldi	r24, 0x80	; 128
     782:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
		
		LCD_Command(0xC0);
		int i=0;

		/* display and save message */
		while(buff[buffer_pointer]!= '\r' && i<31)
     786:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <buffer_pointer>
     78a:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <buffer_pointer+0x1>
     78e:	e7 5c       	subi	r30, 0xC7	; 199
     790:	fe 4f       	sbci	r31, 0xFE	; 254
     792:	80 81       	ld	r24, Z
     794:	8d 30       	cpi	r24, 0x0D	; 13
     796:	19 f0       	breq	.+6      	; 0x79e <GSM_Msg_Display+0x184>
     798:	cf 31       	cpi	r28, 0x1F	; 31
     79a:	d1 05       	cpc	r29, r1
     79c:	89 f6       	brne	.-94     	; 0x740 <GSM_Msg_Display+0x126>
				i++;
				if(i==16)
					LCD_Command(0x80);						/* display on 1st line */
		}
		
		buffer_pointer = 0;
     79e:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <buffer_pointer+0x1>
     7a2:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <buffer_pointer>
		memset(buff,0,strlen(buff));
     7a6:	e9 e3       	ldi	r30, 0x39	; 57
     7a8:	f1 e0       	ldi	r31, 0x01	; 1
     7aa:	01 90       	ld	r0, Z+
     7ac:	00 20       	and	r0, r0
     7ae:	e9 f7       	brne	.-6      	; 0x7aa <GSM_Msg_Display+0x190>
     7b0:	31 97       	sbiw	r30, 0x01	; 1
     7b2:	af 01       	movw	r20, r30
     7b4:	49 53       	subi	r20, 0x39	; 57
     7b6:	51 40       	sbci	r21, 0x01	; 1
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	89 e3       	ldi	r24, 0x39	; 57
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0e 94 58 05 	call	0xab0	; 0xab0 <memset>
	}
	status_flag = 0;
     7c4:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <status_flag>
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	08 95       	ret

000007d2 <GSM_Msg_Read>:
	buffer_pointer=0;
	memset(buff,0,strlen(buff));
}

void GSM_Msg_Read(int position)
{
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	2a 97       	sbiw	r28, 0x0a	; 10
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	cd bf       	out	0x3d, r28	; 61
	char read_cmd[10];
	sprintf(read_cmd,"AT+CMGR=%d\r",position);
     7ea:	9f 93       	push	r25
     7ec:	8f 93       	push	r24
     7ee:	83 ed       	ldi	r24, 0xD3	; 211
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	9f 93       	push	r25
     7f4:	8f 93       	push	r24
     7f6:	8e 01       	movw	r16, r28
     7f8:	0f 5f       	subi	r16, 0xFF	; 255
     7fa:	1f 4f       	sbci	r17, 0xFF	; 255
     7fc:	1f 93       	push	r17
     7fe:	0f 93       	push	r16
     800:	0e 94 8f 05 	call	0xb1e	; 0xb1e <sprintf>
	USART_SendString(read_cmd);							/* read message at specified location/position */
     804:	c8 01       	movw	r24, r16
     806:	0e 94 09 05 	call	0xa12	; 0xa12 <USART_SendString>
	GSM_Msg_Display();									/* display message */
     80a:	0e 94 0d 03 	call	0x61a	; 0x61a <GSM_Msg_Display>
}
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	2a 96       	adiw	r28, 0x0a	; 10
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	08 95       	ret

00000830 <main>:
int position = 0;							/* save location of current message */


int main(void)
{
	buffer_pointer = 0;
     830:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <buffer_pointer+0x1>
     834:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <buffer_pointer>
	int is_msg_arrived;
	memset(message_received, 0, 60);
     838:	8c e3       	ldi	r24, 0x3C	; 60
     83a:	e7 ee       	ldi	r30, 0xE7	; 231
     83c:	f1 e0       	ldi	r31, 0x01	; 1
     83e:	df 01       	movw	r26, r30
     840:	1d 92       	st	X+, r1
     842:	8a 95       	dec	r24
     844:	e9 f7       	brne	.-6      	; 0x840 <main+0x10>
    LCD_Init();
     846:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_Init>
	USART_Init(9600);						    /* initialize USART communication */
     84a:	60 e8       	ldi	r22, 0x80	; 128
     84c:	75 e2       	ldi	r23, 0x25	; 37
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 d7 04 	call	0x9ae	; 0x9ae <USART_Init>
	sei();
     856:	78 94       	sei
	LCD_String_xy(1,0,"GSM Initializing");
     858:	4f ed       	ldi	r20, 0xDF	; 223
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
     864:	bf ef       	ldi	r27, 0xFF	; 255
     866:	2d e3       	ldi	r18, 0x3D	; 61
     868:	39 e4       	ldi	r19, 0x49	; 73
     86a:	b1 50       	subi	r27, 0x01	; 1
     86c:	20 40       	sbci	r18, 0x00	; 0
     86e:	30 40       	sbci	r19, 0x00	; 0
     870:	e1 f7       	brne	.-8      	; 0x86a <__stack+0xb>
     872:	00 c0       	rjmp	.+0      	; 0x874 <__stack+0x15>
     874:	00 00       	nop
	_delay_ms(3000);
	LCD_Clear();
     876:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
	LCD_String_xy(1,0,"AT");
     87a:	40 ef       	ldi	r20, 0xF0	; 240
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
	GSM_Begin();								/* check GSM responses and initialize GSM */
     886:	0e 94 c3 02 	call	0x586	; 0x586 <GSM_Begin>
	LCD_Clear();	
     88a:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
				is_msg_arrived=0;
				status_flag=0;
				LCD_Clear();	
			}
		LCD_String_xy(1,0,"waiting for msg");
		memset(Mobile_no, 0, 14);
     88e:	de e0       	ldi	r29, 0x0E	; 14
		memset(message_received, 0, 60);
     890:	cc e3       	ldi	r28, 0x3C	; 60
	LCD_Clear();	
	
	while (1){
		
		/*check if any new message received */
		if(status_flag==1){					
     892:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <status_flag>
     896:	81 30       	cpi	r24, 0x01	; 1
     898:	09 f0       	breq	.+2      	; 0x89c <__stack+0x3d>
     89a:	74 c0       	rjmp	.+232    	; 0x984 <__stack+0x125>
			is_msg_arrived = GSM_Wait_for_Msg();		/*check for message arrival*/
     89c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <GSM_Wait_for_Msg>
			if(is_msg_arrived== true)
     8a0:	88 23       	and	r24, r24
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <__stack+0x47>
     8a4:	6b c0       	rjmp	.+214    	; 0x97c <__stack+0x11d>
			{
				LCD_Clear();
     8a6:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
				LCD_String_xy(1,0,"new message");		/* new message arrived */
     8aa:	43 ef       	ldi	r20, 0xF3	; 243
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
     8b6:	8f ef       	ldi	r24, 0xFF	; 255
     8b8:	99 e6       	ldi	r25, 0x69	; 105
     8ba:	a8 e1       	ldi	r26, 0x18	; 24
     8bc:	81 50       	subi	r24, 0x01	; 1
     8be:	90 40       	sbci	r25, 0x00	; 0
     8c0:	a0 40       	sbci	r26, 0x00	; 0
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <__stack+0x5d>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <__stack+0x67>
     8c6:	00 00       	nop
				_delay_ms(1000);
				LCD_Clear();
     8c8:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
				GSM_Msg_Read(position);					/* read arrived message */		
     8cc:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     8d0:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
     8d4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <GSM_Msg_Read>
     8d8:	bf ef       	ldi	r27, 0xFF	; 255
     8da:	2d e3       	ldi	r18, 0x3D	; 61
     8dc:	39 e4       	ldi	r19, 0x49	; 73
     8de:	b1 50       	subi	r27, 0x01	; 1
     8e0:	20 40       	sbci	r18, 0x00	; 0
     8e2:	30 40       	sbci	r19, 0x00	; 0
     8e4:	e1 f7       	brne	.-8      	; 0x8de <__stack+0x7f>
     8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <__stack+0x89>
     8e8:	00 00       	nop
				_delay_ms(3000);
					
			/*check if received message is "call me" */
				if(strstr( message_received,"call me")){
     8ea:	6f ef       	ldi	r22, 0xFF	; 255
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	87 ee       	ldi	r24, 0xE7	; 231
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 6d 05 	call	0xada	; 0xada <strstr>
     8f6:	89 2b       	or	r24, r25
     8f8:	41 f1       	breq	.+80     	; 0x94a <__stack+0xeb>
					
					GSM_Calling(Mobile_no);				/* call sender of message */
     8fa:	89 ed       	ldi	r24, 0xD9	; 217
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 ae 01 	call	0x35c	; 0x35c <GSM_Calling>
					LCD_Clear();
     902:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
					LCD_String_xy(1,0,"Calling...");
     906:	47 e0       	ldi	r20, 0x07	; 7
     908:	51 e0       	ldi	r21, 0x01	; 1
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
     912:	8f ef       	ldi	r24, 0xFF	; 255
     914:	9c e2       	ldi	r25, 0x2C	; 44
     916:	a1 e3       	ldi	r26, 0x31	; 49
     918:	b1 e0       	ldi	r27, 0x01	; 1
     91a:	81 50       	subi	r24, 0x01	; 1
     91c:	90 40       	sbci	r25, 0x00	; 0
     91e:	a0 40       	sbci	r26, 0x00	; 0
     920:	b0 40       	sbci	r27, 0x00	; 0
     922:	d9 f7       	brne	.-10     	; 0x91a <__stack+0xbb>
     924:	00 c0       	rjmp	.+0      	; 0x926 <__stack+0xc7>
     926:	00 00       	nop
					_delay_ms(15000);
					GSM_HangCall();						/* hang call */
     928:	0e 94 db 01 	call	0x3b6	; 0x3b6 <GSM_HangCall>
					LCD_String_xy(1,0,"Hang Call");
     92c:	42 e1       	ldi	r20, 0x12	; 18
     92e:	51 e0       	ldi	r21, 0x01	; 1
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
     938:	2f ef       	ldi	r18, 0xFF	; 255
     93a:	39 e6       	ldi	r19, 0x69	; 105
     93c:	88 e1       	ldi	r24, 0x18	; 24
     93e:	21 50       	subi	r18, 0x01	; 1
     940:	30 40       	sbci	r19, 0x00	; 0
     942:	80 40       	sbci	r24, 0x00	; 0
     944:	e1 f7       	brne	.-8      	; 0x93e <__stack+0xdf>
     946:	00 c0       	rjmp	.+0      	; 0x948 <__stack+0xe9>
     948:	00 00       	nop
					_delay_ms(1000);
				}
	
				LCD_Clear();
     94a:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
				GSM_Msg_Delete(position);				/* to save SIM memory delete current message */
     94e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     952:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
     956:	0e 94 b1 00 	call	0x162	; 0x162 <GSM_Msg_Delete>
				LCD_String_xy(1,0,"Clear msg");
     95a:	4c e1       	ldi	r20, 0x1C	; 28
     95c:	51 e0       	ldi	r21, 0x01	; 1
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
				GSM_Response();
     966:	0e 94 42 02 	call	0x484	; 0x484 <GSM_Response>
     96a:	9f ef       	ldi	r25, 0xFF	; 255
     96c:	a9 e6       	ldi	r26, 0x69	; 105
     96e:	b8 e1       	ldi	r27, 0x18	; 24
     970:	91 50       	subi	r25, 0x01	; 1
     972:	a0 40       	sbci	r26, 0x00	; 0
     974:	b0 40       	sbci	r27, 0x00	; 0
     976:	e1 f7       	brne	.-8      	; 0x970 <__stack+0x111>
     978:	00 c0       	rjmp	.+0      	; 0x97a <__stack+0x11b>
     97a:	00 00       	nop
			
			}
				
								
				is_msg_arrived=0;
				status_flag=0;
     97c:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <status_flag>
				LCD_Clear();	
     980:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Clear>
			}
		LCD_String_xy(1,0,"waiting for msg");
     984:	46 e2       	ldi	r20, 0x26	; 38
     986:	51 e0       	ldi	r21, 0x01	; 1
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_String_xy>
		memset(Mobile_no, 0, 14);
     990:	e9 ed       	ldi	r30, 0xD9	; 217
     992:	f1 e0       	ldi	r31, 0x01	; 1
     994:	df 01       	movw	r26, r30
     996:	2d 2f       	mov	r18, r29
     998:	1d 92       	st	X+, r1
     99a:	2a 95       	dec	r18
     99c:	e9 f7       	brne	.-6      	; 0x998 <__stack+0x139>
		memset(message_received, 0, 60);
     99e:	e7 ee       	ldi	r30, 0xE7	; 231
     9a0:	f1 e0       	ldi	r31, 0x01	; 1
     9a2:	df 01       	movw	r26, r30
     9a4:	2c 2f       	mov	r18, r28
     9a6:	1d 92       	st	X+, r1
     9a8:	2a 95       	dec	r18
     9aa:	e9 f7       	brne	.-6      	; 0x9a6 <__stack+0x147>
		
		
	}
     9ac:	72 cf       	rjmp	.-284    	; 0x892 <__stack+0x33>

000009ae <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return(UDR);									/* Get and return received data */
}
     9ae:	2a b1       	in	r18, 0x0a	; 10
     9b0:	28 69       	ori	r18, 0x98	; 152
     9b2:	2a b9       	out	0x0a, r18	; 10
     9b4:	20 b5       	in	r18, 0x20	; 32
     9b6:	26 68       	ori	r18, 0x86	; 134
     9b8:	20 bd       	out	0x20, r18	; 32
     9ba:	dc 01       	movw	r26, r24
     9bc:	cb 01       	movw	r24, r22
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	aa 1f       	adc	r26, r26
     9c4:	bb 1f       	adc	r27, r27
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	9c 01       	movw	r18, r24
     9d0:	ad 01       	movw	r20, r26
     9d2:	22 0f       	add	r18, r18
     9d4:	33 1f       	adc	r19, r19
     9d6:	44 1f       	adc	r20, r20
     9d8:	55 1f       	adc	r21, r21
     9da:	22 0f       	add	r18, r18
     9dc:	33 1f       	adc	r19, r19
     9de:	44 1f       	adc	r20, r20
     9e0:	55 1f       	adc	r21, r21
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	72 e1       	ldi	r23, 0x12	; 18
     9e6:	8a e7       	ldi	r24, 0x7A	; 122
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 18 05 	call	0xa30	; 0xa30 <__udivmodsi4>
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	82 0f       	add	r24, r18
     9f2:	89 b9       	out	0x09, r24	; 9
     9f4:	da 01       	movw	r26, r20
     9f6:	c9 01       	movw	r24, r18
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	a1 09       	sbc	r26, r1
     9fc:	b1 09       	sbc	r27, r1
     9fe:	89 2f       	mov	r24, r25
     a00:	9a 2f       	mov	r25, r26
     a02:	ab 2f       	mov	r26, r27
     a04:	bb 27       	eor	r27, r27
     a06:	80 bd       	out	0x20, r24	; 32
     a08:	08 95       	ret

00000a0a <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
     a0a:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     a0c:	5d 9b       	sbis	0x0b, 5	; 11
     a0e:	fe cf       	rjmp	.-4      	; 0xa0c <USART_TxChar+0x2>
}
     a10:	08 95       	ret

00000a12 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */
{
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	ec 01       	movw	r28, r24
	int i=0;
	while (str[i]!=0)
     a18:	88 81       	ld	r24, Y
     a1a:	88 23       	and	r24, r24
     a1c:	31 f0       	breq	.+12     	; 0xa2a <USART_SendString+0x18>
     a1e:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     a20:	0e 94 05 05 	call	0xa0a	; 0xa0a <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */
{
	int i=0;
	while (str[i]!=0)
     a24:	89 91       	ld	r24, Y+
     a26:	81 11       	cpse	r24, r1
     a28:	fb cf       	rjmp	.-10     	; 0xa20 <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <__udivmodsi4>:
     a30:	a1 e2       	ldi	r26, 0x21	; 33
     a32:	1a 2e       	mov	r1, r26
     a34:	aa 1b       	sub	r26, r26
     a36:	bb 1b       	sub	r27, r27
     a38:	fd 01       	movw	r30, r26
     a3a:	0d c0       	rjmp	.+26     	; 0xa56 <__udivmodsi4_ep>

00000a3c <__udivmodsi4_loop>:
     a3c:	aa 1f       	adc	r26, r26
     a3e:	bb 1f       	adc	r27, r27
     a40:	ee 1f       	adc	r30, r30
     a42:	ff 1f       	adc	r31, r31
     a44:	a2 17       	cp	r26, r18
     a46:	b3 07       	cpc	r27, r19
     a48:	e4 07       	cpc	r30, r20
     a4a:	f5 07       	cpc	r31, r21
     a4c:	20 f0       	brcs	.+8      	; 0xa56 <__udivmodsi4_ep>
     a4e:	a2 1b       	sub	r26, r18
     a50:	b3 0b       	sbc	r27, r19
     a52:	e4 0b       	sbc	r30, r20
     a54:	f5 0b       	sbc	r31, r21

00000a56 <__udivmodsi4_ep>:
     a56:	66 1f       	adc	r22, r22
     a58:	77 1f       	adc	r23, r23
     a5a:	88 1f       	adc	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	1a 94       	dec	r1
     a60:	69 f7       	brne	.-38     	; 0xa3c <__udivmodsi4_loop>
     a62:	60 95       	com	r22
     a64:	70 95       	com	r23
     a66:	80 95       	com	r24
     a68:	90 95       	com	r25
     a6a:	9b 01       	movw	r18, r22
     a6c:	ac 01       	movw	r20, r24
     a6e:	bd 01       	movw	r22, r26
     a70:	cf 01       	movw	r24, r30
     a72:	08 95       	ret

00000a74 <atoi>:
     a74:	fc 01       	movw	r30, r24
     a76:	88 27       	eor	r24, r24
     a78:	99 27       	eor	r25, r25
     a7a:	e8 94       	clt
     a7c:	21 91       	ld	r18, Z+
     a7e:	20 32       	cpi	r18, 0x20	; 32
     a80:	e9 f3       	breq	.-6      	; 0xa7c <atoi+0x8>
     a82:	29 30       	cpi	r18, 0x09	; 9
     a84:	10 f0       	brcs	.+4      	; 0xa8a <atoi+0x16>
     a86:	2e 30       	cpi	r18, 0x0E	; 14
     a88:	c8 f3       	brcs	.-14     	; 0xa7c <atoi+0x8>
     a8a:	2b 32       	cpi	r18, 0x2B	; 43
     a8c:	41 f0       	breq	.+16     	; 0xa9e <atoi+0x2a>
     a8e:	2d 32       	cpi	r18, 0x2D	; 45
     a90:	39 f4       	brne	.+14     	; 0xaa0 <atoi+0x2c>
     a92:	68 94       	set
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <atoi+0x2a>
     a96:	0e 94 87 05 	call	0xb0e	; 0xb0e <__mulhi_const_10>
     a9a:	82 0f       	add	r24, r18
     a9c:	91 1d       	adc	r25, r1
     a9e:	21 91       	ld	r18, Z+
     aa0:	20 53       	subi	r18, 0x30	; 48
     aa2:	2a 30       	cpi	r18, 0x0A	; 10
     aa4:	c0 f3       	brcs	.-16     	; 0xa96 <atoi+0x22>
     aa6:	1e f4       	brtc	.+6      	; 0xaae <atoi+0x3a>
     aa8:	90 95       	com	r25
     aaa:	81 95       	neg	r24
     aac:	9f 4f       	sbci	r25, 0xFF	; 255
     aae:	08 95       	ret

00000ab0 <memset>:
     ab0:	dc 01       	movw	r26, r24
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <memset+0x6>
     ab4:	6d 93       	st	X+, r22
     ab6:	41 50       	subi	r20, 0x01	; 1
     ab8:	50 40       	sbci	r21, 0x00	; 0
     aba:	e0 f7       	brcc	.-8      	; 0xab4 <memset+0x4>
     abc:	08 95       	ret

00000abe <strncmp>:
     abe:	fb 01       	movw	r30, r22
     ac0:	dc 01       	movw	r26, r24
     ac2:	41 50       	subi	r20, 0x01	; 1
     ac4:	50 40       	sbci	r21, 0x00	; 0
     ac6:	30 f0       	brcs	.+12     	; 0xad4 <strncmp+0x16>
     ac8:	8d 91       	ld	r24, X+
     aca:	01 90       	ld	r0, Z+
     acc:	80 19       	sub	r24, r0
     ace:	19 f4       	brne	.+6      	; 0xad6 <strncmp+0x18>
     ad0:	00 20       	and	r0, r0
     ad2:	b9 f7       	brne	.-18     	; 0xac2 <strncmp+0x4>
     ad4:	88 1b       	sub	r24, r24
     ad6:	99 0b       	sbc	r25, r25
     ad8:	08 95       	ret

00000ada <strstr>:
     ada:	fb 01       	movw	r30, r22
     adc:	51 91       	ld	r21, Z+
     ade:	55 23       	and	r21, r21
     ae0:	a9 f0       	breq	.+42     	; 0xb0c <strstr+0x32>
     ae2:	bf 01       	movw	r22, r30
     ae4:	dc 01       	movw	r26, r24
     ae6:	4d 91       	ld	r20, X+
     ae8:	45 17       	cp	r20, r21
     aea:	41 11       	cpse	r20, r1
     aec:	e1 f7       	brne	.-8      	; 0xae6 <strstr+0xc>
     aee:	59 f4       	brne	.+22     	; 0xb06 <strstr+0x2c>
     af0:	cd 01       	movw	r24, r26
     af2:	01 90       	ld	r0, Z+
     af4:	00 20       	and	r0, r0
     af6:	49 f0       	breq	.+18     	; 0xb0a <strstr+0x30>
     af8:	4d 91       	ld	r20, X+
     afa:	40 15       	cp	r20, r0
     afc:	41 11       	cpse	r20, r1
     afe:	c9 f3       	breq	.-14     	; 0xaf2 <strstr+0x18>
     b00:	fb 01       	movw	r30, r22
     b02:	41 11       	cpse	r20, r1
     b04:	ef cf       	rjmp	.-34     	; 0xae4 <strstr+0xa>
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	08 95       	ret

00000b0e <__mulhi_const_10>:
     b0e:	7a e0       	ldi	r23, 0x0A	; 10
     b10:	97 9f       	mul	r25, r23
     b12:	90 2d       	mov	r25, r0
     b14:	87 9f       	mul	r24, r23
     b16:	80 2d       	mov	r24, r0
     b18:	91 0d       	add	r25, r1
     b1a:	11 24       	eor	r1, r1
     b1c:	08 95       	ret

00000b1e <sprintf>:
     b1e:	ae e0       	ldi	r26, 0x0E	; 14
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	e5 e9       	ldi	r30, 0x95	; 149
     b24:	f5 e0       	ldi	r31, 0x05	; 5
     b26:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__prologue_saves__+0x1c>
     b2a:	0d 89       	ldd	r16, Y+21	; 0x15
     b2c:	1e 89       	ldd	r17, Y+22	; 0x16
     b2e:	86 e0       	ldi	r24, 0x06	; 6
     b30:	8c 83       	std	Y+4, r24	; 0x04
     b32:	1a 83       	std	Y+2, r17	; 0x02
     b34:	09 83       	std	Y+1, r16	; 0x01
     b36:	8f ef       	ldi	r24, 0xFF	; 255
     b38:	9f e7       	ldi	r25, 0x7F	; 127
     b3a:	9e 83       	std	Y+6, r25	; 0x06
     b3c:	8d 83       	std	Y+5, r24	; 0x05
     b3e:	ae 01       	movw	r20, r28
     b40:	47 5e       	subi	r20, 0xE7	; 231
     b42:	5f 4f       	sbci	r21, 0xFF	; 255
     b44:	6f 89       	ldd	r22, Y+23	; 0x17
     b46:	78 8d       	ldd	r23, Y+24	; 0x18
     b48:	ce 01       	movw	r24, r28
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	0e 94 b1 05 	call	0xb62	; 0xb62 <vfprintf>
     b50:	ef 81       	ldd	r30, Y+7	; 0x07
     b52:	f8 85       	ldd	r31, Y+8	; 0x08
     b54:	e0 0f       	add	r30, r16
     b56:	f1 1f       	adc	r31, r17
     b58:	10 82       	st	Z, r1
     b5a:	2e 96       	adiw	r28, 0x0e	; 14
     b5c:	e4 e0       	ldi	r30, 0x04	; 4
     b5e:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__epilogue_restores__+0x1c>

00000b62 <vfprintf>:
     b62:	ab e0       	ldi	r26, 0x0B	; 11
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e7 eb       	ldi	r30, 0xB7	; 183
     b68:	f5 e0       	ldi	r31, 0x05	; 5
     b6a:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__prologue_saves__>
     b6e:	6c 01       	movw	r12, r24
     b70:	7b 01       	movw	r14, r22
     b72:	8a 01       	movw	r16, r20
     b74:	fc 01       	movw	r30, r24
     b76:	17 82       	std	Z+7, r1	; 0x07
     b78:	16 82       	std	Z+6, r1	; 0x06
     b7a:	83 81       	ldd	r24, Z+3	; 0x03
     b7c:	81 ff       	sbrs	r24, 1
     b7e:	cc c1       	rjmp	.+920    	; 0xf18 <vfprintf+0x3b6>
     b80:	ce 01       	movw	r24, r28
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	3c 01       	movw	r6, r24
     b86:	f6 01       	movw	r30, r12
     b88:	93 81       	ldd	r25, Z+3	; 0x03
     b8a:	f7 01       	movw	r30, r14
     b8c:	93 fd       	sbrc	r25, 3
     b8e:	85 91       	lpm	r24, Z+
     b90:	93 ff       	sbrs	r25, 3
     b92:	81 91       	ld	r24, Z+
     b94:	7f 01       	movw	r14, r30
     b96:	88 23       	and	r24, r24
     b98:	09 f4       	brne	.+2      	; 0xb9c <vfprintf+0x3a>
     b9a:	ba c1       	rjmp	.+884    	; 0xf10 <vfprintf+0x3ae>
     b9c:	85 32       	cpi	r24, 0x25	; 37
     b9e:	39 f4       	brne	.+14     	; 0xbae <vfprintf+0x4c>
     ba0:	93 fd       	sbrc	r25, 3
     ba2:	85 91       	lpm	r24, Z+
     ba4:	93 ff       	sbrs	r25, 3
     ba6:	81 91       	ld	r24, Z+
     ba8:	7f 01       	movw	r14, r30
     baa:	85 32       	cpi	r24, 0x25	; 37
     bac:	29 f4       	brne	.+10     	; 0xbb8 <vfprintf+0x56>
     bae:	b6 01       	movw	r22, r12
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 a8 07 	call	0xf50	; 0xf50 <fputc>
     bb6:	e7 cf       	rjmp	.-50     	; 0xb86 <vfprintf+0x24>
     bb8:	91 2c       	mov	r9, r1
     bba:	21 2c       	mov	r2, r1
     bbc:	31 2c       	mov	r3, r1
     bbe:	ff e1       	ldi	r31, 0x1F	; 31
     bc0:	f3 15       	cp	r31, r3
     bc2:	d8 f0       	brcs	.+54     	; 0xbfa <vfprintf+0x98>
     bc4:	8b 32       	cpi	r24, 0x2B	; 43
     bc6:	79 f0       	breq	.+30     	; 0xbe6 <vfprintf+0x84>
     bc8:	38 f4       	brcc	.+14     	; 0xbd8 <vfprintf+0x76>
     bca:	80 32       	cpi	r24, 0x20	; 32
     bcc:	79 f0       	breq	.+30     	; 0xbec <vfprintf+0x8a>
     bce:	83 32       	cpi	r24, 0x23	; 35
     bd0:	a1 f4       	brne	.+40     	; 0xbfa <vfprintf+0x98>
     bd2:	23 2d       	mov	r18, r3
     bd4:	20 61       	ori	r18, 0x10	; 16
     bd6:	1d c0       	rjmp	.+58     	; 0xc12 <vfprintf+0xb0>
     bd8:	8d 32       	cpi	r24, 0x2D	; 45
     bda:	61 f0       	breq	.+24     	; 0xbf4 <vfprintf+0x92>
     bdc:	80 33       	cpi	r24, 0x30	; 48
     bde:	69 f4       	brne	.+26     	; 0xbfa <vfprintf+0x98>
     be0:	23 2d       	mov	r18, r3
     be2:	21 60       	ori	r18, 0x01	; 1
     be4:	16 c0       	rjmp	.+44     	; 0xc12 <vfprintf+0xb0>
     be6:	83 2d       	mov	r24, r3
     be8:	82 60       	ori	r24, 0x02	; 2
     bea:	38 2e       	mov	r3, r24
     bec:	e3 2d       	mov	r30, r3
     bee:	e4 60       	ori	r30, 0x04	; 4
     bf0:	3e 2e       	mov	r3, r30
     bf2:	2a c0       	rjmp	.+84     	; 0xc48 <vfprintf+0xe6>
     bf4:	f3 2d       	mov	r31, r3
     bf6:	f8 60       	ori	r31, 0x08	; 8
     bf8:	1d c0       	rjmp	.+58     	; 0xc34 <vfprintf+0xd2>
     bfa:	37 fc       	sbrc	r3, 7
     bfc:	2d c0       	rjmp	.+90     	; 0xc58 <vfprintf+0xf6>
     bfe:	20 ed       	ldi	r18, 0xD0	; 208
     c00:	28 0f       	add	r18, r24
     c02:	2a 30       	cpi	r18, 0x0A	; 10
     c04:	40 f0       	brcs	.+16     	; 0xc16 <vfprintf+0xb4>
     c06:	8e 32       	cpi	r24, 0x2E	; 46
     c08:	b9 f4       	brne	.+46     	; 0xc38 <vfprintf+0xd6>
     c0a:	36 fc       	sbrc	r3, 6
     c0c:	81 c1       	rjmp	.+770    	; 0xf10 <vfprintf+0x3ae>
     c0e:	23 2d       	mov	r18, r3
     c10:	20 64       	ori	r18, 0x40	; 64
     c12:	32 2e       	mov	r3, r18
     c14:	19 c0       	rjmp	.+50     	; 0xc48 <vfprintf+0xe6>
     c16:	36 fe       	sbrs	r3, 6
     c18:	06 c0       	rjmp	.+12     	; 0xc26 <vfprintf+0xc4>
     c1a:	8a e0       	ldi	r24, 0x0A	; 10
     c1c:	98 9e       	mul	r9, r24
     c1e:	20 0d       	add	r18, r0
     c20:	11 24       	eor	r1, r1
     c22:	92 2e       	mov	r9, r18
     c24:	11 c0       	rjmp	.+34     	; 0xc48 <vfprintf+0xe6>
     c26:	ea e0       	ldi	r30, 0x0A	; 10
     c28:	2e 9e       	mul	r2, r30
     c2a:	20 0d       	add	r18, r0
     c2c:	11 24       	eor	r1, r1
     c2e:	22 2e       	mov	r2, r18
     c30:	f3 2d       	mov	r31, r3
     c32:	f0 62       	ori	r31, 0x20	; 32
     c34:	3f 2e       	mov	r3, r31
     c36:	08 c0       	rjmp	.+16     	; 0xc48 <vfprintf+0xe6>
     c38:	8c 36       	cpi	r24, 0x6C	; 108
     c3a:	21 f4       	brne	.+8      	; 0xc44 <vfprintf+0xe2>
     c3c:	83 2d       	mov	r24, r3
     c3e:	80 68       	ori	r24, 0x80	; 128
     c40:	38 2e       	mov	r3, r24
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <vfprintf+0xe6>
     c44:	88 36       	cpi	r24, 0x68	; 104
     c46:	41 f4       	brne	.+16     	; 0xc58 <vfprintf+0xf6>
     c48:	f7 01       	movw	r30, r14
     c4a:	93 fd       	sbrc	r25, 3
     c4c:	85 91       	lpm	r24, Z+
     c4e:	93 ff       	sbrs	r25, 3
     c50:	81 91       	ld	r24, Z+
     c52:	7f 01       	movw	r14, r30
     c54:	81 11       	cpse	r24, r1
     c56:	b3 cf       	rjmp	.-154    	; 0xbbe <vfprintf+0x5c>
     c58:	98 2f       	mov	r25, r24
     c5a:	9f 7d       	andi	r25, 0xDF	; 223
     c5c:	95 54       	subi	r25, 0x45	; 69
     c5e:	93 30       	cpi	r25, 0x03	; 3
     c60:	28 f4       	brcc	.+10     	; 0xc6c <vfprintf+0x10a>
     c62:	0c 5f       	subi	r16, 0xFC	; 252
     c64:	1f 4f       	sbci	r17, 0xFF	; 255
     c66:	9f e3       	ldi	r25, 0x3F	; 63
     c68:	99 83       	std	Y+1, r25	; 0x01
     c6a:	0d c0       	rjmp	.+26     	; 0xc86 <vfprintf+0x124>
     c6c:	83 36       	cpi	r24, 0x63	; 99
     c6e:	31 f0       	breq	.+12     	; 0xc7c <vfprintf+0x11a>
     c70:	83 37       	cpi	r24, 0x73	; 115
     c72:	71 f0       	breq	.+28     	; 0xc90 <vfprintf+0x12e>
     c74:	83 35       	cpi	r24, 0x53	; 83
     c76:	09 f0       	breq	.+2      	; 0xc7a <vfprintf+0x118>
     c78:	59 c0       	rjmp	.+178    	; 0xd2c <vfprintf+0x1ca>
     c7a:	21 c0       	rjmp	.+66     	; 0xcbe <vfprintf+0x15c>
     c7c:	f8 01       	movw	r30, r16
     c7e:	80 81       	ld	r24, Z
     c80:	89 83       	std	Y+1, r24	; 0x01
     c82:	0e 5f       	subi	r16, 0xFE	; 254
     c84:	1f 4f       	sbci	r17, 0xFF	; 255
     c86:	88 24       	eor	r8, r8
     c88:	83 94       	inc	r8
     c8a:	91 2c       	mov	r9, r1
     c8c:	53 01       	movw	r10, r6
     c8e:	13 c0       	rjmp	.+38     	; 0xcb6 <vfprintf+0x154>
     c90:	28 01       	movw	r4, r16
     c92:	f2 e0       	ldi	r31, 0x02	; 2
     c94:	4f 0e       	add	r4, r31
     c96:	51 1c       	adc	r5, r1
     c98:	f8 01       	movw	r30, r16
     c9a:	a0 80       	ld	r10, Z
     c9c:	b1 80       	ldd	r11, Z+1	; 0x01
     c9e:	36 fe       	sbrs	r3, 6
     ca0:	03 c0       	rjmp	.+6      	; 0xca8 <vfprintf+0x146>
     ca2:	69 2d       	mov	r22, r9
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <vfprintf+0x14a>
     ca8:	6f ef       	ldi	r22, 0xFF	; 255
     caa:	7f ef       	ldi	r23, 0xFF	; 255
     cac:	c5 01       	movw	r24, r10
     cae:	0e 94 9d 07 	call	0xf3a	; 0xf3a <strnlen>
     cb2:	4c 01       	movw	r8, r24
     cb4:	82 01       	movw	r16, r4
     cb6:	f3 2d       	mov	r31, r3
     cb8:	ff 77       	andi	r31, 0x7F	; 127
     cba:	3f 2e       	mov	r3, r31
     cbc:	16 c0       	rjmp	.+44     	; 0xcea <vfprintf+0x188>
     cbe:	28 01       	movw	r4, r16
     cc0:	22 e0       	ldi	r18, 0x02	; 2
     cc2:	42 0e       	add	r4, r18
     cc4:	51 1c       	adc	r5, r1
     cc6:	f8 01       	movw	r30, r16
     cc8:	a0 80       	ld	r10, Z
     cca:	b1 80       	ldd	r11, Z+1	; 0x01
     ccc:	36 fe       	sbrs	r3, 6
     cce:	03 c0       	rjmp	.+6      	; 0xcd6 <vfprintf+0x174>
     cd0:	69 2d       	mov	r22, r9
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0x178>
     cd6:	6f ef       	ldi	r22, 0xFF	; 255
     cd8:	7f ef       	ldi	r23, 0xFF	; 255
     cda:	c5 01       	movw	r24, r10
     cdc:	0e 94 92 07 	call	0xf24	; 0xf24 <strnlen_P>
     ce0:	4c 01       	movw	r8, r24
     ce2:	f3 2d       	mov	r31, r3
     ce4:	f0 68       	ori	r31, 0x80	; 128
     ce6:	3f 2e       	mov	r3, r31
     ce8:	82 01       	movw	r16, r4
     cea:	33 fc       	sbrc	r3, 3
     cec:	1b c0       	rjmp	.+54     	; 0xd24 <vfprintf+0x1c2>
     cee:	82 2d       	mov	r24, r2
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	88 16       	cp	r8, r24
     cf4:	99 06       	cpc	r9, r25
     cf6:	b0 f4       	brcc	.+44     	; 0xd24 <vfprintf+0x1c2>
     cf8:	b6 01       	movw	r22, r12
     cfa:	80 e2       	ldi	r24, 0x20	; 32
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 a8 07 	call	0xf50	; 0xf50 <fputc>
     d02:	2a 94       	dec	r2
     d04:	f4 cf       	rjmp	.-24     	; 0xcee <vfprintf+0x18c>
     d06:	f5 01       	movw	r30, r10
     d08:	37 fc       	sbrc	r3, 7
     d0a:	85 91       	lpm	r24, Z+
     d0c:	37 fe       	sbrs	r3, 7
     d0e:	81 91       	ld	r24, Z+
     d10:	5f 01       	movw	r10, r30
     d12:	b6 01       	movw	r22, r12
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 a8 07 	call	0xf50	; 0xf50 <fputc>
     d1a:	21 10       	cpse	r2, r1
     d1c:	2a 94       	dec	r2
     d1e:	21 e0       	ldi	r18, 0x01	; 1
     d20:	82 1a       	sub	r8, r18
     d22:	91 08       	sbc	r9, r1
     d24:	81 14       	cp	r8, r1
     d26:	91 04       	cpc	r9, r1
     d28:	71 f7       	brne	.-36     	; 0xd06 <vfprintf+0x1a4>
     d2a:	e8 c0       	rjmp	.+464    	; 0xefc <vfprintf+0x39a>
     d2c:	84 36       	cpi	r24, 0x64	; 100
     d2e:	11 f0       	breq	.+4      	; 0xd34 <vfprintf+0x1d2>
     d30:	89 36       	cpi	r24, 0x69	; 105
     d32:	41 f5       	brne	.+80     	; 0xd84 <vfprintf+0x222>
     d34:	f8 01       	movw	r30, r16
     d36:	37 fe       	sbrs	r3, 7
     d38:	07 c0       	rjmp	.+14     	; 0xd48 <vfprintf+0x1e6>
     d3a:	60 81       	ld	r22, Z
     d3c:	71 81       	ldd	r23, Z+1	; 0x01
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	93 81       	ldd	r25, Z+3	; 0x03
     d42:	0c 5f       	subi	r16, 0xFC	; 252
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
     d46:	08 c0       	rjmp	.+16     	; 0xd58 <vfprintf+0x1f6>
     d48:	60 81       	ld	r22, Z
     d4a:	71 81       	ldd	r23, Z+1	; 0x01
     d4c:	07 2e       	mov	r0, r23
     d4e:	00 0c       	add	r0, r0
     d50:	88 0b       	sbc	r24, r24
     d52:	99 0b       	sbc	r25, r25
     d54:	0e 5f       	subi	r16, 0xFE	; 254
     d56:	1f 4f       	sbci	r17, 0xFF	; 255
     d58:	f3 2d       	mov	r31, r3
     d5a:	ff 76       	andi	r31, 0x6F	; 111
     d5c:	3f 2e       	mov	r3, r31
     d5e:	97 ff       	sbrs	r25, 7
     d60:	09 c0       	rjmp	.+18     	; 0xd74 <vfprintf+0x212>
     d62:	90 95       	com	r25
     d64:	80 95       	com	r24
     d66:	70 95       	com	r23
     d68:	61 95       	neg	r22
     d6a:	7f 4f       	sbci	r23, 0xFF	; 255
     d6c:	8f 4f       	sbci	r24, 0xFF	; 255
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	f0 68       	ori	r31, 0x80	; 128
     d72:	3f 2e       	mov	r3, r31
     d74:	2a e0       	ldi	r18, 0x0A	; 10
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	a3 01       	movw	r20, r6
     d7a:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__ultoa_invert>
     d7e:	88 2e       	mov	r8, r24
     d80:	86 18       	sub	r8, r6
     d82:	45 c0       	rjmp	.+138    	; 0xe0e <vfprintf+0x2ac>
     d84:	85 37       	cpi	r24, 0x75	; 117
     d86:	31 f4       	brne	.+12     	; 0xd94 <vfprintf+0x232>
     d88:	23 2d       	mov	r18, r3
     d8a:	2f 7e       	andi	r18, 0xEF	; 239
     d8c:	b2 2e       	mov	r11, r18
     d8e:	2a e0       	ldi	r18, 0x0A	; 10
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	25 c0       	rjmp	.+74     	; 0xdde <vfprintf+0x27c>
     d94:	93 2d       	mov	r25, r3
     d96:	99 7f       	andi	r25, 0xF9	; 249
     d98:	b9 2e       	mov	r11, r25
     d9a:	8f 36       	cpi	r24, 0x6F	; 111
     d9c:	c1 f0       	breq	.+48     	; 0xdce <vfprintf+0x26c>
     d9e:	18 f4       	brcc	.+6      	; 0xda6 <vfprintf+0x244>
     da0:	88 35       	cpi	r24, 0x58	; 88
     da2:	79 f0       	breq	.+30     	; 0xdc2 <vfprintf+0x260>
     da4:	b5 c0       	rjmp	.+362    	; 0xf10 <vfprintf+0x3ae>
     da6:	80 37       	cpi	r24, 0x70	; 112
     da8:	19 f0       	breq	.+6      	; 0xdb0 <vfprintf+0x24e>
     daa:	88 37       	cpi	r24, 0x78	; 120
     dac:	21 f0       	breq	.+8      	; 0xdb6 <vfprintf+0x254>
     dae:	b0 c0       	rjmp	.+352    	; 0xf10 <vfprintf+0x3ae>
     db0:	e9 2f       	mov	r30, r25
     db2:	e0 61       	ori	r30, 0x10	; 16
     db4:	be 2e       	mov	r11, r30
     db6:	b4 fe       	sbrs	r11, 4
     db8:	0d c0       	rjmp	.+26     	; 0xdd4 <vfprintf+0x272>
     dba:	fb 2d       	mov	r31, r11
     dbc:	f4 60       	ori	r31, 0x04	; 4
     dbe:	bf 2e       	mov	r11, r31
     dc0:	09 c0       	rjmp	.+18     	; 0xdd4 <vfprintf+0x272>
     dc2:	34 fe       	sbrs	r3, 4
     dc4:	0a c0       	rjmp	.+20     	; 0xdda <vfprintf+0x278>
     dc6:	29 2f       	mov	r18, r25
     dc8:	26 60       	ori	r18, 0x06	; 6
     dca:	b2 2e       	mov	r11, r18
     dcc:	06 c0       	rjmp	.+12     	; 0xdda <vfprintf+0x278>
     dce:	28 e0       	ldi	r18, 0x08	; 8
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <vfprintf+0x27c>
     dd4:	20 e1       	ldi	r18, 0x10	; 16
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <vfprintf+0x27c>
     dda:	20 e1       	ldi	r18, 0x10	; 16
     ddc:	32 e0       	ldi	r19, 0x02	; 2
     dde:	f8 01       	movw	r30, r16
     de0:	b7 fe       	sbrs	r11, 7
     de2:	07 c0       	rjmp	.+14     	; 0xdf2 <vfprintf+0x290>
     de4:	60 81       	ld	r22, Z
     de6:	71 81       	ldd	r23, Z+1	; 0x01
     de8:	82 81       	ldd	r24, Z+2	; 0x02
     dea:	93 81       	ldd	r25, Z+3	; 0x03
     dec:	0c 5f       	subi	r16, 0xFC	; 252
     dee:	1f 4f       	sbci	r17, 0xFF	; 255
     df0:	06 c0       	rjmp	.+12     	; 0xdfe <vfprintf+0x29c>
     df2:	60 81       	ld	r22, Z
     df4:	71 81       	ldd	r23, Z+1	; 0x01
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 5f       	subi	r16, 0xFE	; 254
     dfc:	1f 4f       	sbci	r17, 0xFF	; 255
     dfe:	a3 01       	movw	r20, r6
     e00:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__ultoa_invert>
     e04:	88 2e       	mov	r8, r24
     e06:	86 18       	sub	r8, r6
     e08:	fb 2d       	mov	r31, r11
     e0a:	ff 77       	andi	r31, 0x7F	; 127
     e0c:	3f 2e       	mov	r3, r31
     e0e:	36 fe       	sbrs	r3, 6
     e10:	0d c0       	rjmp	.+26     	; 0xe2c <vfprintf+0x2ca>
     e12:	23 2d       	mov	r18, r3
     e14:	2e 7f       	andi	r18, 0xFE	; 254
     e16:	a2 2e       	mov	r10, r18
     e18:	89 14       	cp	r8, r9
     e1a:	58 f4       	brcc	.+22     	; 0xe32 <vfprintf+0x2d0>
     e1c:	34 fe       	sbrs	r3, 4
     e1e:	0b c0       	rjmp	.+22     	; 0xe36 <vfprintf+0x2d4>
     e20:	32 fc       	sbrc	r3, 2
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <vfprintf+0x2d4>
     e24:	83 2d       	mov	r24, r3
     e26:	8e 7e       	andi	r24, 0xEE	; 238
     e28:	a8 2e       	mov	r10, r24
     e2a:	05 c0       	rjmp	.+10     	; 0xe36 <vfprintf+0x2d4>
     e2c:	b8 2c       	mov	r11, r8
     e2e:	a3 2c       	mov	r10, r3
     e30:	03 c0       	rjmp	.+6      	; 0xe38 <vfprintf+0x2d6>
     e32:	b8 2c       	mov	r11, r8
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <vfprintf+0x2d6>
     e36:	b9 2c       	mov	r11, r9
     e38:	a4 fe       	sbrs	r10, 4
     e3a:	0f c0       	rjmp	.+30     	; 0xe5a <vfprintf+0x2f8>
     e3c:	fe 01       	movw	r30, r28
     e3e:	e8 0d       	add	r30, r8
     e40:	f1 1d       	adc	r31, r1
     e42:	80 81       	ld	r24, Z
     e44:	80 33       	cpi	r24, 0x30	; 48
     e46:	21 f4       	brne	.+8      	; 0xe50 <vfprintf+0x2ee>
     e48:	9a 2d       	mov	r25, r10
     e4a:	99 7e       	andi	r25, 0xE9	; 233
     e4c:	a9 2e       	mov	r10, r25
     e4e:	09 c0       	rjmp	.+18     	; 0xe62 <vfprintf+0x300>
     e50:	a2 fe       	sbrs	r10, 2
     e52:	06 c0       	rjmp	.+12     	; 0xe60 <vfprintf+0x2fe>
     e54:	b3 94       	inc	r11
     e56:	b3 94       	inc	r11
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <vfprintf+0x300>
     e5a:	8a 2d       	mov	r24, r10
     e5c:	86 78       	andi	r24, 0x86	; 134
     e5e:	09 f0       	breq	.+2      	; 0xe62 <vfprintf+0x300>
     e60:	b3 94       	inc	r11
     e62:	a3 fc       	sbrc	r10, 3
     e64:	11 c0       	rjmp	.+34     	; 0xe88 <vfprintf+0x326>
     e66:	a0 fe       	sbrs	r10, 0
     e68:	06 c0       	rjmp	.+12     	; 0xe76 <vfprintf+0x314>
     e6a:	b2 14       	cp	r11, r2
     e6c:	88 f4       	brcc	.+34     	; 0xe90 <vfprintf+0x32e>
     e6e:	28 0c       	add	r2, r8
     e70:	92 2c       	mov	r9, r2
     e72:	9b 18       	sub	r9, r11
     e74:	0e c0       	rjmp	.+28     	; 0xe92 <vfprintf+0x330>
     e76:	b2 14       	cp	r11, r2
     e78:	60 f4       	brcc	.+24     	; 0xe92 <vfprintf+0x330>
     e7a:	b6 01       	movw	r22, r12
     e7c:	80 e2       	ldi	r24, 0x20	; 32
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 a8 07 	call	0xf50	; 0xf50 <fputc>
     e84:	b3 94       	inc	r11
     e86:	f7 cf       	rjmp	.-18     	; 0xe76 <vfprintf+0x314>
     e88:	b2 14       	cp	r11, r2
     e8a:	18 f4       	brcc	.+6      	; 0xe92 <vfprintf+0x330>
     e8c:	2b 18       	sub	r2, r11
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <vfprintf+0x332>
     e90:	98 2c       	mov	r9, r8
     e92:	21 2c       	mov	r2, r1
     e94:	a4 fe       	sbrs	r10, 4
     e96:	10 c0       	rjmp	.+32     	; 0xeb8 <vfprintf+0x356>
     e98:	b6 01       	movw	r22, r12
     e9a:	80 e3       	ldi	r24, 0x30	; 48
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 a8 07 	call	0xf50	; 0xf50 <fputc>
     ea2:	a2 fe       	sbrs	r10, 2
     ea4:	17 c0       	rjmp	.+46     	; 0xed4 <vfprintf+0x372>
     ea6:	a1 fc       	sbrc	r10, 1
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <vfprintf+0x34e>
     eaa:	88 e7       	ldi	r24, 0x78	; 120
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <vfprintf+0x352>
     eb0:	88 e5       	ldi	r24, 0x58	; 88
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	b6 01       	movw	r22, r12
     eb6:	0c c0       	rjmp	.+24     	; 0xed0 <vfprintf+0x36e>
     eb8:	8a 2d       	mov	r24, r10
     eba:	86 78       	andi	r24, 0x86	; 134
     ebc:	59 f0       	breq	.+22     	; 0xed4 <vfprintf+0x372>
     ebe:	a1 fe       	sbrs	r10, 1
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <vfprintf+0x364>
     ec2:	8b e2       	ldi	r24, 0x2B	; 43
     ec4:	01 c0       	rjmp	.+2      	; 0xec8 <vfprintf+0x366>
     ec6:	80 e2       	ldi	r24, 0x20	; 32
     ec8:	a7 fc       	sbrc	r10, 7
     eca:	8d e2       	ldi	r24, 0x2D	; 45
     ecc:	b6 01       	movw	r22, r12
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 a8 07 	call	0xf50	; 0xf50 <fputc>
     ed4:	89 14       	cp	r8, r9
     ed6:	38 f4       	brcc	.+14     	; 0xee6 <vfprintf+0x384>
     ed8:	b6 01       	movw	r22, r12
     eda:	80 e3       	ldi	r24, 0x30	; 48
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 a8 07 	call	0xf50	; 0xf50 <fputc>
     ee2:	9a 94       	dec	r9
     ee4:	f7 cf       	rjmp	.-18     	; 0xed4 <vfprintf+0x372>
     ee6:	8a 94       	dec	r8
     ee8:	f3 01       	movw	r30, r6
     eea:	e8 0d       	add	r30, r8
     eec:	f1 1d       	adc	r31, r1
     eee:	80 81       	ld	r24, Z
     ef0:	b6 01       	movw	r22, r12
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 a8 07 	call	0xf50	; 0xf50 <fputc>
     ef8:	81 10       	cpse	r8, r1
     efa:	f5 cf       	rjmp	.-22     	; 0xee6 <vfprintf+0x384>
     efc:	22 20       	and	r2, r2
     efe:	09 f4       	brne	.+2      	; 0xf02 <vfprintf+0x3a0>
     f00:	42 ce       	rjmp	.-892    	; 0xb86 <vfprintf+0x24>
     f02:	b6 01       	movw	r22, r12
     f04:	80 e2       	ldi	r24, 0x20	; 32
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 a8 07 	call	0xf50	; 0xf50 <fputc>
     f0c:	2a 94       	dec	r2
     f0e:	f6 cf       	rjmp	.-20     	; 0xefc <vfprintf+0x39a>
     f10:	f6 01       	movw	r30, r12
     f12:	86 81       	ldd	r24, Z+6	; 0x06
     f14:	97 81       	ldd	r25, Z+7	; 0x07
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <vfprintf+0x3ba>
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	9f ef       	ldi	r25, 0xFF	; 255
     f1c:	2b 96       	adiw	r28, 0x0b	; 11
     f1e:	e2 e1       	ldi	r30, 0x12	; 18
     f20:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__epilogue_restores__>

00000f24 <strnlen_P>:
     f24:	fc 01       	movw	r30, r24
     f26:	05 90       	lpm	r0, Z+
     f28:	61 50       	subi	r22, 0x01	; 1
     f2a:	70 40       	sbci	r23, 0x00	; 0
     f2c:	01 10       	cpse	r0, r1
     f2e:	d8 f7       	brcc	.-10     	; 0xf26 <strnlen_P+0x2>
     f30:	80 95       	com	r24
     f32:	90 95       	com	r25
     f34:	8e 0f       	add	r24, r30
     f36:	9f 1f       	adc	r25, r31
     f38:	08 95       	ret

00000f3a <strnlen>:
     f3a:	fc 01       	movw	r30, r24
     f3c:	61 50       	subi	r22, 0x01	; 1
     f3e:	70 40       	sbci	r23, 0x00	; 0
     f40:	01 90       	ld	r0, Z+
     f42:	01 10       	cpse	r0, r1
     f44:	d8 f7       	brcc	.-10     	; 0xf3c <strnlen+0x2>
     f46:	80 95       	com	r24
     f48:	90 95       	com	r25
     f4a:	8e 0f       	add	r24, r30
     f4c:	9f 1f       	adc	r25, r31
     f4e:	08 95       	ret

00000f50 <fputc>:
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	fb 01       	movw	r30, r22
     f5a:	23 81       	ldd	r18, Z+3	; 0x03
     f5c:	21 fd       	sbrc	r18, 1
     f5e:	03 c0       	rjmp	.+6      	; 0xf66 <fputc+0x16>
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	9f ef       	ldi	r25, 0xFF	; 255
     f64:	2c c0       	rjmp	.+88     	; 0xfbe <fputc+0x6e>
     f66:	22 ff       	sbrs	r18, 2
     f68:	16 c0       	rjmp	.+44     	; 0xf96 <fputc+0x46>
     f6a:	46 81       	ldd	r20, Z+6	; 0x06
     f6c:	57 81       	ldd	r21, Z+7	; 0x07
     f6e:	24 81       	ldd	r18, Z+4	; 0x04
     f70:	35 81       	ldd	r19, Z+5	; 0x05
     f72:	42 17       	cp	r20, r18
     f74:	53 07       	cpc	r21, r19
     f76:	44 f4       	brge	.+16     	; 0xf88 <fputc+0x38>
     f78:	a0 81       	ld	r26, Z
     f7a:	b1 81       	ldd	r27, Z+1	; 0x01
     f7c:	9d 01       	movw	r18, r26
     f7e:	2f 5f       	subi	r18, 0xFF	; 255
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	31 83       	std	Z+1, r19	; 0x01
     f84:	20 83       	st	Z, r18
     f86:	8c 93       	st	X, r24
     f88:	26 81       	ldd	r18, Z+6	; 0x06
     f8a:	37 81       	ldd	r19, Z+7	; 0x07
     f8c:	2f 5f       	subi	r18, 0xFF	; 255
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	37 83       	std	Z+7, r19	; 0x07
     f92:	26 83       	std	Z+6, r18	; 0x06
     f94:	14 c0       	rjmp	.+40     	; 0xfbe <fputc+0x6e>
     f96:	8b 01       	movw	r16, r22
     f98:	ec 01       	movw	r28, r24
     f9a:	fb 01       	movw	r30, r22
     f9c:	00 84       	ldd	r0, Z+8	; 0x08
     f9e:	f1 85       	ldd	r31, Z+9	; 0x09
     fa0:	e0 2d       	mov	r30, r0
     fa2:	09 95       	icall
     fa4:	89 2b       	or	r24, r25
     fa6:	e1 f6       	brne	.-72     	; 0xf60 <fputc+0x10>
     fa8:	d8 01       	movw	r26, r16
     faa:	16 96       	adiw	r26, 0x06	; 6
     fac:	8d 91       	ld	r24, X+
     fae:	9c 91       	ld	r25, X
     fb0:	17 97       	sbiw	r26, 0x07	; 7
     fb2:	01 96       	adiw	r24, 0x01	; 1
     fb4:	17 96       	adiw	r26, 0x07	; 7
     fb6:	9c 93       	st	X, r25
     fb8:	8e 93       	st	-X, r24
     fba:	16 97       	sbiw	r26, 0x06	; 6
     fbc:	ce 01       	movw	r24, r28
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	08 95       	ret

00000fc8 <__ultoa_invert>:
     fc8:	fa 01       	movw	r30, r20
     fca:	aa 27       	eor	r26, r26
     fcc:	28 30       	cpi	r18, 0x08	; 8
     fce:	51 f1       	breq	.+84     	; 0x1024 <__ultoa_invert+0x5c>
     fd0:	20 31       	cpi	r18, 0x10	; 16
     fd2:	81 f1       	breq	.+96     	; 0x1034 <__ultoa_invert+0x6c>
     fd4:	e8 94       	clt
     fd6:	6f 93       	push	r22
     fd8:	6e 7f       	andi	r22, 0xFE	; 254
     fda:	6e 5f       	subi	r22, 0xFE	; 254
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	8f 4f       	sbci	r24, 0xFF	; 255
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	af 4f       	sbci	r26, 0xFF	; 255
     fe4:	b1 e0       	ldi	r27, 0x01	; 1
     fe6:	3e d0       	rcall	.+124    	; 0x1064 <__ultoa_invert+0x9c>
     fe8:	b4 e0       	ldi	r27, 0x04	; 4
     fea:	3c d0       	rcall	.+120    	; 0x1064 <__ultoa_invert+0x9c>
     fec:	67 0f       	add	r22, r23
     fee:	78 1f       	adc	r23, r24
     ff0:	89 1f       	adc	r24, r25
     ff2:	9a 1f       	adc	r25, r26
     ff4:	a1 1d       	adc	r26, r1
     ff6:	68 0f       	add	r22, r24
     ff8:	79 1f       	adc	r23, r25
     ffa:	8a 1f       	adc	r24, r26
     ffc:	91 1d       	adc	r25, r1
     ffe:	a1 1d       	adc	r26, r1
    1000:	6a 0f       	add	r22, r26
    1002:	71 1d       	adc	r23, r1
    1004:	81 1d       	adc	r24, r1
    1006:	91 1d       	adc	r25, r1
    1008:	a1 1d       	adc	r26, r1
    100a:	20 d0       	rcall	.+64     	; 0x104c <__ultoa_invert+0x84>
    100c:	09 f4       	brne	.+2      	; 0x1010 <__ultoa_invert+0x48>
    100e:	68 94       	set
    1010:	3f 91       	pop	r19
    1012:	2a e0       	ldi	r18, 0x0A	; 10
    1014:	26 9f       	mul	r18, r22
    1016:	11 24       	eor	r1, r1
    1018:	30 19       	sub	r19, r0
    101a:	30 5d       	subi	r19, 0xD0	; 208
    101c:	31 93       	st	Z+, r19
    101e:	de f6       	brtc	.-74     	; 0xfd6 <__ultoa_invert+0xe>
    1020:	cf 01       	movw	r24, r30
    1022:	08 95       	ret
    1024:	46 2f       	mov	r20, r22
    1026:	47 70       	andi	r20, 0x07	; 7
    1028:	40 5d       	subi	r20, 0xD0	; 208
    102a:	41 93       	st	Z+, r20
    102c:	b3 e0       	ldi	r27, 0x03	; 3
    102e:	0f d0       	rcall	.+30     	; 0x104e <__ultoa_invert+0x86>
    1030:	c9 f7       	brne	.-14     	; 0x1024 <__ultoa_invert+0x5c>
    1032:	f6 cf       	rjmp	.-20     	; 0x1020 <__ultoa_invert+0x58>
    1034:	46 2f       	mov	r20, r22
    1036:	4f 70       	andi	r20, 0x0F	; 15
    1038:	40 5d       	subi	r20, 0xD0	; 208
    103a:	4a 33       	cpi	r20, 0x3A	; 58
    103c:	18 f0       	brcs	.+6      	; 0x1044 <__ultoa_invert+0x7c>
    103e:	49 5d       	subi	r20, 0xD9	; 217
    1040:	31 fd       	sbrc	r19, 1
    1042:	40 52       	subi	r20, 0x20	; 32
    1044:	41 93       	st	Z+, r20
    1046:	02 d0       	rcall	.+4      	; 0x104c <__ultoa_invert+0x84>
    1048:	a9 f7       	brne	.-22     	; 0x1034 <__ultoa_invert+0x6c>
    104a:	ea cf       	rjmp	.-44     	; 0x1020 <__ultoa_invert+0x58>
    104c:	b4 e0       	ldi	r27, 0x04	; 4
    104e:	a6 95       	lsr	r26
    1050:	97 95       	ror	r25
    1052:	87 95       	ror	r24
    1054:	77 95       	ror	r23
    1056:	67 95       	ror	r22
    1058:	ba 95       	dec	r27
    105a:	c9 f7       	brne	.-14     	; 0x104e <__ultoa_invert+0x86>
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	61 05       	cpc	r22, r1
    1060:	71 05       	cpc	r23, r1
    1062:	08 95       	ret
    1064:	9b 01       	movw	r18, r22
    1066:	ac 01       	movw	r20, r24
    1068:	0a 2e       	mov	r0, r26
    106a:	06 94       	lsr	r0
    106c:	57 95       	ror	r21
    106e:	47 95       	ror	r20
    1070:	37 95       	ror	r19
    1072:	27 95       	ror	r18
    1074:	ba 95       	dec	r27
    1076:	c9 f7       	brne	.-14     	; 0x106a <__ultoa_invert+0xa2>
    1078:	62 0f       	add	r22, r18
    107a:	73 1f       	adc	r23, r19
    107c:	84 1f       	adc	r24, r20
    107e:	95 1f       	adc	r25, r21
    1080:	a0 1d       	adc	r26, r0
    1082:	08 95       	ret

00001084 <__prologue_saves__>:
    1084:	2f 92       	push	r2
    1086:	3f 92       	push	r3
    1088:	4f 92       	push	r4
    108a:	5f 92       	push	r5
    108c:	6f 92       	push	r6
    108e:	7f 92       	push	r7
    1090:	8f 92       	push	r8
    1092:	9f 92       	push	r9
    1094:	af 92       	push	r10
    1096:	bf 92       	push	r11
    1098:	cf 92       	push	r12
    109a:	df 92       	push	r13
    109c:	ef 92       	push	r14
    109e:	ff 92       	push	r15
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	ca 1b       	sub	r28, r26
    10ae:	db 0b       	sbc	r29, r27
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	09 94       	ijmp

000010bc <__epilogue_restores__>:
    10bc:	2a 88       	ldd	r2, Y+18	; 0x12
    10be:	39 88       	ldd	r3, Y+17	; 0x11
    10c0:	48 88       	ldd	r4, Y+16	; 0x10
    10c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    10c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    10c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    10c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    10ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    10cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    10ce:	b9 84       	ldd	r11, Y+9	; 0x09
    10d0:	c8 84       	ldd	r12, Y+8	; 0x08
    10d2:	df 80       	ldd	r13, Y+7	; 0x07
    10d4:	ee 80       	ldd	r14, Y+6	; 0x06
    10d6:	fd 80       	ldd	r15, Y+5	; 0x05
    10d8:	0c 81       	ldd	r16, Y+4	; 0x04
    10da:	1b 81       	ldd	r17, Y+3	; 0x03
    10dc:	aa 81       	ldd	r26, Y+2	; 0x02
    10de:	b9 81       	ldd	r27, Y+1	; 0x01
    10e0:	ce 0f       	add	r28, r30
    10e2:	d1 1d       	adc	r29, r1
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	ed 01       	movw	r28, r26
    10f0:	08 95       	ret

000010f2 <_exit>:
    10f2:	f8 94       	cli

000010f4 <__stop_program>:
    10f4:	ff cf       	rjmp	.-2      	; 0x10f4 <__stop_program>
