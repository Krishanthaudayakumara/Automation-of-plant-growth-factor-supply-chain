
lm35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000035e  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000104a  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ae0  00000000  00000000  0000155a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a9  00000000  00000000  0000203a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  000026e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000529  00000000  00000000  00002878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000605  00000000  00000000  00002da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  000033a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  7c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  80:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  84:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  88:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e5       	ldi	r30, 0x5E	; 94
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a8 31       	cpi	r26, 0x18	; 24
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>
  ae:	0e 94 28 01 	call	0x250	; 0x250 <main>
  b2:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  ba:	96 9a       	sbi	0x12, 6	; 18
  bc:	00 c0       	rjmp	.+0      	; 0xbe <toggle_e+0x4>
  be:	96 98       	cbi	0x12, 6	; 18
  c0:	08 95       	ret

000000c2 <lcd_write>:
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	d8 2f       	mov	r29, r24
  c8:	66 23       	and	r22, r22
  ca:	11 f0       	breq	.+4      	; 0xd0 <lcd_write+0xe>
  cc:	94 9a       	sbi	0x12, 4	; 18
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <lcd_write+0x10>
  d0:	94 98       	cbi	0x12, 4	; 18
  d2:	95 98       	cbi	0x12, 5	; 18
  d4:	81 b3       	in	r24, 0x11	; 17
  d6:	8f 60       	ori	r24, 0x0F	; 15
  d8:	81 bb       	out	0x11, r24	; 17
  da:	c2 b3       	in	r28, 0x12	; 18
  dc:	c0 7f       	andi	r28, 0xF0	; 240
  de:	8d 2f       	mov	r24, r29
  e0:	82 95       	swap	r24
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	8c 2b       	or	r24, r28
  e6:	82 bb       	out	0x12, r24	; 18
  e8:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
  ec:	df 70       	andi	r29, 0x0F	; 15
  ee:	dc 2b       	or	r29, r28
  f0:	d2 bb       	out	0x12, r29	; 18
  f2:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
  f6:	cf 60       	ori	r28, 0x0F	; 15
  f8:	c2 bb       	out	0x12, r28	; 18
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <lcd_read>:
 100:	88 23       	and	r24, r24
 102:	11 f0       	breq	.+4      	; 0x108 <lcd_read+0x8>
 104:	94 9a       	sbi	0x12, 4	; 18
 106:	01 c0       	rjmp	.+2      	; 0x10a <lcd_read+0xa>
 108:	94 98       	cbi	0x12, 4	; 18
 10a:	95 9a       	sbi	0x12, 5	; 18
 10c:	81 b3       	in	r24, 0x11	; 17
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	81 bb       	out	0x11, r24	; 17
 112:	96 9a       	sbi	0x12, 6	; 18
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_read+0x16>
 116:	90 b3       	in	r25, 0x10	; 16
 118:	96 98       	cbi	0x12, 6	; 18
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_read+0x1c>
 11c:	96 9a       	sbi	0x12, 6	; 18
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_read+0x20>
 120:	20 b3       	in	r18, 0x10	; 16
 122:	2f 70       	andi	r18, 0x0F	; 15
 124:	89 2f       	mov	r24, r25
 126:	82 95       	swap	r24
 128:	80 7f       	andi	r24, 0xF0	; 240
 12a:	96 98       	cbi	0x12, 6	; 18
 12c:	82 2b       	or	r24, r18
 12e:	08 95       	ret

00000130 <lcd_waitbusy>:
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 80 00 	call	0x100	; 0x100 <lcd_read>
 136:	88 23       	and	r24, r24
 138:	dc f3       	brlt	.-10     	; 0x130 <lcd_waitbusy>
 13a:	88 e0       	ldi	r24, 0x08	; 8
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_waitbusy+0xe>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 80 00 	call	0x100	; 0x100 <lcd_read>
 148:	08 95       	ret

0000014a <lcd_command>:
 14a:	cf 93       	push	r28
 14c:	c8 2f       	mov	r28, r24
 14e:	0e 94 98 00 	call	0x130	; 0x130 <lcd_waitbusy>
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	8c 2f       	mov	r24, r28
 156:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_write>
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <lcd_gotoxy>:
 15e:	61 11       	cpse	r22, r1
 160:	04 c0       	rjmp	.+8      	; 0x16a <lcd_gotoxy+0xc>
 162:	80 58       	subi	r24, 0x80	; 128
 164:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 168:	08 95       	ret
 16a:	80 54       	subi	r24, 0x40	; 64
 16c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 170:	08 95       	ret

00000172 <lcd_clrscr>:
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 178:	08 95       	ret

0000017a <lcd_putc>:
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
 17e:	0e 94 98 00 	call	0x130	; 0x130 <lcd_waitbusy>
 182:	ca 30       	cpi	r28, 0x0A	; 10
 184:	49 f4       	brne	.+18     	; 0x198 <lcd_putc+0x1e>
 186:	80 34       	cpi	r24, 0x40	; 64
 188:	10 f0       	brcs	.+4      	; 0x18e <lcd_putc+0x14>
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	01 c0       	rjmp	.+2      	; 0x190 <lcd_putc+0x16>
 18e:	80 e4       	ldi	r24, 0x40	; 64
 190:	80 58       	subi	r24, 0x80	; 128
 192:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <lcd_putc+0x26>
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	8c 2f       	mov	r24, r28
 19c:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_write>
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <lcd_puts>:
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ec 01       	movw	r28, r24
 1aa:	21 96       	adiw	r28, 0x01	; 1
 1ac:	fc 01       	movw	r30, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	88 23       	and	r24, r24
 1b2:	29 f0       	breq	.+10     	; 0x1be <lcd_puts+0x1a>
 1b4:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_putc>
 1b8:	89 91       	ld	r24, Y+
 1ba:	81 11       	cpse	r24, r1
 1bc:	fb cf       	rjmp	.-10     	; 0x1b4 <lcd_puts+0x10>
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1cc:	81 b3       	in	r24, 0x11	; 17
 1ce:	8f 67       	ori	r24, 0x7F	; 127
 1d0:	81 bb       	out	0x11, r24	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	9a ef       	ldi	r25, 0xFA	; 250
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1da:	91 9a       	sbi	0x12, 1	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1dc:	90 9a       	sbi	0x12, 0	; 18
    lcd_e_toggle();
 1de:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	9e e4       	ldi	r25, 0x4E	; 78
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1ea:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ee:	c0 e0       	ldi	r28, 0x00	; 0
 1f0:	d1 e0       	ldi	r29, 0x01	; 1
 1f2:	ce 01       	movw	r24, r28
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcd_init+0x30>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1f8:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1fc:	ce 01       	movw	r24, r28
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x3a>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 202:	90 98       	cbi	0x12, 0	; 18
    lcd_e_toggle();
 204:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 208:	21 97       	sbiw	r28, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_init+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 20c:	88 e2       	ldi	r24, 0x28	; 40
 20e:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 212:	88 e0       	ldi	r24, 0x08	; 8
 214:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 218:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 222:	81 2f       	mov	r24, r17
 224:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>

}/* lcd_init */
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	08 95       	ret

00000230 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
 230:	80 e4       	ldi	r24, 0x40	; 64
 232:	87 b9       	out	0x07, r24	; 7
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 234:	87 e8       	ldi	r24, 0x87	; 135
 236:	86 b9       	out	0x06, r24	; 6
 238:	08 95       	ret

0000023a <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
 23a:	97 b1       	in	r25, 0x07	; 7
 23c:	98 7f       	andi	r25, 0xF8	; 248
 23e:	87 70       	andi	r24, 0x07	; 7
 240:	89 2b       	or	r24, r25
 242:	87 b9       	out	0x07, r24	; 7
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
 244:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
 246:	36 99       	sbic	0x06, 6	; 6
 248:	fe cf       	rjmp	.-4      	; 0x246 <adc_read+0xc>
	
	return (ADC);
 24a:	84 b1       	in	r24, 0x04	; 4
 24c:	95 b1       	in	r25, 0x05	; 5
}
 24e:	08 95       	ret

00000250 <main>:

int main()
{
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
 258:	2a 97       	sbiw	r28, 0x0a	; 10
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	f8 94       	cli
 25e:	de bf       	out	0x3e, r29	; 62
 260:	0f be       	out	0x3f, r0	; 63
 262:	cd bf       	out	0x3d, r28	; 61
	uint16_t adc_result0;
	//int i;
	//int ldr;
	char buffer[10];
	DDRC = 0x01;           // to connect led to PC0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	84 bb       	out	0x14, r24	; 20
	
	// initialize adc and lcd
	adc_init();
 268:	0e 94 18 01 	call	0x230	; 0x230 <adc_init>
	lcd_init(LCD_DISP_ON_CURSOR); //CURSOR
 26c:	8e e0       	ldi	r24, 0x0E	; 14
 26e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	81 ee       	ldi	r24, 0xE1	; 225
 274:	94 e0       	ldi	r25, 0x04	; 4
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <main+0x26>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0x2c>
 27c:	00 00       	nop
	
	_delay_ms(5);
	
	while(1)
	{
		adc_result0 = adc_read(0);      // read adc value at PA0
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 1d 01 	call	0x23a	; 0x23a <adc_read>
 284:	8c 01       	movw	r16, r24
		//i=(adc_result0*0.01/2.1);
		//ldr = (i*10/(5-i));
		
		
		lcd_gotoxy(0,0);
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_gotoxy>
		lcd_puts("CIRCUIT DIGEST");
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_puts>
		
		lcd_gotoxy(0,1);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_gotoxy>
		lcd_puts("LDE res=");
 29e:	8f e0       	ldi	r24, 0x0F	; 15
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_puts>
		itoa(adc_result0,buffer,10);   //display ADC value
 2a6:	4a e0       	ldi	r20, 0x0A	; 10
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	be 01       	movw	r22, r28
 2ac:	6f 5f       	subi	r22, 0xFF	; 255
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	c8 01       	movw	r24, r16
 2b2:	0e 94 6d 01 	call	0x2da	; 0x2da <itoa>
		lcd_puts(buffer);
 2b6:	ce 01       	movw	r24, r28
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_puts>
 2be:	83 ec       	ldi	r24, 0xC3	; 195
 2c0:	99 e0       	ldi	r25, 0x09	; 9
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x72>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x78>
 2c8:	00 00       	nop
		
		_delay_ms(10);

		
		// condition for led to glow
		if (adc_result0 < LTHRES){
 2ca:	04 3f       	cpi	r16, 0xF4	; 244
 2cc:	11 40       	sbci	r17, 0x01	; 1
 2ce:	10 f4       	brcc	.+4      	; 0x2d4 <main+0x84>
		PORTC = 0x00;
 2d0:	15 ba       	out	0x15, r1	; 21
 2d2:	d5 cf       	rjmp	.-86     	; 0x27e <main+0x2e>
		}
		else{
		PORTC = 0x01;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	85 bb       	out	0x15, r24	; 21
 2d8:	d2 cf       	rjmp	.-92     	; 0x27e <main+0x2e>

000002da <itoa>:
 2da:	45 32       	cpi	r20, 0x25	; 37
 2dc:	51 05       	cpc	r21, r1
 2de:	20 f4       	brcc	.+8      	; 0x2e8 <itoa+0xe>
 2e0:	42 30       	cpi	r20, 0x02	; 2
 2e2:	10 f0       	brcs	.+4      	; 0x2e8 <itoa+0xe>
 2e4:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__itoa_ncheck>
 2e8:	fb 01       	movw	r30, r22
 2ea:	10 82       	st	Z, r1
 2ec:	cb 01       	movw	r24, r22
 2ee:	08 95       	ret

000002f0 <__itoa_ncheck>:
 2f0:	bb 27       	eor	r27, r27
 2f2:	4a 30       	cpi	r20, 0x0A	; 10
 2f4:	31 f4       	brne	.+12     	; 0x302 <__itoa_ncheck+0x12>
 2f6:	99 23       	and	r25, r25
 2f8:	22 f4       	brpl	.+8      	; 0x302 <__itoa_ncheck+0x12>
 2fa:	bd e2       	ldi	r27, 0x2D	; 45
 2fc:	90 95       	com	r25
 2fe:	81 95       	neg	r24
 300:	9f 4f       	sbci	r25, 0xFF	; 255
 302:	0c 94 84 01 	jmp	0x308	; 0x308 <__utoa_common>

00000306 <__utoa_ncheck>:
 306:	bb 27       	eor	r27, r27

00000308 <__utoa_common>:
 308:	fb 01       	movw	r30, r22
 30a:	55 27       	eor	r21, r21
 30c:	aa 27       	eor	r26, r26
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	aa 1f       	adc	r26, r26
 314:	a4 17       	cp	r26, r20
 316:	10 f0       	brcs	.+4      	; 0x31c <__utoa_common+0x14>
 318:	a4 1b       	sub	r26, r20
 31a:	83 95       	inc	r24
 31c:	50 51       	subi	r21, 0x10	; 16
 31e:	b9 f7       	brne	.-18     	; 0x30e <__utoa_common+0x6>
 320:	a0 5d       	subi	r26, 0xD0	; 208
 322:	aa 33       	cpi	r26, 0x3A	; 58
 324:	08 f0       	brcs	.+2      	; 0x328 <__utoa_common+0x20>
 326:	a9 5d       	subi	r26, 0xD9	; 217
 328:	a1 93       	st	Z+, r26
 32a:	00 97       	sbiw	r24, 0x00	; 0
 32c:	79 f7       	brne	.-34     	; 0x30c <__utoa_common+0x4>
 32e:	b1 11       	cpse	r27, r1
 330:	b1 93       	st	Z+, r27
 332:	11 92       	st	Z+, r1
 334:	cb 01       	movw	r24, r22
 336:	0c 94 9d 01 	jmp	0x33a	; 0x33a <strrev>

0000033a <strrev>:
 33a:	dc 01       	movw	r26, r24
 33c:	fc 01       	movw	r30, r24
 33e:	67 2f       	mov	r22, r23
 340:	71 91       	ld	r23, Z+
 342:	77 23       	and	r23, r23
 344:	e1 f7       	brne	.-8      	; 0x33e <strrev+0x4>
 346:	32 97       	sbiw	r30, 0x02	; 2
 348:	04 c0       	rjmp	.+8      	; 0x352 <strrev+0x18>
 34a:	7c 91       	ld	r23, X
 34c:	6d 93       	st	X+, r22
 34e:	70 83       	st	Z, r23
 350:	62 91       	ld	r22, -Z
 352:	ae 17       	cp	r26, r30
 354:	bf 07       	cpc	r27, r31
 356:	c8 f3       	brcs	.-14     	; 0x34a <strrev+0x10>
 358:	08 95       	ret

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
