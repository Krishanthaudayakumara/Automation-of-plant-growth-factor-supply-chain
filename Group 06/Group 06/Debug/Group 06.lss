
Group 06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800100  00001f60  00001ff4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f8  00800224  00800224  00002118  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002174  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025b2  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3b  00000000  00000000  0000488a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fb9  00000000  00000000  000053c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00006380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070c  00000000  00000000  0000674c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001815  00000000  00000000  00006e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000866d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      48:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_18>
      4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      8c:	07 63       	ori	r16, 0x37	; 55
      8e:	42 36       	cpi	r20, 0x62	; 98
      90:	b7 9b       	sbis	0x16, 7	; 22
      92:	d8 a7       	std	Y+40, r29	; 0x28
      94:	1a 39       	cpi	r17, 0x9A	; 154
      96:	68 56       	subi	r22, 0x68	; 104
      98:	18 ae       	std	Y+56, r1	; 0x38
      9a:	ba ab       	std	Y+50, r27	; 0x32
      9c:	55 8c       	ldd	r5, Z+29	; 0x1d
      9e:	1d 3c       	cpi	r17, 0xCD	; 205
      a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
      a2:	57 63       	ori	r21, 0x37	; 55
      a4:	bd 6d       	ori	r27, 0xDD	; 221
      a6:	ed fd       	.word	0xfded	; ????
      a8:	75 3e       	cpi	r23, 0xE5	; 229
      aa:	f6 17       	cp	r31, r22
      ac:	72 31       	cpi	r23, 0x12	; 18
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <GSM_Response+0xd6>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e1       	ldi	r29, 0x10	; 16
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	12 e0       	ldi	r17, 0x02	; 2
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e0 e6       	ldi	r30, 0x60	; 96
     122:	ff e1       	ldi	r31, 0x1F	; 31
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
     126:	05 90       	lpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	a4 32       	cpi	r26, 0x24	; 36
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
     130:	23 e0       	ldi	r18, 0x03	; 3
     132:	a4 e2       	ldi	r26, 0x24	; 36
     134:	b2 e0       	ldi	r27, 0x02	; 2
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	ac 31       	cpi	r26, 0x1C	; 28
     13c:	b2 07       	cpc	r27, r18
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
     140:	0e 94 c9 07 	call	0xf92	; 0xf92 <main>
     144:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <_exit>

00000148 <__bad_interrupt>:
     148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSR0A & (1 << RXC)));					/* Wait until new data receive */
	return(UDR0);									/* Get and return received data */
}
     14c:	2a b1       	in	r18, 0x0a	; 10
     14e:	28 69       	ori	r18, 0x98	; 152
     150:	2a b9       	out	0x0a, r18	; 10
     152:	e5 e9       	ldi	r30, 0x95	; 149
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	20 81       	ld	r18, Z
     158:	2e 60       	ori	r18, 0x0E	; 14
     15a:	20 83       	st	Z, r18
     15c:	dc 01       	movw	r26, r24
     15e:	cb 01       	movw	r24, r22
     160:	88 0f       	add	r24, r24
     162:	99 1f       	adc	r25, r25
     164:	aa 1f       	adc	r26, r26
     166:	bb 1f       	adc	r27, r27
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	aa 1f       	adc	r26, r26
     16e:	bb 1f       	adc	r27, r27
     170:	9c 01       	movw	r18, r24
     172:	ad 01       	movw	r20, r26
     174:	22 0f       	add	r18, r18
     176:	33 1f       	adc	r19, r19
     178:	44 1f       	adc	r20, r20
     17a:	55 1f       	adc	r21, r21
     17c:	22 0f       	add	r18, r18
     17e:	33 1f       	adc	r19, r19
     180:	44 1f       	adc	r20, r20
     182:	55 1f       	adc	r21, r21
     184:	60 e0       	ldi	r22, 0x00	; 0
     186:	72 e1       	ldi	r23, 0x12	; 18
     188:	8a e7       	ldi	r24, 0x7A	; 122
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 14 0c 	call	0x1828	; 0x1828 <__udivmodsi4>
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	82 0f       	add	r24, r18
     194:	89 b9       	out	0x09, r24	; 9
     196:	da 01       	movw	r26, r20
     198:	c9 01       	movw	r24, r18
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	a1 09       	sbc	r26, r1
     19e:	b1 09       	sbc	r27, r1
     1a0:	89 2f       	mov	r24, r25
     1a2:	9a 2f       	mov	r25, r26
     1a4:	ab 2f       	mov	r26, r27
     1a6:	bb 27       	eor	r27, r27
     1a8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f0090>
     1ac:	08 95       	ret

000001ae <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR0 = data;										/* Write data to be transmitting in UDR */
     1ae:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSR0A & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     1b0:	5d 9b       	sbis	0x0b, 5	; 11
     1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <USART_TxChar+0x2>
}
     1b4:	08 95       	ret

000001b6 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */
{
     1b6:	0f 93       	push	r16
     1b8:	1f 93       	push	r17
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	8c 01       	movw	r16, r24
	int i=0;
     1c0:	c0 e0       	ldi	r28, 0x00	; 0
     1c2:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i]!=0)
     1c4:	03 c0       	rjmp	.+6      	; 0x1cc <USART_SendString+0x16>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     1c6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <USART_TxChar>
		i++;
     1ca:	21 96       	adiw	r28, 0x01	; 1
}

void USART_SendString(char *str)					/* Send string of USART data function */
{
	int i=0;
	while (str[i]!=0)
     1cc:	f8 01       	movw	r30, r16
     1ce:	ec 0f       	add	r30, r28
     1d0:	fd 1f       	adc	r31, r29
     1d2:	80 81       	ld	r24, Z
     1d4:	81 11       	cpse	r24, r1
     1d6:	f7 cf       	rjmp	.-18     	; 0x1c6 <USART_SendString+0x10>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	1f 91       	pop	r17
     1de:	0f 91       	pop	r16
     1e0:	08 95       	ret

000001e2 <lcdcmd>:
}


void lcdcmd(unsigned char x)
{
	lcdport=x;
     1e2:	8b bb       	out	0x1b, r24	; 27

	_signal=(0<<rs)|(0<<rw)|(1<<en);
     1e4:	84 e0       	ldi	r24, 0x04	; 4
     1e6:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e8:	8f ec       	ldi	r24, 0xCF	; 207
     1ea:	97 e0       	ldi	r25, 0x07	; 7
     1ec:	01 97       	sbiw	r24, 0x01	; 1
     1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcdcmd+0xa>
     1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcdcmd+0x10>
     1f2:	00 00       	nop

	_delay_ms(1);

	_signal=(0<<rs)|(0<<rw)|(0<<en);
     1f4:	18 ba       	out	0x18, r1	; 24
     1f6:	9f e7       	ldi	r25, 0x7F	; 127
     1f8:	28 e3       	ldi	r18, 0x38	; 56
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	91 50       	subi	r25, 0x01	; 1
     1fe:	20 40       	sbci	r18, 0x00	; 0
     200:	80 40       	sbci	r24, 0x00	; 0
     202:	e1 f7       	brne	.-8      	; 0x1fc <lcdcmd+0x1a>
     204:	00 c0       	rjmp	.+0      	; 0x206 <lcdcmd+0x24>
     206:	00 00       	nop
     208:	08 95       	ret

0000020a <lcdint>:



void lcdint()
{
	lcdcmd(0x38);
     20a:	88 e3       	ldi	r24, 0x38	; 56
     20c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcdcmd>
     210:	8f ec       	ldi	r24, 0xCF	; 207
     212:	97 e0       	ldi	r25, 0x07	; 7
     214:	01 97       	sbiw	r24, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <lcdint+0xa>
     218:	00 c0       	rjmp	.+0      	; 0x21a <lcdint+0x10>
     21a:	00 00       	nop

	_delay_ms(1);

	lcdcmd(0x01);
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcdcmd>
     222:	8f ec       	ldi	r24, 0xCF	; 207
     224:	97 e0       	ldi	r25, 0x07	; 7
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcdint+0x1c>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <lcdint+0x22>
     22c:	00 00       	nop

	_delay_ms(1);

	lcdcmd(0x0E);
     22e:	8e e0       	ldi	r24, 0x0E	; 14
     230:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcdcmd>
     234:	8f ec       	ldi	r24, 0xCF	; 207
     236:	97 e0       	ldi	r25, 0x07	; 7
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcdint+0x2e>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcdint+0x34>
     23e:	00 00       	nop
     240:	08 95       	ret

00000242 <lcddata>:
	_delay_ms(50);
}

void lcddata(unsigned char data)
{
	lcdport= data;
     242:	8b bb       	out	0x1b, r24	; 27

	_signal= (1<<rs)|(0<<rw)|(1<<en);
     244:	85 e0       	ldi	r24, 0x05	; 5
     246:	88 bb       	out	0x18, r24	; 24
     248:	8f ec       	ldi	r24, 0xCF	; 207
     24a:	97 e0       	ldi	r25, 0x07	; 7
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <lcddata+0xa>
     250:	00 c0       	rjmp	.+0      	; 0x252 <lcddata+0x10>
     252:	00 00       	nop

	_delay_ms(1);

	_signal= (1<<rs)|(0<<rw)|(0<<en);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	88 bb       	out	0x18, r24	; 24
     258:	8f ec       	ldi	r24, 0xCF	; 207
     25a:	97 e0       	ldi	r25, 0x07	; 7
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcddata+0x1a>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcddata+0x20>
     262:	00 00       	nop
     264:	08 95       	ret

00000266 <lcd_string>:
	_delay_ms(1);
}


void lcd_string(const unsigned char *str, unsigned char length)
{
     266:	ef 92       	push	r14
     268:	ff 92       	push	r15
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	7c 01       	movw	r14, r24
     272:	16 2f       	mov	r17, r22
	for(int i=0; i<length; i++)
     274:	c0 e0       	ldi	r28, 0x00	; 0
     276:	d0 e0       	ldi	r29, 0x00	; 0
     278:	07 c0       	rjmp	.+14     	; 0x288 <lcd_string+0x22>
	{
		lcddata(str[i]);
     27a:	f7 01       	movw	r30, r14
     27c:	ec 0f       	add	r30, r28
     27e:	fd 1f       	adc	r31, r29
     280:	80 81       	ld	r24, Z
     282:	0e 94 21 01 	call	0x242	; 0x242 <lcddata>
}


void lcd_string(const unsigned char *str, unsigned char length)
{
	for(int i=0; i<length; i++)
     286:	21 96       	adiw	r28, 0x01	; 1
     288:	81 2f       	mov	r24, r17
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	c8 17       	cp	r28, r24
     28e:	d9 07       	cpc	r29, r25
     290:	a4 f3       	brlt	.-24     	; 0x27a <lcd_string+0x14>
	{
		lcddata(str[i]);
	}
}
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	ff 90       	pop	r15
     29a:	ef 90       	pop	r14
     29c:	08 95       	ret

0000029e <charToInt>:

int charToInt(char c){
	int num = 0;
	num = c - '0';
     29e:	90 e0       	ldi	r25, 0x00	; 0

	return num;
}
     2a0:	c0 97       	sbiw	r24, 0x30	; 48
     2a2:	08 95       	ret

000002a4 <lcd_clear>:


void lcd_clear()
{
	lcdcmd(0x01);
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcdcmd>
     2aa:	08 95       	ret

000002ac <lcd_line_one>:
}

void lcd_line_one()
{
	lcdcmd(0x80);
     2ac:	80 e8       	ldi	r24, 0x80	; 128
     2ae:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcdcmd>
     2b2:	08 95       	ret

000002b4 <lcd_line_two>:
}

void lcd_line_two()
{
	lcdcmd(0xC0);
     2b4:	80 ec       	ldi	r24, 0xC0	; 192
     2b6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcdcmd>
     2ba:	08 95       	ret

000002bc <LCD_Char>:
}

void LCD_Char (char char_data)						/* LCD data write function */
{
	LCD_Data_Port = char_data;						/* Write data to LCD data port */
     2bc:	8b bb       	out	0x1b, r24	; 27
	LCD_Command_Port &= ~(1<<RW);					/* Make RW LOW (Write) */
     2be:	88 b3       	in	r24, 0x18	; 24
     2c0:	8d 7f       	andi	r24, 0xFD	; 253
     2c2:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port |= (1<<EN)|(1<<RS);			/* Make RS HIGH (data reg.) and High to Low transition on EN (Enable) */
     2c4:	88 b3       	in	r24, 0x18	; 24
     2c6:	85 60       	ori	r24, 0x05	; 5
     2c8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ca:	82 e0       	ldi	r24, 0x02	; 2
     2cc:	8a 95       	dec	r24
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_Char+0x10>
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_Char+0x16>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
     2d2:	88 b3       	in	r24, 0x18	; 24
     2d4:	8b 7f       	andi	r24, 0xFB	; 251
     2d6:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d8:	8f ec       	ldi	r24, 0xCF	; 207
     2da:	97 e0       	ldi	r25, 0x07	; 7
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_Char+0x20>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCD_Char+0x26>
     2e2:	00 00       	nop
     2e4:	08 95       	ret

000002e6 <keycheck>:
//scankey

char keycheck()

{
	PORTD=0b11101111;
     2e6:	8f ee       	ldi	r24, 0xEF	; 239
     2e8:	82 bb       	out	0x12, r24	; 18
     2ea:	8f e1       	ldi	r24, 0x1F	; 31
     2ec:	9e e4       	ldi	r25, 0x4E	; 78
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <keycheck+0x8>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <keycheck+0xe>
     2f4:	00 00       	nop

	_delay_ms(10);

	if((PIND&0b00000001)==0)
     2f6:	80 9b       	sbis	0x10, 0	; 16
     2f8:	30 c0       	rjmp	.+96     	; 0x35a <keycheck+0x74>
	{
		return '1';
	}
	if((PIND&0b00000010)==0)
     2fa:	81 9b       	sbis	0x10, 1	; 16
     2fc:	30 c0       	rjmp	.+96     	; 0x35e <keycheck+0x78>
	{
		return '2';
	}
	if((PIND&0b00000100)==0)
     2fe:	82 9b       	sbis	0x10, 2	; 16
     300:	30 c0       	rjmp	.+96     	; 0x362 <keycheck+0x7c>
	{
		return '3';
	}

	PORTD=0b11011111;
     302:	8f ed       	ldi	r24, 0xDF	; 223
     304:	82 bb       	out	0x12, r24	; 18
     306:	8f e1       	ldi	r24, 0x1F	; 31
     308:	9e e4       	ldi	r25, 0x4E	; 78
     30a:	01 97       	sbiw	r24, 0x01	; 1
     30c:	f1 f7       	brne	.-4      	; 0x30a <keycheck+0x24>
     30e:	00 c0       	rjmp	.+0      	; 0x310 <keycheck+0x2a>
     310:	00 00       	nop

	_delay_ms(10);

	if((PIND&0b00000001)==0)
     312:	80 9b       	sbis	0x10, 0	; 16
     314:	28 c0       	rjmp	.+80     	; 0x366 <keycheck+0x80>
	{
		return '4';
	}

	if((PIND&0b00000010)==0)
     316:	81 9b       	sbis	0x10, 1	; 16
     318:	28 c0       	rjmp	.+80     	; 0x36a <keycheck+0x84>
	{
		return '5';
	}

	if((PIND&0b00000100)==0)
     31a:	82 9b       	sbis	0x10, 2	; 16
     31c:	28 c0       	rjmp	.+80     	; 0x36e <keycheck+0x88>
	{
		return '6';
	}

	PORTD=0b10111111;
     31e:	8f eb       	ldi	r24, 0xBF	; 191
     320:	82 bb       	out	0x12, r24	; 18
     322:	8f e1       	ldi	r24, 0x1F	; 31
     324:	9e e4       	ldi	r25, 0x4E	; 78
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	f1 f7       	brne	.-4      	; 0x326 <keycheck+0x40>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <keycheck+0x46>
     32c:	00 00       	nop

	_delay_ms(10);

	if((PIND&0b00000001)==0)
     32e:	80 9b       	sbis	0x10, 0	; 16
     330:	20 c0       	rjmp	.+64     	; 0x372 <keycheck+0x8c>
	{
		return '7';
	}

	if((PIND&0b00000010)==0)
     332:	81 9b       	sbis	0x10, 1	; 16
     334:	20 c0       	rjmp	.+64     	; 0x376 <keycheck+0x90>
	{
		return '8';
	}

	if((PIND&0b00000100)==0)
     336:	82 9b       	sbis	0x10, 2	; 16
     338:	20 c0       	rjmp	.+64     	; 0x37a <keycheck+0x94>
	{
		return '9';
	}

	PORTD=0b01111111;
     33a:	8f e7       	ldi	r24, 0x7F	; 127
     33c:	82 bb       	out	0x12, r24	; 18
     33e:	8f e1       	ldi	r24, 0x1F	; 31
     340:	9e e4       	ldi	r25, 0x4E	; 78
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	f1 f7       	brne	.-4      	; 0x342 <keycheck+0x5c>
     346:	00 c0       	rjmp	.+0      	; 0x348 <keycheck+0x62>
     348:	00 00       	nop

	_delay_ms(10);

	if((PIND&0b00000001)==0)
     34a:	80 9b       	sbis	0x10, 0	; 16
     34c:	18 c0       	rjmp	.+48     	; 0x37e <keycheck+0x98>
	{
		return '*';
	}

	if((PIND&0b00000010)==0)
     34e:	81 9b       	sbis	0x10, 1	; 16
     350:	18 c0       	rjmp	.+48     	; 0x382 <keycheck+0x9c>
	{
		return '0';
	}

	if((PIND&0b00000100)==0)
     352:	82 99       	sbic	0x10, 2	; 16
     354:	18 c0       	rjmp	.+48     	; 0x386 <keycheck+0xa0>
	{
		return '#';
     356:	83 e2       	ldi	r24, 0x23	; 35
     358:	08 95       	ret

	_delay_ms(10);

	if((PIND&0b00000001)==0)
	{
		return '1';
     35a:	81 e3       	ldi	r24, 0x31	; 49
     35c:	08 95       	ret
	}
	if((PIND&0b00000010)==0)
	{
		return '2';
     35e:	82 e3       	ldi	r24, 0x32	; 50
     360:	08 95       	ret
	}
	if((PIND&0b00000100)==0)
	{
		return '3';
     362:	83 e3       	ldi	r24, 0x33	; 51
     364:	08 95       	ret

	_delay_ms(10);

	if((PIND&0b00000001)==0)
	{
		return '4';
     366:	84 e3       	ldi	r24, 0x34	; 52
     368:	08 95       	ret
	}

	if((PIND&0b00000010)==0)
	{
		return '5';
     36a:	85 e3       	ldi	r24, 0x35	; 53
     36c:	08 95       	ret
	}

	if((PIND&0b00000100)==0)
	{
		return '6';
     36e:	86 e3       	ldi	r24, 0x36	; 54
     370:	08 95       	ret

	_delay_ms(10);

	if((PIND&0b00000001)==0)
	{
		return '7';
     372:	87 e3       	ldi	r24, 0x37	; 55
     374:	08 95       	ret
	}

	if((PIND&0b00000010)==0)
	{
		return '8';
     376:	88 e3       	ldi	r24, 0x38	; 56
     378:	08 95       	ret
	}

	if((PIND&0b00000100)==0)
	{
		return '9';
     37a:	89 e3       	ldi	r24, 0x39	; 57
     37c:	08 95       	ret

	_delay_ms(10);

	if((PIND&0b00000001)==0)
	{
		return '*';
     37e:	8a e2       	ldi	r24, 0x2A	; 42
     380:	08 95       	ret
	}

	if((PIND&0b00000010)==0)
	{
		return '0';
     382:	80 e3       	ldi	r24, 0x30	; 48
     384:	08 95       	ret
	if((PIND&0b00000100)==0)
	{
		return '#';
	}

	return 'a';
     386:	81 e6       	ldi	r24, 0x61	; 97

}
     388:	08 95       	ret

0000038a <scankey>:

char scankey()
{
	char key='a';
     38a:	81 e6       	ldi	r24, 0x61	; 97

	while(key=='a')
     38c:	02 c0       	rjmp	.+4      	; 0x392 <scankey+0x8>
	{
		key=keycheck();
     38e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <keycheck>

char scankey()
{
	char key='a';

	while(key=='a')
     392:	81 36       	cpi	r24, 0x61	; 97
     394:	e1 f3       	breq	.-8      	; 0x38e <scankey+0x4>
	{
		key=keycheck();
	}
	return key;
}
     396:	08 95       	ret

00000398 <HCSR04Init>:

void HCSR04Init()
{
	
	
	US_DDR|=(1<<US_TRIG_POS);
     398:	84 b3       	in	r24, 0x14	; 20
     39a:	81 60       	ori	r24, 0x01	; 1
     39c:	84 bb       	out	0x14, r24	; 20
     39e:	08 95       	ret

000003a0 <HCSR04Trigger>:
}

void HCSR04Trigger()
{
	
	US_PORT|=(1<<US_TRIG_POS);	//high
     3a0:	85 b3       	in	r24, 0x15	; 21
     3a2:	81 60       	ori	r24, 0x01	; 1
     3a4:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a6:	88 e2       	ldi	r24, 0x28	; 40
     3a8:	8a 95       	dec	r24
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <HCSR04Trigger+0x8>
	
	_delay_us(15);				//wait 15uS
	
	US_PORT&=~(1<<US_TRIG_POS);	//low
     3ac:	85 b3       	in	r24, 0x15	; 21
     3ae:	8e 7f       	andi	r24, 0xFE	; 254
     3b0:	85 bb       	out	0x15, r24	; 21
     3b2:	08 95       	ret

000003b4 <GetPulseWidth>:
}

uint32_t GetPulseWidth()
{
     3b4:	8f 92       	push	r8
     3b6:	9f 92       	push	r9
     3b8:	af 92       	push	r10
     3ba:	bf 92       	push	r11
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
	
	uint64_t i,result;

	for(i=0;i<600000;i++)
     3cc:	d0 e0       	ldi	r29, 0x00	; 0
     3ce:	c0 e0       	ldi	r28, 0x00	; 0
     3d0:	b0 e0       	ldi	r27, 0x00	; 0
     3d2:	a0 e0       	ldi	r26, 0x00	; 0
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	f1 2c       	mov	r15, r1
     3d8:	00 e0       	ldi	r16, 0x00	; 0
     3da:	10 e0       	ldi	r17, 0x00	; 0
     3dc:	15 c0       	rjmp	.+42     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		if(!(US_PIN & (1<<US_ECHO_POS)))
     3de:	99 99       	sbic	0x13, 1	; 19
     3e0:	25 c0       	rjmp	.+74     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
uint32_t GetPulseWidth()
{
	
	uint64_t i,result;

	for(i=0;i<600000;i++)
     3e2:	2d 2f       	mov	r18, r29
     3e4:	3c 2f       	mov	r19, r28
     3e6:	4b 2f       	mov	r20, r27
     3e8:	5a 2f       	mov	r21, r26
     3ea:	6f 2f       	mov	r22, r31
     3ec:	7f 2d       	mov	r23, r15
     3ee:	80 2f       	mov	r24, r16
     3f0:	91 2f       	mov	r25, r17
     3f2:	a1 e0       	ldi	r26, 0x01	; 1
     3f4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__adddi3_s8>
     3f8:	d2 2f       	mov	r29, r18
     3fa:	c3 2f       	mov	r28, r19
     3fc:	b4 2f       	mov	r27, r20
     3fe:	a5 2f       	mov	r26, r21
     400:	f6 2f       	mov	r31, r22
     402:	f7 2e       	mov	r15, r23
     404:	08 2f       	mov	r16, r24
     406:	19 2f       	mov	r17, r25
     408:	2d 2f       	mov	r18, r29
     40a:	3c 2f       	mov	r19, r28
     40c:	4b 2f       	mov	r20, r27
     40e:	5a 2f       	mov	r21, r26
     410:	6f 2f       	mov	r22, r31
     412:	7f 2d       	mov	r23, r15
     414:	80 2f       	mov	r24, r16
     416:	91 2f       	mov	r25, r17
     418:	2f 3b       	cpi	r18, 0xBF	; 191
     41a:	37 42       	sbci	r19, 0x27	; 39
     41c:	49 40       	sbci	r20, 0x09	; 9
     41e:	51 05       	cpc	r21, r1
     420:	61 05       	cpc	r22, r1
     422:	71 05       	cpc	r23, r1
     424:	81 05       	cpc	r24, r1
     426:	91 05       	cpc	r25, r1
     428:	d1 f2       	breq	.-76     	; 0x3de <GetPulseWidth+0x2a>
     42a:	c8 f2       	brcs	.-78     	; 0x3de <GetPulseWidth+0x2a>
		continue;
		else
		break;
	}

	if(i==600000)
     42c:	2d 2f       	mov	r18, r29
     42e:	3c 2f       	mov	r19, r28
     430:	4b 2f       	mov	r20, r27
     432:	5a 2f       	mov	r21, r26
     434:	6f 2f       	mov	r22, r31
     436:	7f 2d       	mov	r23, r15
     438:	80 2f       	mov	r24, r16
     43a:	91 2f       	mov	r25, r17
     43c:	20 3c       	cpi	r18, 0xC0	; 192
     43e:	37 42       	sbci	r19, 0x27	; 39
     440:	49 40       	sbci	r20, 0x09	; 9
     442:	51 05       	cpc	r21, r1
     444:	61 05       	cpc	r22, r1
     446:	71 05       	cpc	r23, r1
     448:	81 05       	cpc	r24, r1
     44a:	91 05       	cpc	r25, r1
     44c:	09 f4       	brne	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44e:	69 c0       	rjmp	.+210    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	return US_ERROR;
	
	TCCR1A=0X00;
     450:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x00;
     456:	1d bc       	out	0x2d, r1	; 45
     458:	1c bc       	out	0x2c, r1	; 44

	
	for(i=0;i<600000;i++)
     45a:	d0 e0       	ldi	r29, 0x00	; 0
     45c:	c0 e0       	ldi	r28, 0x00	; 0
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	a0 e0       	ldi	r26, 0x00	; 0
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	f1 2c       	mov	r15, r1
     466:	00 e0       	ldi	r16, 0x00	; 0
     468:	10 e0       	ldi	r17, 0x00	; 0
     46a:	1a c0       	rjmp	.+52     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
	{
		if(US_PIN & (1<<US_ECHO_POS))
     46c:	99 9b       	sbis	0x13, 1	; 19
     46e:	2a c0       	rjmp	.+84     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
		{
			if(TCNT1 > 60000) break; else continue;
     470:	8c b5       	in	r24, 0x2c	; 44
     472:	9d b5       	in	r25, 0x2d	; 45
     474:	81 36       	cpi	r24, 0x61	; 97
     476:	9a 4e       	sbci	r25, 0xEA	; 234
     478:	28 f5       	brcc	.+74     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);
	TCNT1=0x00;

	
	for(i=0;i<600000;i++)
     47a:	2d 2f       	mov	r18, r29
     47c:	3c 2f       	mov	r19, r28
     47e:	4b 2f       	mov	r20, r27
     480:	5a 2f       	mov	r21, r26
     482:	6f 2f       	mov	r22, r31
     484:	7f 2d       	mov	r23, r15
     486:	80 2f       	mov	r24, r16
     488:	91 2f       	mov	r25, r17
     48a:	a1 e0       	ldi	r26, 0x01	; 1
     48c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__adddi3_s8>
     490:	d2 2f       	mov	r29, r18
     492:	c3 2f       	mov	r28, r19
     494:	b4 2f       	mov	r27, r20
     496:	a5 2f       	mov	r26, r21
     498:	f6 2f       	mov	r31, r22
     49a:	f7 2e       	mov	r15, r23
     49c:	08 2f       	mov	r16, r24
     49e:	19 2f       	mov	r17, r25
     4a0:	2d 2f       	mov	r18, r29
     4a2:	3c 2f       	mov	r19, r28
     4a4:	4b 2f       	mov	r20, r27
     4a6:	5a 2f       	mov	r21, r26
     4a8:	6f 2f       	mov	r22, r31
     4aa:	7f 2d       	mov	r23, r15
     4ac:	80 2f       	mov	r24, r16
     4ae:	91 2f       	mov	r25, r17
     4b0:	2f 3b       	cpi	r18, 0xBF	; 191
     4b2:	37 42       	sbci	r19, 0x27	; 39
     4b4:	49 40       	sbci	r20, 0x09	; 9
     4b6:	51 05       	cpc	r21, r1
     4b8:	61 05       	cpc	r22, r1
     4ba:	71 05       	cpc	r23, r1
     4bc:	81 05       	cpc	r24, r1
     4be:	91 05       	cpc	r25, r1
     4c0:	a9 f2       	breq	.-86     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     4c2:	a0 f2       	brcs	.-88     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		}
		else
		break;
	}

	if(i==600000)
     4c4:	2d 2f       	mov	r18, r29
     4c6:	3c 2f       	mov	r19, r28
     4c8:	4b 2f       	mov	r20, r27
     4ca:	5a 2f       	mov	r21, r26
     4cc:	6f 2f       	mov	r22, r31
     4ce:	7f 2d       	mov	r23, r15
     4d0:	80 2f       	mov	r24, r16
     4d2:	91 2f       	mov	r25, r17
     4d4:	20 3c       	cpi	r18, 0xC0	; 192
     4d6:	37 42       	sbci	r19, 0x27	; 39
     4d8:	49 40       	sbci	r20, 0x09	; 9
     4da:	51 05       	cpc	r21, r1
     4dc:	61 05       	cpc	r22, r1
     4de:	71 05       	cpc	r23, r1
     4e0:	81 05       	cpc	r24, r1
     4e2:	91 05       	cpc	r25, r1
     4e4:	19 f1       	breq	.+70     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
	return US_NO_OBSTACLE;

	result=TCNT1;
     4e6:	8c b4       	in	r8, 0x2c	; 44
     4e8:	9d b4       	in	r9, 0x2d	; 45
	TCCR1B=0x00;
     4ea:	1e bc       	out	0x2e, r1	; 46

	if(result > 60000)
     4ec:	28 2d       	mov	r18, r8
     4ee:	39 2d       	mov	r19, r9
     4f0:	40 e0       	ldi	r20, 0x00	; 0
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	20 36       	cpi	r18, 0x60	; 96
     4fe:	ea ee       	ldi	r30, 0xEA	; 234
     500:	3e 07       	cpc	r19, r30
     502:	41 05       	cpc	r20, r1
     504:	51 05       	cpc	r21, r1
     506:	61 05       	cpc	r22, r1
     508:	71 05       	cpc	r23, r1
     50a:	81 05       	cpc	r24, r1
     50c:	91 05       	cpc	r25, r1
     50e:	09 f0       	breq	.+2      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     510:	90 f4       	brcc	.+36     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
	return US_NO_OBSTACLE;
	else
	return (result>>1);
     512:	01 e0       	ldi	r16, 0x01	; 1
     514:	0e 94 38 0c 	call	0x1870	; 0x1870 <__lshrdi3>
     518:	62 2f       	mov	r22, r18
     51a:	73 2f       	mov	r23, r19
     51c:	84 2f       	mov	r24, r20
     51e:	95 2f       	mov	r25, r21
     520:	0e c0       	rjmp	.+28     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
		else
		break;
	}

	if(i==600000)
	return US_ERROR;
     522:	6f ef       	ldi	r22, 0xFF	; 255
     524:	7f ef       	ldi	r23, 0xFF	; 255
     526:	8f ef       	ldi	r24, 0xFF	; 255
     528:	9f ef       	ldi	r25, 0xFF	; 255
     52a:	09 c0       	rjmp	.+18     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;
     52c:	6e ef       	ldi	r22, 0xFE	; 254
     52e:	7f ef       	ldi	r23, 0xFF	; 255
     530:	8f ef       	ldi	r24, 0xFF	; 255
     532:	9f ef       	ldi	r25, 0xFF	; 255
     534:	04 c0       	rjmp	.+8      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>

	result=TCNT1;
	TCCR1B=0x00;

	if(result > 60000)
	return US_NO_OBSTACLE;
     536:	6e ef       	ldi	r22, 0xFE	; 254
     538:	7f ef       	ldi	r23, 0xFF	; 255
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	df 90       	pop	r13
     54c:	cf 90       	pop	r12
     54e:	bf 90       	pop	r11
     550:	af 90       	pop	r10
     552:	9f 90       	pop	r9
     554:	8f 90       	pop	r8
     556:	08 95       	ret

00000558 <Request>:
#define DHT11_PIN 3
uint8_t c=0,I_RH,D_RH,I_Temp,D_Temp,CheckSum;

void Request()						/* Microcontroller send start pulse or request */
{
	DDRD |= (1<<DHT11_PIN);
     558:	81 b3       	in	r24, 0x11	; 17
     55a:	88 60       	ori	r24, 0x08	; 8
     55c:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<DHT11_PIN);		/* set to low pin */
     55e:	82 b3       	in	r24, 0x12	; 18
     560:	87 7f       	andi	r24, 0xF7	; 247
     562:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     564:	8f e3       	ldi	r24, 0x3F	; 63
     566:	9c e9       	ldi	r25, 0x9C	; 156
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <Request+0x10>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <Request+0x16>
     56e:	00 00       	nop
	_delay_ms(20);					/* wait for 20ms */
	PORTD |= (1<<DHT11_PIN);		/* set to high pin */
     570:	82 b3       	in	r24, 0x12	; 18
     572:	88 60       	ori	r24, 0x08	; 8
     574:	82 bb       	out	0x12, r24	; 18
     576:	08 95       	ret

00000578 <Response>:
}

void Response()						/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT11_PIN);
     578:	81 b3       	in	r24, 0x11	; 17
     57a:	87 7f       	andi	r24, 0xF7	; 247
     57c:	81 bb       	out	0x11, r24	; 17
	while(PIND & (1<<DHT11_PIN));
     57e:	83 99       	sbic	0x10, 3	; 16
     580:	fe cf       	rjmp	.-4      	; 0x57e <Response+0x6>
	while((PIND & (1<<DHT11_PIN))==0);
     582:	83 9b       	sbis	0x10, 3	; 16
     584:	fe cf       	rjmp	.-4      	; 0x582 <Response+0xa>
	while(PIND & (1<<DHT11_PIN));
     586:	83 99       	sbic	0x10, 3	; 16
     588:	fe cf       	rjmp	.-4      	; 0x586 <Response+0xe>
}
     58a:	08 95       	ret

0000058c <Receive_data>:

uint8_t Receive_data()							/* receive data */
{
	for (int q=0; q<8; q++)
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	19 c0       	rjmp	.+50     	; 0x5c4 <Receive_data+0x38>
	{
		while((PIND & (1<<DHT11_PIN)) == 0);	/* check received bit 0 or 1 */
     592:	83 9b       	sbis	0x10, 3	; 16
     594:	fe cf       	rjmp	.-4      	; 0x592 <Receive_data+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     596:	80 e5       	ldi	r24, 0x50	; 80
     598:	8a 95       	dec	r24
     59a:	f1 f7       	brne	.-4      	; 0x598 <Receive_data+0xc>
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN))				/* if high pulse is greater than 30ms */
     59c:	83 9b       	sbis	0x10, 3	; 16
     59e:	09 c0       	rjmp	.+18     	; 0x5b2 <Receive_data+0x26>
		c = (c<<1)|(0x01);						/* then its logic HIGH */
     5a0:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <c>
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	88 0f       	add	r24, r24
     5a8:	99 1f       	adc	r25, r25
     5aa:	81 60       	ori	r24, 0x01	; 1
     5ac:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <c>
     5b0:	05 c0       	rjmp	.+10     	; 0x5bc <Receive_data+0x30>
		else									/* otherwise its logic LOW */
		c = (c<<1);
     5b2:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <c>
     5b6:	88 0f       	add	r24, r24
     5b8:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <c>
		while(PIND & (1<<DHT11_PIN));
     5bc:	83 99       	sbic	0x10, 3	; 16
     5be:	fe cf       	rjmp	.-4      	; 0x5bc <Receive_data+0x30>
	while(PIND & (1<<DHT11_PIN));
}

uint8_t Receive_data()							/* receive data */
{
	for (int q=0; q<8; q++)
     5c0:	2f 5f       	subi	r18, 0xFF	; 255
     5c2:	3f 4f       	sbci	r19, 0xFF	; 255
     5c4:	28 30       	cpi	r18, 0x08	; 8
     5c6:	31 05       	cpc	r19, r1
     5c8:	24 f3       	brlt	.-56     	; 0x592 <Receive_data+0x6>
		else									/* otherwise its logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
     5ca:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <c>
     5ce:	08 95       	ret

000005d0 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     5d0:	80 e4       	ldi	r24, 0x40	; 64
     5d2:	87 b9       	out	0x07, r24	; 7
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     5d4:	87 e8       	ldi	r24, 0x87	; 135
     5d6:	86 b9       	out	0x06, r24	; 6
     5d8:	08 95       	ret

000005da <adc_read>:
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     5da:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     5dc:	97 b1       	in	r25, 0x07	; 7
     5de:	98 7f       	andi	r25, 0xF8	; 248
     5e0:	89 2b       	or	r24, r25
     5e2:	87 b9       	out	0x07, r24	; 7
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     5e4:	86 b1       	in	r24, 0x06	; 6
     5e6:	80 64       	ori	r24, 0x40	; 64
     5e8:	86 b9       	out	0x06, r24	; 6
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     5ea:	36 99       	sbic	0x06, 6	; 6
     5ec:	fe cf       	rjmp	.-4      	; 0x5ea <adc_read+0x10>
	
	return (ADC);
     5ee:	84 b1       	in	r24, 0x04	; 4
     5f0:	95 b1       	in	r25, 0x05	; 5
     5f2:	08 95       	ret

000005f4 <__vector_18>:
}


/* ISR routine to save responses/new message */
ISR(USART0_RX_vect)
{
     5f4:	1f 92       	push	r1
     5f6:	0f 92       	push	r0
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	0f 92       	push	r0
     5fc:	11 24       	eor	r1, r1
     5fe:	8f 93       	push	r24
     600:	9f 93       	push	r25
     602:	ef 93       	push	r30
     604:	ff 93       	push	r31
	buff[buffer_pointer] = UDR0;							/* copy UDR(received value) to buffer */
     606:	e0 91 19 03 	lds	r30, 0x0319	; 0x800319 <buffer_pointer>
     60a:	f0 91 1a 03 	lds	r31, 0x031A	; 0x80031a <buffer_pointer+0x1>
     60e:	8c b1       	in	r24, 0x0c	; 12
     610:	e8 5d       	subi	r30, 0xD8	; 216
     612:	fd 4f       	sbci	r31, 0xFD	; 253
     614:	80 83       	st	Z, r24
	buffer_pointer++;
     616:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <buffer_pointer>
     61a:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <buffer_pointer+0x1>
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <buffer_pointer+0x1>
     624:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <buffer_pointer>
	status_flag = 1;						            /* flag for new message arrival */
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__data_end>
}
     62e:	ff 91       	pop	r31
     630:	ef 91       	pop	r30
     632:	9f 91       	pop	r25
     634:	8f 91       	pop	r24
     636:	0f 90       	pop	r0
     638:	0f be       	out	0x3f, r0	; 63
     63a:	0f 90       	pop	r0
     63c:	1f 90       	pop	r1
     63e:	18 95       	reti

00000640 <GSM_Send_Msg>:


void GSM_Send_Msg(char *num,char *sms)
{
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	a3 97       	sbiw	r28, 0x23	; 35
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	de bf       	out	0x3e, r29	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	cd bf       	out	0x3d, r28	; 61
     65c:	8b 01       	movw	r16, r22
	char sms_buffer[35];
	buffer_pointer=0;
     65e:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <buffer_pointer+0x1>
     662:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <buffer_pointer>
	sprintf(sms_buffer,"AT+CMGS=\"%s\"\r",num);
     666:	9f 93       	push	r25
     668:	8f 93       	push	r24
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	9f 93       	push	r25
     670:	8f 93       	push	r24
     672:	ce 01       	movw	r24, r28
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	7c 01       	movw	r14, r24
     678:	9f 93       	push	r25
     67a:	8f 93       	push	r24
     67c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <sprintf>
	USART_SendString(sms_buffer);                       /*send command AT+CMGS="Mobile No."\r */
     680:	c7 01       	movw	r24, r14
     682:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     686:	9f ef       	ldi	r25, 0xFF	; 255
     688:	21 ee       	ldi	r18, 0xE1	; 225
     68a:	84 e0       	ldi	r24, 0x04	; 4
     68c:	91 50       	subi	r25, 0x01	; 1
     68e:	20 40       	sbci	r18, 0x00	; 0
     690:	80 40       	sbci	r24, 0x00	; 0
     692:	e1 f7       	brne	.-8      	; 0x68c <GSM_Send_Msg+0x4c>
     694:	00 c0       	rjmp	.+0      	; 0x696 <GSM_Send_Msg+0x56>
     696:	00 00       	nop
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
	_delay_ms(200);
	while(1)
	{
		if(buff[buffer_pointer]==0x3e)                  /* wait for '>' character*/
     6a4:	e0 91 19 03 	lds	r30, 0x0319	; 0x800319 <buffer_pointer>
     6a8:	f0 91 1a 03 	lds	r31, 0x031A	; 0x80031a <buffer_pointer+0x1>
     6ac:	e8 5d       	subi	r30, 0xD8	; 216
     6ae:	fd 4f       	sbci	r31, 0xFD	; 253
     6b0:	80 81       	ld	r24, Z
     6b2:	8e 33       	cpi	r24, 0x3E	; 62
     6b4:	09 f0       	breq	.+2      	; 0x6b8 <GSM_Send_Msg+0x78>
     6b6:	46 c0       	rjmp	.+140    	; 0x744 <GSM_Send_Msg+0x104>
		{
			buffer_pointer = 0;
     6b8:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <buffer_pointer+0x1>
     6bc:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <buffer_pointer>
			memset(buff,0,strlen(buff));
     6c0:	0f 2e       	mov	r0, r31
     6c2:	f8 e2       	ldi	r31, 0x28	; 40
     6c4:	ef 2e       	mov	r14, r31
     6c6:	f2 e0       	ldi	r31, 0x02	; 2
     6c8:	ff 2e       	mov	r15, r31
     6ca:	f0 2d       	mov	r31, r0
     6cc:	f7 01       	movw	r30, r14
     6ce:	01 90       	ld	r0, Z+
     6d0:	00 20       	and	r0, r0
     6d2:	e9 f7       	brne	.-6      	; 0x6ce <GSM_Send_Msg+0x8e>
     6d4:	31 97       	sbiw	r30, 0x01	; 1
     6d6:	af 01       	movw	r20, r30
     6d8:	48 52       	subi	r20, 0x28	; 40
     6da:	52 40       	sbci	r21, 0x02	; 2
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	c7 01       	movw	r24, r14
     6e2:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <memset>
			USART_SendString(sms);                      /* send msg to given no. */
     6e6:	c8 01       	movw	r24, r16
     6e8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_SendString>
			USART_TxChar(0x1a);                         /* send Ctrl+Z then only message will transmit*/
     6ec:	8a e1       	ldi	r24, 0x1A	; 26
     6ee:	0e 94 d7 00 	call	0x1ae	; 0x1ae <USART_TxChar>
     6f2:	9f ef       	ldi	r25, 0xFF	; 255
     6f4:	22 e5       	ldi	r18, 0x52	; 82
     6f6:	87 e0       	ldi	r24, 0x07	; 7
     6f8:	91 50       	subi	r25, 0x01	; 1
     6fa:	20 40       	sbci	r18, 0x00	; 0
     6fc:	80 40       	sbci	r24, 0x00	; 0
     6fe:	e1 f7       	brne	.-8      	; 0x6f8 <GSM_Send_Msg+0xb8>
     700:	00 c0       	rjmp	.+0      	; 0x702 <GSM_Send_Msg+0xc2>
     702:	00 00       	nop
			break;
		}
		buffer_pointer++;
	}
	_delay_ms(300);
	buffer_pointer = 0;
     704:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <buffer_pointer+0x1>
     708:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <buffer_pointer>
	memset(buff,0,strlen(buff));
     70c:	f7 01       	movw	r30, r14
     70e:	01 90       	ld	r0, Z+
     710:	00 20       	and	r0, r0
     712:	e9 f7       	brne	.-6      	; 0x70e <GSM_Send_Msg+0xce>
     714:	31 97       	sbiw	r30, 0x01	; 1
     716:	af 01       	movw	r20, r30
     718:	48 52       	subi	r20, 0x28	; 40
     71a:	52 40       	sbci	r21, 0x02	; 2
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	c7 01       	movw	r24, r14
     722:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <memset>
	memset(sms_buffer,0,strlen(sms_buffer));
     726:	ce 01       	movw	r24, r28
     728:	01 96       	adiw	r24, 0x01	; 1
     72a:	fc 01       	movw	r30, r24
     72c:	01 90       	ld	r0, Z+
     72e:	00 20       	and	r0, r0
     730:	e9 f7       	brne	.-6      	; 0x72c <GSM_Send_Msg+0xec>
     732:	31 97       	sbiw	r30, 0x01	; 1
     734:	af 01       	movw	r20, r30
     736:	48 1b       	sub	r20, r24
     738:	59 0b       	sbc	r21, r25
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <memset>
}
     742:	0a c0       	rjmp	.+20     	; 0x758 <GSM_Send_Msg+0x118>
			memset(buff,0,strlen(buff));
			USART_SendString(sms);                      /* send msg to given no. */
			USART_TxChar(0x1a);                         /* send Ctrl+Z then only message will transmit*/
			break;
		}
		buffer_pointer++;
     744:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <buffer_pointer>
     748:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <buffer_pointer+0x1>
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <buffer_pointer+0x1>
     752:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <buffer_pointer>
	}
     756:	a6 cf       	rjmp	.-180    	; 0x6a4 <GSM_Send_Msg+0x64>
	_delay_ms(300);
	buffer_pointer = 0;
	memset(buff,0,strlen(buff));
	memset(sms_buffer,0,strlen(sms_buffer));
}
     758:	a3 96       	adiw	r28, 0x23	; 35
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	cd bf       	out	0x3d, r28	; 61
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	08 95       	ret

00000772 <GSM_Response_Display>:
	}
	status_flag=0;
}

void GSM_Response_Display()
{
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
	buffer_pointer = 0;
     776:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <buffer_pointer+0x1>
     77a:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <buffer_pointer>
	int lcd_pointer = 0;
	while(1)
	{
		if(buff[buffer_pointer]== '\r' || buff[buffer_pointer]== '\n')  /* search for \r\n in string */
     77e:	e0 91 19 03 	lds	r30, 0x0319	; 0x800319 <buffer_pointer>
     782:	f0 91 1a 03 	lds	r31, 0x031A	; 0x80031a <buffer_pointer+0x1>
     786:	e8 5d       	subi	r30, 0xD8	; 216
     788:	fd 4f       	sbci	r31, 0xFD	; 253
     78a:	80 81       	ld	r24, Z
     78c:	8d 30       	cpi	r24, 0x0D	; 13
     78e:	49 f0       	breq	.+18     	; 0x7a2 <GSM_Response_Display+0x30>
     790:	e0 91 19 03 	lds	r30, 0x0319	; 0x800319 <buffer_pointer>
     794:	f0 91 1a 03 	lds	r31, 0x031A	; 0x80031a <buffer_pointer+0x1>
     798:	e8 5d       	subi	r30, 0xD8	; 216
     79a:	fd 4f       	sbci	r31, 0xFD	; 253
     79c:	80 81       	ld	r24, Z
     79e:	8a 30       	cpi	r24, 0x0A	; 10
     7a0:	51 f4       	brne	.+20     	; 0x7b6 <GSM_Response_Display+0x44>
		{
			buffer_pointer++;
     7a2:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <buffer_pointer>
     7a6:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <buffer_pointer+0x1>
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <buffer_pointer+0x1>
     7b0:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <buffer_pointer>
		}
		else
		break;
	}
     7b4:	e4 cf       	rjmp	.-56     	; 0x77e <GSM_Response_Display+0xc>
	

	lcdcmd(0xc0);
     7b6:	80 ec       	ldi	r24, 0xC0	; 192
     7b8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcdcmd>
}

void GSM_Response_Display()
{
	buffer_pointer = 0;
	int lcd_pointer = 0;
     7bc:	c0 e0       	ldi	r28, 0x00	; 0
     7be:	d0 e0       	ldi	r29, 0x00	; 0
		break;
	}
	

	lcdcmd(0xc0);
	while(buff[buffer_pointer]!='\r')								   /* display response till "\r" */
     7c0:	19 c0       	rjmp	.+50     	; 0x7f4 <GSM_Response_Display+0x82>
	{
		LCD_Char(buff[buffer_pointer]);
     7c2:	e0 91 19 03 	lds	r30, 0x0319	; 0x800319 <buffer_pointer>
     7c6:	f0 91 1a 03 	lds	r31, 0x031A	; 0x80031a <buffer_pointer+0x1>
     7ca:	e8 5d       	subi	r30, 0xD8	; 216
     7cc:	fd 4f       	sbci	r31, 0xFD	; 253
     7ce:	80 81       	ld	r24, Z
     7d0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_Char>
		buffer_pointer++;
     7d4:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <buffer_pointer>
     7d8:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <buffer_pointer+0x1>
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <buffer_pointer+0x1>
     7e2:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <buffer_pointer>
		lcd_pointer++;
     7e6:	21 96       	adiw	r28, 0x01	; 1
		if(lcd_pointer==15)								               /* check for end of LCD line */
     7e8:	cf 30       	cpi	r28, 0x0F	; 15
     7ea:	d1 05       	cpc	r29, r1
     7ec:	19 f4       	brne	.+6      	; 0x7f4 <GSM_Response_Display+0x82>
		lcdcmd(0x80);
     7ee:	80 e8       	ldi	r24, 0x80	; 128
     7f0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcdcmd>
		break;
	}
	

	lcdcmd(0xc0);
	while(buff[buffer_pointer]!='\r')								   /* display response till "\r" */
     7f4:	e0 91 19 03 	lds	r30, 0x0319	; 0x800319 <buffer_pointer>
     7f8:	f0 91 1a 03 	lds	r31, 0x031A	; 0x80031a <buffer_pointer+0x1>
     7fc:	e8 5d       	subi	r30, 0xD8	; 216
     7fe:	fd 4f       	sbci	r31, 0xFD	; 253
     800:	80 81       	ld	r24, Z
     802:	8d 30       	cpi	r24, 0x0D	; 13
     804:	f1 f6       	brne	.-68     	; 0x7c2 <GSM_Response_Display+0x50>
		buffer_pointer++;
		lcd_pointer++;
		if(lcd_pointer==15)								               /* check for end of LCD line */
		lcdcmd(0x80);
	}
	buffer_pointer=0;
     806:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <buffer_pointer+0x1>
     80a:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <buffer_pointer>
	memset(buff,0,strlen(buff));
     80e:	e8 e2       	ldi	r30, 0x28	; 40
     810:	f2 e0       	ldi	r31, 0x02	; 2
     812:	01 90       	ld	r0, Z+
     814:	00 20       	and	r0, r0
     816:	e9 f7       	brne	.-6      	; 0x812 <__EEPROM_REGION_LENGTH__+0x12>
     818:	31 97       	sbiw	r30, 0x01	; 1
     81a:	af 01       	movw	r20, r30
     81c:	48 52       	subi	r20, 0x28	; 40
     81e:	52 40       	sbci	r21, 0x02	; 2
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	88 e2       	ldi	r24, 0x28	; 40
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <memset>
}
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	08 95       	ret

00000832 <GSM_Response>:
	memset(sms_buffer,0,strlen(sms_buffer));
}


void GSM_Response()
{
     832:	af 92       	push	r10
     834:	bf 92       	push	r11
     836:	cf 92       	push	r12
     838:	df 92       	push	r13
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	00 d0       	rcall	.+0      	; 0x848 <GSM_Response+0x16>
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
	unsigned int timeout=0;
     84c:	e1 2c       	mov	r14, r1
     84e:	f1 2c       	mov	r15, r1
	int CRLF_Found=0;
	char CRLF_buff[2];
	int Response_Length=0;
	while(1)
	{
		if(timeout>=60000)								/*if timeout occur then return */
     850:	20 e6       	ldi	r18, 0x60	; 96
     852:	e2 16       	cp	r14, r18
     854:	2a ee       	ldi	r18, 0xEA	; 234
     856:	f2 06       	cpc	r15, r18
     858:	08 f0       	brcs	.+2      	; 0x85c <GSM_Response+0x2a>
     85a:	4e c0       	rjmp	.+156    	; 0x8f8 <GSM_Response+0xc6>
		return;
		Response_Length = strlen(buff);
     85c:	e8 e2       	ldi	r30, 0x28	; 40
     85e:	f2 e0       	ldi	r31, 0x02	; 2
     860:	01 90       	ld	r0, Z+
     862:	00 20       	and	r0, r0
     864:	e9 f7       	brne	.-6      	; 0x860 <GSM_Response+0x2e>
     866:	31 97       	sbiw	r30, 0x01	; 1
     868:	e8 52       	subi	r30, 0x28	; 40
     86a:	f2 40       	sbci	r31, 0x02	; 2
     86c:	6f 01       	movw	r12, r30
		if(Response_Length)
     86e:	d1 f1       	breq	.+116    	; 0x8e4 <GSM_Response+0xb2>
     870:	8f e9       	ldi	r24, 0x9F	; 159
     872:	9f e0       	ldi	r25, 0x0F	; 15
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	f1 f7       	brne	.-4      	; 0x874 <GSM_Response+0x42>
     878:	00 c0       	rjmp	.+0      	; 0x87a <GSM_Response+0x48>
     87a:	00 00       	nop
		{
			_delay_ms(2);
			timeout++;
     87c:	9f ef       	ldi	r25, 0xFF	; 255
     87e:	e9 1a       	sub	r14, r25
     880:	f9 0a       	sbc	r15, r25
			if(Response_Length==strlen(buff))
     882:	a8 e2       	ldi	r26, 0x28	; 40
     884:	b2 e0       	ldi	r27, 0x02	; 2
     886:	0d 90       	ld	r0, X+
     888:	00 20       	and	r0, r0
     88a:	e9 f7       	brne	.-6      	; 0x886 <GSM_Response+0x54>
     88c:	11 97       	sbiw	r26, 0x01	; 1
     88e:	a8 52       	subi	r26, 0x28	; 40
     890:	b2 40       	sbci	r27, 0x02	; 2
     892:	ea 17       	cp	r30, r26
     894:	fb 07       	cpc	r31, r27
     896:	31 f5       	brne	.+76     	; 0x8e4 <GSM_Response+0xb2>
     898:	1e c0       	rjmp	.+60     	; 0x8d6 <GSM_Response+0xa4>
			{
				for(int i=0;i<Response_Length;i++)
				{
					memmove(CRLF_buff,CRLF_buff+1,1);
     89a:	8a 81       	ldd	r24, Y+2	; 0x02
     89c:	89 83       	std	Y+1, r24	; 0x01
					CRLF_buff[1]=buff[i];
     89e:	f8 01       	movw	r30, r16
     8a0:	e8 5d       	subi	r30, 0xD8	; 216
     8a2:	fd 4f       	sbci	r31, 0xFD	; 253
     8a4:	80 81       	ld	r24, Z
     8a6:	8a 83       	std	Y+2, r24	; 0x02
					if(strncmp(CRLF_buff,"\r\n",2))
     8a8:	42 e0       	ldi	r20, 0x02	; 2
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	6e e0       	ldi	r22, 0x0E	; 14
     8ae:	71 e0       	ldi	r23, 0x01	; 1
     8b0:	ce 01       	movw	r24, r28
     8b2:	01 96       	adiw	r24, 0x01	; 1
     8b4:	0e 94 67 0c 	call	0x18ce	; 0x18ce <strncmp>
     8b8:	89 2b       	or	r24, r25
     8ba:	51 f0       	breq	.+20     	; 0x8d0 <GSM_Response+0x9e>
					{
						if(CRLF_Found++==2)				/* search for \r\n in string */
     8bc:	c5 01       	movw	r24, r10
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	22 e0       	ldi	r18, 0x02	; 2
     8c2:	a2 16       	cp	r10, r18
     8c4:	b1 04       	cpc	r11, r1
     8c6:	19 f4       	brne	.+6      	; 0x8ce <GSM_Response+0x9c>
						{
							GSM_Response_Display();		/* display response */
     8c8:	0e 94 b9 03 	call	0x772	; 0x772 <GSM_Response_Display>
							return;
     8cc:	15 c0       	rjmp	.+42     	; 0x8f8 <GSM_Response+0xc6>
				{
					memmove(CRLF_buff,CRLF_buff+1,1);
					CRLF_buff[1]=buff[i];
					if(strncmp(CRLF_buff,"\r\n",2))
					{
						if(CRLF_Found++==2)				/* search for \r\n in string */
     8ce:	5c 01       	movw	r10, r24
		{
			_delay_ms(2);
			timeout++;
			if(Response_Length==strlen(buff))
			{
				for(int i=0;i<Response_Length;i++)
     8d0:	0f 5f       	subi	r16, 0xFF	; 255
     8d2:	1f 4f       	sbci	r17, 0xFF	; 255
     8d4:	04 c0       	rjmp	.+8      	; 0x8de <GSM_Response+0xac>
     8d6:	00 e0       	ldi	r16, 0x00	; 0
     8d8:	10 e0       	ldi	r17, 0x00	; 0
     8da:	a1 2c       	mov	r10, r1
     8dc:	b1 2c       	mov	r11, r1
     8de:	0c 15       	cp	r16, r12
     8e0:	1d 05       	cpc	r17, r13
     8e2:	dc f2       	brlt	.-74     	; 0x89a <GSM_Response+0x68>
     8e4:	8f ec       	ldi	r24, 0xCF	; 207
     8e6:	97 e0       	ldi	r25, 0x07	; 7
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <GSM_Response+0xb6>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <GSM_Response+0xbc>
     8ee:	00 00       	nop

			}
			
		}
		_delay_ms(1);
		timeout++;
     8f0:	9f ef       	ldi	r25, 0xFF	; 255
     8f2:	e9 1a       	sub	r14, r25
     8f4:	f9 0a       	sbc	r15, r25
	}
     8f6:	ac cf       	rjmp	.-168    	; 0x850 <GSM_Response+0x1e>
	status_flag=0;
}
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	ff 90       	pop	r15
     906:	ef 90       	pop	r14
     908:	df 90       	pop	r13
     90a:	cf 90       	pop	r12
     90c:	bf 90       	pop	r11
     90e:	af 90       	pop	r10
     910:	08 95       	ret

00000912 <GSM_Begin>:
void GSM_Begin()
{

	while(1)
	{
		lcdcmd(0xc0);
     912:	80 ec       	ldi	r24, 0xC0	; 192
     914:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcdcmd>
		USART_SendString("ATE0\r");			/* send ATE0 to check module is ready or not */
     918:	81 e1       	ldi	r24, 0x11	; 17
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_SendString>
     920:	2f ef       	ldi	r18, 0xFF	; 255
     922:	84 e3       	ldi	r24, 0x34	; 52
     924:	9c e0       	ldi	r25, 0x0C	; 12
     926:	21 50       	subi	r18, 0x01	; 1
     928:	80 40       	sbci	r24, 0x00	; 0
     92a:	90 40       	sbci	r25, 0x00	; 0
     92c:	e1 f7       	brne	.-8      	; 0x926 <GSM_Begin+0x14>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <GSM_Begin+0x1e>
     930:	00 00       	nop
		_delay_ms(500);
		if(strstr(buff,"OK"))
     932:	67 e1       	ldi	r22, 0x17	; 23
     934:	71 e0       	ldi	r23, 0x01	; 1
     936:	88 e2       	ldi	r24, 0x28	; 40
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <strstr>
     93e:	89 2b       	or	r24, r25
     940:	61 f1       	breq	.+88     	; 0x99a <GSM_Begin+0x88>
		{
			GSM_Response();                 /* get Response */
     942:	0e 94 19 04 	call	0x832	; 0x832 <GSM_Response>
			memset(buff,0,160);
     946:	80 ea       	ldi	r24, 0xA0	; 160
     948:	e8 e2       	ldi	r30, 0x28	; 40
     94a:	f2 e0       	ldi	r31, 0x02	; 2
     94c:	df 01       	movw	r26, r30
     94e:	1d 92       	st	X+, r1
     950:	8a 95       	dec	r24
     952:	e9 f7       	brne	.-6      	; 0x94e <GSM_Begin+0x3c>
     954:	bf ef       	ldi	r27, 0xFF	; 255
     956:	29 e6       	ldi	r18, 0x69	; 105
     958:	88 e1       	ldi	r24, 0x18	; 24
     95a:	b1 50       	subi	r27, 0x01	; 1
     95c:	20 40       	sbci	r18, 0x00	; 0
     95e:	80 40       	sbci	r24, 0x00	; 0
     960:	e1 f7       	brne	.-8      	; 0x95a <GSM_Begin+0x48>
     962:	00 c0       	rjmp	.+0      	; 0x964 <GSM_Begin+0x52>
     964:	00 00       	nop
			lcd_string("error",5);
		}
	}
	_delay_ms(1000);

	lcd_clear();
     966:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_clear>
	lcd_string("Text Mode",9);
     96a:	69 e0       	ldi	r22, 0x09	; 9
     96c:	8a e1       	ldi	r24, 0x1A	; 26
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
	lcdcmd(0xc0);
     974:	80 ec       	ldi	r24, 0xC0	; 192
     976:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcdcmd>
	USART_SendString("AT+CMGF=1\r");/* select message format as text */
     97a:	84 e2       	ldi	r24, 0x24	; 36
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_SendString>
	GSM_Response();
     982:	0e 94 19 04 	call	0x832	; 0x832 <GSM_Response>
     986:	9f ef       	ldi	r25, 0xFF	; 255
     988:	a9 e6       	ldi	r26, 0x69	; 105
     98a:	b8 e1       	ldi	r27, 0x18	; 24
     98c:	91 50       	subi	r25, 0x01	; 1
     98e:	a0 40       	sbci	r26, 0x00	; 0
     990:	b0 40       	sbci	r27, 0x00	; 0
     992:	e1 f7       	brne	.-8      	; 0x98c <GSM_Begin+0x7a>
     994:	00 c0       	rjmp	.+0      	; 0x996 <GSM_Begin+0x84>
     996:	00 00       	nop
	_delay_ms(1000);
}
     998:	08 95       	ret
			memset(buff,0,160);
			break;
		}
		else
		{
			lcd_string("error",5);
     99a:	65 e0       	ldi	r22, 0x05	; 5
     99c:	8f e2       	ldi	r24, 0x2F	; 47
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
		}
	}
     9a4:	b6 cf       	rjmp	.-148    	; 0x912 <GSM_Begin>

000009a6 <displayKey>:




int displayKey()
{
     9a6:	4f 92       	push	r4
     9a8:	5f 92       	push	r5
     9aa:	6f 92       	push	r6
     9ac:	7f 92       	push	r7
     9ae:	8f 92       	push	r8
     9b0:	9f 92       	push	r9
     9b2:	af 92       	push	r10
     9b4:	bf 92       	push	r11
     9b6:	cf 92       	push	r12
     9b8:	df 92       	push	r13
     9ba:	ef 92       	push	r14
     9bc:	ff 92       	push	r15
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	64 97       	sbiw	r28, 0x14	; 20
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	cd bf       	out	0x3d, r28	; 61
	int tmpNum;
	int data[10];
	int i = 0;
     9d6:	00 e0       	ldi	r16, 0x00	; 0
     9d8:	10 e0       	ldi	r17, 0x00	; 0
	int num = 0;
	while(1)
	{
		key=scankey();
     9da:	0e 94 c5 01 	call	0x38a	; 0x38a <scankey>
     9de:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <key>
		lcddata(key);
     9e2:	0e 94 21 01 	call	0x242	; 0x242 <lcddata>
		if(key == '#') break;
     9e6:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <key>
     9ea:	83 32       	cpi	r24, 0x23	; 35
     9ec:	c9 f0       	breq	.+50     	; 0xa20 <displayKey+0x7a>
		tmpNum = charToInt(key);
     9ee:	0e 94 4f 01 	call	0x29e	; 0x29e <charToInt>
		data[i] = tmpNum;
     9f2:	f8 01       	movw	r30, r16
     9f4:	ee 0f       	add	r30, r30
     9f6:	ff 1f       	adc	r31, r31
     9f8:	21 e0       	ldi	r18, 0x01	; 1
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	2c 0f       	add	r18, r28
     9fe:	3d 1f       	adc	r19, r29
     a00:	e2 0f       	add	r30, r18
     a02:	f3 1f       	adc	r31, r19
     a04:	91 83       	std	Z+1, r25	; 0x01
     a06:	80 83       	st	Z, r24
		i++;
     a08:	0f 5f       	subi	r16, 0xFF	; 255
     a0a:	1f 4f       	sbci	r17, 0xFF	; 255
     a0c:	3f ef       	ldi	r19, 0xFF	; 255
     a0e:	82 e5       	ldi	r24, 0x52	; 82
     a10:	97 e0       	ldi	r25, 0x07	; 7
     a12:	31 50       	subi	r19, 0x01	; 1
     a14:	80 40       	sbci	r24, 0x00	; 0
     a16:	90 40       	sbci	r25, 0x00	; 0
     a18:	e1 f7       	brne	.-8      	; 0xa12 <displayKey+0x6c>
     a1a:	00 c0       	rjmp	.+0      	; 0xa1c <displayKey+0x76>
     a1c:	00 00       	nop
     a1e:	dd cf       	rjmp	.-70     	; 0x9da <displayKey+0x34>
		_delay_ms(300);
	}
	int k = i-1;
     a20:	58 01       	movw	r10, r16
     a22:	21 e0       	ldi	r18, 0x01	; 1
     a24:	a2 1a       	sub	r10, r18
     a26:	b1 08       	sbc	r11, r1
	
	for(int j=0;i>j;j++){
     a28:	e1 2c       	mov	r14, r1
     a2a:	f1 2c       	mov	r15, r1
int displayKey()
{
	int tmpNum;
	int data[10];
	int i = 0;
	int num = 0;
     a2c:	81 2c       	mov	r8, r1
     a2e:	91 2c       	mov	r9, r1
		i++;
		_delay_ms(300);
	}
	int k = i-1;
	
	for(int j=0;i>j;j++){
     a30:	3b c0       	rjmp	.+118    	; 0xaa8 <displayKey+0x102>
		num += data[j]*pow(10,k);
     a32:	f7 01       	movw	r30, r14
     a34:	ee 0f       	add	r30, r30
     a36:	ff 1f       	adc	r31, r31
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	8c 0f       	add	r24, r28
     a3e:	9d 1f       	adc	r25, r29
     a40:	e8 0f       	add	r30, r24
     a42:	f9 1f       	adc	r31, r25
     a44:	c0 80       	ld	r12, Z
     a46:	d1 80       	ldd	r13, Z+1	; 0x01
     a48:	b5 01       	movw	r22, r10
     a4a:	0b 2c       	mov	r0, r11
     a4c:	00 0c       	add	r0, r0
     a4e:	88 0b       	sbc	r24, r24
     a50:	99 0b       	sbc	r25, r25
     a52:	0e 94 96 09 	call	0x132c	; 0x132c <__floatsisf>
     a56:	9b 01       	movw	r18, r22
     a58:	ac 01       	movw	r20, r24
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	80 e2       	ldi	r24, 0x20	; 32
     a60:	91 e4       	ldi	r25, 0x41	; 65
     a62:	0e 94 8f 0a 	call	0x151e	; 0x151e <pow>
     a66:	2b 01       	movw	r4, r22
     a68:	3c 01       	movw	r6, r24
     a6a:	b6 01       	movw	r22, r12
     a6c:	dd 0c       	add	r13, r13
     a6e:	88 0b       	sbc	r24, r24
     a70:	99 0b       	sbc	r25, r25
     a72:	0e 94 96 09 	call	0x132c	; 0x132c <__floatsisf>
     a76:	a3 01       	movw	r20, r6
     a78:	92 01       	movw	r18, r4
     a7a:	0e 94 22 0a 	call	0x1444	; 0x1444 <__mulsf3>
     a7e:	2b 01       	movw	r4, r22
     a80:	3c 01       	movw	r6, r24
     a82:	b4 01       	movw	r22, r8
     a84:	99 0c       	add	r9, r9
     a86:	88 0b       	sbc	r24, r24
     a88:	99 0b       	sbc	r25, r25
     a8a:	0e 94 96 09 	call	0x132c	; 0x132c <__floatsisf>
     a8e:	a3 01       	movw	r20, r6
     a90:	92 01       	movw	r18, r4
     a92:	0e 94 80 08 	call	0x1100	; 0x1100 <__addsf3>
     a96:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixsfsi>
     a9a:	4b 01       	movw	r8, r22
		k--;
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	a9 1a       	sub	r10, r25
     aa0:	b1 08       	sbc	r11, r1
		i++;
		_delay_ms(300);
	}
	int k = i-1;
	
	for(int j=0;i>j;j++){
     aa2:	2f ef       	ldi	r18, 0xFF	; 255
     aa4:	e2 1a       	sub	r14, r18
     aa6:	f2 0a       	sbc	r15, r18
     aa8:	e0 16       	cp	r14, r16
     aaa:	f1 06       	cpc	r15, r17
     aac:	14 f2       	brlt	.-124    	; 0xa32 <displayKey+0x8c>
		num += data[j]*pow(10,k);
		k--;
	}
	
	lcdcmd(0x01);
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcdcmd>
	
	return num;
}
     ab4:	c4 01       	movw	r24, r8
     ab6:	64 96       	adiw	r28, 0x14	; 20
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	cd bf       	out	0x3d, r28	; 61
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	df 90       	pop	r13
     ad0:	cf 90       	pop	r12
     ad2:	bf 90       	pop	r11
     ad4:	af 90       	pop	r10
     ad6:	9f 90       	pop	r9
     ad8:	8f 90       	pop	r8
     ada:	7f 90       	pop	r7
     adc:	6f 90       	pop	r6
     ade:	5f 90       	pop	r5
     ae0:	4f 90       	pop	r4
     ae2:	08 95       	ret

00000ae4 <ldrconfig>:


int ldrconfig()
{
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	2a 97       	sbiw	r28, 0x0a	; 10
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
	float i, ldr, temp;
	char buffer[10];
	//DDRC = 0x01;           // to connect led to PC0
	
	// initialize adc and lcd
	adc_init();
     af8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <adc_init>
	lcd_clear();
     afc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_clear>
     b00:	8f e0       	ldi	r24, 0x0F	; 15
     b02:	97 e2       	ldi	r25, 0x27	; 39
     b04:	01 97       	sbiw	r24, 0x01	; 1
     b06:	f1 f7       	brne	.-4      	; 0xb04 <ldrconfig+0x20>
     b08:	00 c0       	rjmp	.+0      	; 0xb0a <ldrconfig+0x26>
     b0a:	00 00       	nop
	
	_delay_ms(5);
	
	while(1)
	{
		adc_result0 = adc_read(0);
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	0e 94 ed 02 	call	0x5da	; 0x5da <adc_read>
		i=(adc_result0*0.01/2.1);
     b12:	bc 01       	movw	r22, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 94 09 	call	0x1328	; 0x1328 <__floatunsisf>
     b1c:	2a e0       	ldi	r18, 0x0A	; 10
     b1e:	37 ed       	ldi	r19, 0xD7	; 215
     b20:	43 e2       	ldi	r20, 0x23	; 35
     b22:	5c e3       	ldi	r21, 0x3C	; 60
     b24:	0e 94 22 0a 	call	0x1444	; 0x1444 <__mulsf3>
     b28:	26 e6       	ldi	r18, 0x66	; 102
     b2a:	36 e6       	ldi	r19, 0x66	; 102
     b2c:	46 e0       	ldi	r20, 0x06	; 6
     b2e:	50 e4       	ldi	r21, 0x40	; 64
     b30:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__divsf3>
     b34:	6b 01       	movw	r12, r22
     b36:	7c 01       	movw	r14, r24
		ldr = (i*10.0/(5.0-i));     // read adc value at PA0
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	40 e2       	ldi	r20, 0x20	; 32
     b3e:	51 e4       	ldi	r21, 0x41	; 65
     b40:	0e 94 22 0a 	call	0x1444	; 0x1444 <__mulsf3>
     b44:	4b 01       	movw	r8, r22
     b46:	5c 01       	movw	r10, r24
     b48:	a7 01       	movw	r20, r14
     b4a:	96 01       	movw	r18, r12
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	80 ea       	ldi	r24, 0xA0	; 160
     b52:	90 e4       	ldi	r25, 0x40	; 64
     b54:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__subsf3>
     b58:	9b 01       	movw	r18, r22
     b5a:	ac 01       	movw	r20, r24
     b5c:	c5 01       	movw	r24, r10
     b5e:	b4 01       	movw	r22, r8
     b60:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__divsf3>
     b64:	6b 01       	movw	r12, r22
     b66:	7c 01       	movw	r14, r24
		

		//i=(adc_result0*0.01/2.1);
		//ldr = (i*10/(5-i));
		
		lcd_line_one();
     b68:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_line_one>
		lcd_string("LDR VAL:",9);
     b6c:	69 e0       	ldi	r22, 0x09	; 9
     b6e:	85 e3       	ldi	r24, 0x35	; 53
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
		itoa(ldr,buffer,10);   //display ADC value
     b76:	c7 01       	movw	r24, r14
     b78:	b6 01       	movw	r22, r12
     b7a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixsfsi>
     b7e:	dc 01       	movw	r26, r24
     b80:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b82:	4a e0       	ldi	r20, 0x0A	; 10
     b84:	be 01       	movw	r22, r28
     b86:	6f 5f       	subi	r22, 0xFF	; 255
     b88:	7f 4f       	sbci	r23, 0xFF	; 255
     b8a:	0e 94 8f 0c 	call	0x191e	; 0x191e <__itoa_ncheck>
		lcd_string(buffer,5);
     b8e:	65 e0       	ldi	r22, 0x05	; 5
     b90:	ce 01       	movw	r24, r28
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
     b98:	8f e1       	ldi	r24, 0x1F	; 31
     b9a:	9e e4       	ldi	r25, 0x4E	; 78
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <ldrconfig+0xb8>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <ldrconfig+0xbe>
     ba2:	00 00       	nop
     ba4:	b3 cf       	rjmp	.-154    	; 0xb0c <ldrconfig+0x28>

00000ba6 <get_plantcount>:
		}
		*/
	}
}

void get_plantcount(){
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	2a 97       	sbiw	r28, 0x0a	; 10
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
	lcd_clear();
     bbe:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_clear>
	lcd_line_one();
     bc2:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_line_one>
	lcd_string("ENTER PLANT",11);
     bc6:	6b e0       	ldi	r22, 0x0B	; 11
     bc8:	8e e3       	ldi	r24, 0x3E	; 62
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
	lcd_line_two();
     bd0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_line_two>
	lcd_string("COUNT: ",7);
     bd4:	67 e0       	ldi	r22, 0x07	; 7
     bd6:	8a e4       	ldi	r24, 0x4A	; 74
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
	key = scankey();
     bde:	0e 94 c5 01 	call	0x38a	; 0x38a <scankey>
     be2:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <key>
	//if(key == '*') break;
	int plantCount = displayKey();
     be6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <displayKey>
	
	char text[10];
	sprintf(text, "%d", plantCount);
     bea:	9f 93       	push	r25
     bec:	8f 93       	push	r24
     bee:	82 e5       	ldi	r24, 0x52	; 82
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	9f 93       	push	r25
     bf4:	8f 93       	push	r24
     bf6:	8e 01       	movw	r16, r28
     bf8:	0f 5f       	subi	r16, 0xFF	; 255
     bfa:	1f 4f       	sbci	r17, 0xFF	; 255
     bfc:	1f 93       	push	r17
     bfe:	0f 93       	push	r16
     c00:	0e 94 b4 0c 	call	0x1968	; 0x1968 <sprintf>
	
	lcdcmd(0x01);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcdcmd>
	lcd_string("PLANT COUNT IS",15);
     c0a:	6f e0       	ldi	r22, 0x0F	; 15
     c0c:	85 e5       	ldi	r24, 0x55	; 85
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
	lcdcmd(0xC0);
     c14:	80 ec       	ldi	r24, 0xC0	; 192
     c16:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcdcmd>
	lcd_string(text,10);
     c1a:	6a e0       	ldi	r22, 0x0A	; 10
     c1c:	c8 01       	movw	r24, r16
     c1e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
     c22:	2f ef       	ldi	r18, 0xFF	; 255
     c24:	89 e6       	ldi	r24, 0x69	; 105
     c26:	98 e1       	ldi	r25, 0x18	; 24
     c28:	21 50       	subi	r18, 0x01	; 1
     c2a:	80 40       	sbci	r24, 0x00	; 0
     c2c:	90 40       	sbci	r25, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <get_plantcount+0x82>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <get_plantcount+0x8c>
     c32:	00 00       	nop
	_delay_ms(1000);
}
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	2a 96       	adiw	r28, 0x0a	; 10
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	08 95       	ret

00000c56 <water_level>:

void water_level(){
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <water_level+0x6>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <water_level+0x8>
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	2f ef       	ldi	r18, 0xFF	; 255
     c64:	80 e7       	ldi	r24, 0x70	; 112
     c66:	92 e0       	ldi	r25, 0x02	; 2
     c68:	21 50       	subi	r18, 0x01	; 1
     c6a:	80 40       	sbci	r24, 0x00	; 0
     c6c:	90 40       	sbci	r25, 0x00	; 0
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <water_level+0x12>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <water_level+0x1c>
     c72:	00 00       	nop
		
		uint16_t r;
		
		_delay_ms(100);

		lcd_clear();
     c74:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_clear>
		
		
		HCSR04Init();
     c78:	0e 94 cc 01 	call	0x398	; 0x398 <HCSR04Init>

		while(1)
		{
			HCSR04Trigger();
     c7c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <HCSR04Trigger>
			r=GetPulseWidth();
     c80:	0e 94 da 01 	call	0x3b4	; 0x3b4 <GetPulseWidth>
			if(r==US_ERROR)
     c84:	6f 3f       	cpi	r22, 0xFF	; 255
     c86:	2f ef       	ldi	r18, 0xFF	; 255
     c88:	72 07       	cpc	r23, r18
     c8a:	89 f4       	brne	.+34     	; 0xcae <water_level+0x58>
			{
				lcd_clear();
     c8c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_clear>
				lcd_string("E!",2);
     c90:	62 e0       	ldi	r22, 0x02	; 2
     c92:	83 ec       	ldi	r24, 0xC3	; 195
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	99 e6       	ldi	r25, 0x69	; 105
     c9e:	28 e1       	ldi	r18, 0x18	; 24
     ca0:	81 50       	subi	r24, 0x01	; 1
     ca2:	90 40       	sbci	r25, 0x00	; 0
     ca4:	20 40       	sbci	r18, 0x00	; 0
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <water_level+0x4a>
     ca8:	00 c0       	rjmp	.+0      	; 0xcaa <water_level+0x54>
     caa:	00 00       	nop
     cac:	e7 cf       	rjmp	.-50     	; 0xc7c <water_level+0x26>
				
			}
			else
			{
				
				distance=50-(r*0.034/2.0);
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 94 09 	call	0x1328	; 0x1328 <__floatunsisf>
     cb6:	26 e9       	ldi	r18, 0x96	; 150
     cb8:	33 e4       	ldi	r19, 0x43	; 67
     cba:	4b e0       	ldi	r20, 0x0B	; 11
     cbc:	5d e3       	ldi	r21, 0x3D	; 61
     cbe:	0e 94 22 0a 	call	0x1444	; 0x1444 <__mulsf3>
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	5f e3       	ldi	r21, 0x3F	; 63
     cca:	0e 94 22 0a 	call	0x1444	; 0x1444 <__mulsf3>
     cce:	9b 01       	movw	r18, r22
     cd0:	ac 01       	movw	r20, r24
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	88 e4       	ldi	r24, 0x48	; 72
     cd8:	92 e4       	ldi	r25, 0x42	; 66
     cda:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__subsf3>
     cde:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixsfsi>
     ce2:	70 93 c9 02 	sts	0x02C9, r23	; 0x8002c9 <distance+0x1>
     ce6:	60 93 c8 02 	sts	0x02C8, r22	; 0x8002c8 <distance>
				
				
				
				if (distance != previous_distance)
     cea:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <previous_distance>
     cee:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <previous_distance+0x1>
     cf2:	26 17       	cp	r18, r22
     cf4:	37 07       	cpc	r19, r23
     cf6:	11 f0       	breq	.+4      	; 0xcfc <water_level+0xa6>
				{
					lcd_clear();
     cf8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_clear>
				}
				
				
				
				lcd_line_one();
     cfc:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_line_one>
				lcd_string("WATER LV =",11);
     d00:	6b e0       	ldi	r22, 0x0B	; 11
     d02:	84 e6       	ldi	r24, 0x64	; 100
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
     d0a:	4a e0       	ldi	r20, 0x0A	; 10
     d0c:	be 01       	movw	r22, r28
     d0e:	6f 5f       	subi	r22, 0xFF	; 255
     d10:	7f 4f       	sbci	r23, 0xFF	; 255
     d12:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <distance>
     d16:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <distance+0x1>
     d1a:	0e 94 8f 0c 	call	0x191e	; 0x191e <__itoa_ncheck>
				
				itoa(distance, numberString, 10);
				lcd_string(numberString,3);
     d1e:	63 e0       	ldi	r22, 0x03	; 3
     d20:	ce 01       	movw	r24, r28
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>

				lcd_string("cm",2);
     d28:	62 e0       	ldi	r22, 0x02	; 2
     d2a:	8f e6       	ldi	r24, 0x6F	; 111
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
				
				
				previous_distance = distance;
     d32:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <distance>
     d36:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <distance+0x1>
     d3a:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <previous_distance+0x1>
     d3e:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <previous_distance>
     d42:	8f e5       	ldi	r24, 0x5F	; 95
     d44:	9a ee       	ldi	r25, 0xEA	; 234
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <water_level+0xf0>
     d4a:	00 c0       	rjmp	.+0      	; 0xd4c <water_level+0xf6>
     d4c:	00 00       	nop
				_delay_ms(30);
				
				if(distance<10)
     d4e:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <distance>
     d52:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <distance+0x1>
     d56:	0a 97       	sbiw	r24, 0x0a	; 10
     d58:	3c f4       	brge	.+14     	; 0xd68 <water_level+0x112>
				{
					lcd_line_two();
     d5a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_line_two>
					lcd_string("WATER LOW!!!",13);
     d5e:	6d e0       	ldi	r22, 0x0D	; 13
     d60:	82 e7       	ldi	r24, 0x72	; 114
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
					// PORTA=(1<<PINA0);
					
				}
				if(distance>=10)
     d68:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <distance>
     d6c:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <distance+0x1>
     d70:	0a 97       	sbiw	r24, 0x0a	; 10
     d72:	3c f0       	brlt	.+14     	; 0xd82 <water_level+0x12c>
				{
					lcd_line_two();
     d74:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_line_two>
					lcd_string("ENOUGH WATER",12);
     d78:	6c e0       	ldi	r22, 0x0C	; 12
     d7a:	8f e7       	ldi	r24, 0x7F	; 127
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
					// PORTA=(0<<PINA0);
					
				}
				key = scankey();
     d82:	0e 94 c5 01 	call	0x38a	; 0x38a <scankey>
     d86:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <key>
				if(key == '*') break;
     d8a:	8a 32       	cpi	r24, 0x2A	; 42
     d8c:	51 f0       	breq	.+20     	; 0xda2 <water_level+0x14c>
     d8e:	9f ef       	ldi	r25, 0xFF	; 255
     d90:	2b e4       	ldi	r18, 0x4B	; 75
     d92:	8d e1       	ldi	r24, 0x1D	; 29
     d94:	91 50       	subi	r25, 0x01	; 1
     d96:	20 40       	sbci	r18, 0x00	; 0
     d98:	80 40       	sbci	r24, 0x00	; 0
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <water_level+0x13e>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <water_level+0x148>
     d9e:	00 00       	nop
     da0:	6d cf       	rjmp	.-294    	; 0xc7c <water_level+0x26>
				_delay_ms(1200);
				
			}
		}
		
		if(key == '*') break;
     da2:	8a 32       	cpi	r24, 0x2A	; 42
     da4:	09 f0       	breq	.+2      	; 0xda8 <water_level+0x152>
     da6:	5d cf       	rjmp	.-326    	; 0xc62 <water_level+0xc>
	}
}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	08 95       	ret

00000db6 <dht11_output>:

void dht11_output(){
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	00 d0       	rcall	.+0      	; 0xdbc <dht11_output+0x6>
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <dht11_output+0x8>
     dbe:	1f 92       	push	r1
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
	
	char data[5];
	DDRE=0xff;
     dc4:	8f ef       	ldi	r24, 0xFF	; 255
     dc6:	82 b9       	out	0x02, r24	; 2
	while(1)
	{
		lcd_clear();				/* clear LCD */
     dc8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_clear>
		lcd_line_one();		/* enter column and row position */
     dcc:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_line_one>
		Request();				/* send start pulse */
     dd0:	0e 94 ac 02 	call	0x558	; 0x558 <Request>
		Response();				/* receive response */
     dd4:	0e 94 bc 02 	call	0x578	; 0x578 <Response>
		I_RH=Receive_data();	/* store first eight bit in I_RH */
     dd8:	0e 94 c6 02 	call	0x58c	; 0x58c <Receive_data>
     ddc:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <I_RH>
		D_RH=Receive_data();	/* store next eight bit in D_RH */
     de0:	0e 94 c6 02 	call	0x58c	; 0x58c <Receive_data>
     de4:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <D_RH>
		I_Temp=Receive_data();	/* store next eight bit in I_Temp */
     de8:	0e 94 c6 02 	call	0x58c	; 0x58c <Receive_data>
     dec:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <I_Temp>
		D_Temp=Receive_data();	/* store next eight bit in D_Temp */
     df0:	0e 94 c6 02 	call	0x58c	; 0x58c <Receive_data>
     df4:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <D_Temp>
		CheckSum=Receive_data();/* store next eight bit in CheckSum */
     df8:	0e 94 c6 02 	call	0x58c	; 0x58c <Receive_data>
     dfc:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <CheckSum>
		
		if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
     e00:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <I_RH>
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <D_RH>
     e0a:	9f 01       	movw	r18, r30
     e0c:	29 0f       	add	r18, r25
     e0e:	31 1d       	adc	r19, r1
     e10:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <I_Temp>
     e14:	29 0f       	add	r18, r25
     e16:	31 1d       	adc	r19, r1
     e18:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <D_Temp>
     e1c:	29 0f       	add	r18, r25
     e1e:	31 1d       	adc	r19, r1
     e20:	48 2f       	mov	r20, r24
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	24 17       	cp	r18, r20
     e26:	35 07       	cpc	r19, r21
     e28:	31 f0       	breq	.+12     	; 0xe36 <dht11_output+0x80>
		{
			//lcd_gotoxy(0,0);
			lcd_string("Error",5);
     e2a:	65 e0       	ldi	r22, 0x05	; 5
     e2c:	8c e8       	ldi	r24, 0x8C	; 140
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
     e34:	59 c0       	rjmp	.+178    	; 0xee8 <dht11_output+0x132>
     e36:	4a e0       	ldi	r20, 0x0A	; 10
     e38:	be 01       	movw	r22, r28
     e3a:	6f 5f       	subi	r22, 0xFF	; 255
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	cf 01       	movw	r24, r30
     e40:	0e 94 8f 0c 	call	0x191e	; 0x191e <__itoa_ncheck>
		
		else
		{
			itoa(I_RH,data,10);
			//lcd_gotoxy(2,0);
			lcd_string("H=",2);
     e44:	62 e0       	ldi	r22, 0x02	; 2
     e46:	82 e9       	ldi	r24, 0x92	; 146
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
			lcd_string(data,2);
     e4e:	62 e0       	ldi	r22, 0x02	; 2
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
			lcd_string(".",1);
     e58:	61 e0       	ldi	r22, 0x01	; 1
     e5a:	85 e9       	ldi	r24, 0x95	; 149
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
			
			itoa(D_RH,data,10);
     e62:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <D_RH>
     e66:	4a e0       	ldi	r20, 0x0A	; 10
     e68:	be 01       	movw	r22, r28
     e6a:	6f 5f       	subi	r22, 0xFF	; 255
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 8f 0c 	call	0x191e	; 0x191e <__itoa_ncheck>
						
			lcd_string(data,2);
     e74:	62 e0       	ldi	r22, 0x02	; 2
     e76:	ce 01       	movw	r24, r28
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
			lcd_string("%",1);
     e7e:	61 e0       	ldi	r22, 0x01	; 1
     e80:	87 e9       	ldi	r24, 0x97	; 151
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>

						
			itoa(I_Temp,data,10);
     e88:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <I_Temp>
     e8c:	4a e0       	ldi	r20, 0x0A	; 10
     e8e:	be 01       	movw	r22, r28
     e90:	6f 5f       	subi	r22, 0xFF	; 255
     e92:	7f 4f       	sbci	r23, 0xFF	; 255
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 8f 0c 	call	0x191e	; 0x191e <__itoa_ncheck>
			//lcd_gotoxy(10,0);
			lcd_string("T=",2);
     e9a:	62 e0       	ldi	r22, 0x02	; 2
     e9c:	89 e9       	ldi	r24, 0x99	; 153
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
			lcd_string(data,2);
     ea4:	62 e0       	ldi	r22, 0x02	; 2
     ea6:	ce 01       	movw	r24, r28
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
			lcd_string(".",1);
     eae:	61 e0       	ldi	r22, 0x01	; 1
     eb0:	85 e9       	ldi	r24, 0x95	; 149
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
			
			itoa(D_Temp,data,10);
     eb8:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <D_Temp>
     ebc:	4a e0       	ldi	r20, 0x0A	; 10
     ebe:	be 01       	movw	r22, r28
     ec0:	6f 5f       	subi	r22, 0xFF	; 255
     ec2:	7f 4f       	sbci	r23, 0xFF	; 255
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 8f 0c 	call	0x191e	; 0x191e <__itoa_ncheck>
			lcd_string(data,2);
     eca:	62 e0       	ldi	r22, 0x02	; 2
     ecc:	ce 01       	movw	r24, r28
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
			lcddata(0xDF);
     ed4:	8f ed       	ldi	r24, 0xDF	; 223
     ed6:	0e 94 21 01 	call	0x242	; 0x242 <lcddata>
			lcd_string("C ",2);
     eda:	62 e0       	ldi	r22, 0x02	; 2
     edc:	8c e9       	ldi	r24, 0x9C	; 156
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
						
			lcd_line_two();
     ee4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_line_two>
     ee8:	2f ef       	ldi	r18, 0xFF	; 255
     eea:	84 e3       	ldi	r24, 0x34	; 52
     eec:	9c e0       	ldi	r25, 0x0C	; 12
     eee:	21 50       	subi	r18, 0x01	; 1
     ef0:	80 40       	sbci	r24, 0x00	; 0
     ef2:	90 40       	sbci	r25, 0x00	; 0
     ef4:	e1 f7       	brne	.-8      	; 0xeee <dht11_output+0x138>
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <dht11_output+0x142>
     ef8:	00 00       	nop
			lcd_print(" ");*/
		}
		
		_delay_ms(500);
		
		if ((I_Temp + D_Temp) <= 24)
     efa:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <I_Temp>
     efe:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <D_Temp>
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	82 0f       	add	r24, r18
     f06:	91 1d       	adc	r25, r1
     f08:	49 97       	sbiw	r24, 0x19	; 25
     f0a:	2c f4       	brge	.+10     	; 0xf16 <dht11_output+0x160>
		{
			lcd_string("H ON  ",6);
     f0c:	66 e0       	ldi	r22, 0x06	; 6
     f0e:	8f e9       	ldi	r24, 0x9F	; 159
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
			
			//DDRB |= (1<<0);
			
			
		}
		if ((I_Temp + D_Temp) >= 30)
     f16:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <I_Temp>
     f1a:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <D_Temp>
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	82 0f       	add	r24, r18
     f22:	91 1d       	adc	r25, r1
     f24:	4e 97       	sbiw	r24, 0x1e	; 30
     f26:	2c f0       	brlt	.+10     	; 0xf32 <dht11_output+0x17c>
		{
			
			
			//lcd_gotoxy(5,1);
			lcd_string("FA ON  ",7);
     f28:	67 e0       	ldi	r22, 0x07	; 7
     f2a:	86 ea       	ldi	r24, 0xA6	; 166
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
			//PORTB=(1<<PINB1);
			//PORTC=(1<<PINC0);
			//DDRB |= (1<<1);
			
		}
		if ((I_RH + D_RH ) <=75)
     f32:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <I_RH>
     f36:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <D_RH>
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	82 0f       	add	r24, r18
     f3e:	91 1d       	adc	r25, r1
     f40:	8c 34       	cpi	r24, 0x4C	; 76
     f42:	91 05       	cpc	r25, r1
     f44:	2c f4       	brge	.+10     	; 0xf50 <dht11_output+0x19a>
		{
			
			//lcd_gotoxy(11,1);
			lcd_string("FO ON  ",7);
     f46:	67 e0       	ldi	r22, 0x07	; 7
     f48:	8e ea       	ldi	r24, 0xAE	; 174
     f4a:	91 e0       	ldi	r25, 0x01	; 1
     f4c:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
     f50:	2f ef       	ldi	r18, 0xFF	; 255
     f52:	80 e7       	ldi	r24, 0x70	; 112
     f54:	92 e0       	ldi	r25, 0x02	; 2
     f56:	21 50       	subi	r18, 0x01	; 1
     f58:	80 40       	sbci	r24, 0x00	; 0
     f5a:	90 40       	sbci	r25, 0x00	; 0
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <dht11_output+0x1a0>
     f5e:	00 c0       	rjmp	.+0      	; 0xf60 <dht11_output+0x1aa>
     f60:	00 00       	nop
			PORTE=(0<<PINE0);

			
		}*/
		_delay_ms(100);
		key = scankey();
     f62:	0e 94 c5 01 	call	0x38a	; 0x38a <scankey>
     f66:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <key>
		if(key == '*') break;
     f6a:	8a 32       	cpi	r24, 0x2A	; 42
     f6c:	51 f0       	breq	.+20     	; 0xf82 <dht11_output+0x1cc>
     f6e:	2f ef       	ldi	r18, 0xFF	; 255
     f70:	8b e4       	ldi	r24, 0x4B	; 75
     f72:	9d e1       	ldi	r25, 0x1D	; 29
     f74:	21 50       	subi	r18, 0x01	; 1
     f76:	80 40       	sbci	r24, 0x00	; 0
     f78:	90 40       	sbci	r25, 0x00	; 0
     f7a:	e1 f7       	brne	.-8      	; 0xf74 <dht11_output+0x1be>
     f7c:	00 c0       	rjmp	.+0      	; 0xf7e <dht11_output+0x1c8>
     f7e:	00 00       	nop
     f80:	23 cf       	rjmp	.-442    	; 0xdc8 <dht11_output+0x12>
		_delay_ms(1200);
		
	}
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret

00000f92 <main>:

int main(void)

{

	DDRA=0xff;
     f92:	8f ef       	ldi	r24, 0xFF	; 255
     f94:	8a bb       	out	0x1a, r24	; 26

	DDRB=0x07;
     f96:	87 e0       	ldi	r24, 0x07	; 7
     f98:	87 bb       	out	0x17, r24	; 23

	DDRD=0xf0;
     f9a:	80 ef       	ldi	r24, 0xF0	; 240
     f9c:	81 bb       	out	0x11, r24	; 17

	char key;
	

	lcdint();
     f9e:	0e 94 05 01 	call	0x20a	; 0x20a <lcdint>
	
	lcd_string("HELLO! WELCOME!",14);
     fa2:	6e e0       	ldi	r22, 0x0E	; 14
     fa4:	86 eb       	ldi	r24, 0xB6	; 182
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
     fac:	2f ef       	ldi	r18, 0xFF	; 255
     fae:	8b e4       	ldi	r24, 0x4B	; 75
     fb0:	9d e1       	ldi	r25, 0x1D	; 29
     fb2:	21 50       	subi	r18, 0x01	; 1
     fb4:	80 40       	sbci	r24, 0x00	; 0
     fb6:	90 40       	sbci	r25, 0x00	; 0
     fb8:	e1 f7       	brne	.-8      	; 0xfb2 <main+0x20>
     fba:	00 c0       	rjmp	.+0      	; 0xfbc <main+0x2a>
     fbc:	00 00       	nop
	_delay_ms(1200);
	lcd_line_two();
     fbe:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_line_two>
	lcd_string("from ~GROUP 06~",16);
     fc2:	60 e1       	ldi	r22, 0x10	; 16
     fc4:	86 ec       	ldi	r24, 0xC6	; 198
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
     fcc:	af ef       	ldi	r26, 0xFF	; 255
     fce:	b9 e6       	ldi	r27, 0x69	; 105
     fd0:	28 e1       	ldi	r18, 0x18	; 24
     fd2:	a1 50       	subi	r26, 0x01	; 1
     fd4:	b0 40       	sbci	r27, 0x00	; 0
     fd6:	20 40       	sbci	r18, 0x00	; 0
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <main+0x40>
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <main+0x4a>
     fdc:	00 00       	nop
	_delay_ms(1000);
	
	lcd_clear();
     fde:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_clear>
	lcd_line_one();
     fe2:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_line_one>
	lcd_string("ENTER 1 TO",10);
     fe6:	6a e0       	ldi	r22, 0x0A	; 10
     fe8:	86 ed       	ldi	r24, 0xD6	; 214
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
	lcd_line_two();
     ff0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_line_two>
	lcd_string("INSTRUCTIONS",12);
     ff4:	6c e0       	ldi	r22, 0x0C	; 12
     ff6:	81 ee       	ldi	r24, 0xE1	; 225
     ff8:	91 e0       	ldi	r25, 0x01	; 1
     ffa:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	9b e4       	ldi	r25, 0x4B	; 75
    1002:	ad e1       	ldi	r26, 0x1D	; 29
    1004:	81 50       	subi	r24, 0x01	; 1
    1006:	90 40       	sbci	r25, 0x00	; 0
    1008:	a0 40       	sbci	r26, 0x00	; 0
    100a:	e1 f7       	brne	.-8      	; 0x1004 <__DATA_REGION_LENGTH__+0x4>
    100c:	00 c0       	rjmp	.+0      	; 0x100e <__DATA_REGION_LENGTH__+0xe>
    100e:	00 00       	nop

	
	while(1)
	{
		
		lcd_clear();
    1010:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_clear>
		lcd_string("ENTER COMMAND:",15);
    1014:	6f e0       	ldi	r22, 0x0F	; 15
    1016:	8e ee       	ldi	r24, 0xEE	; 238
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
		key = scankey();
    101e:	0e 94 c5 01 	call	0x38a	; 0x38a <scankey>

		
		switch(key)
    1022:	83 33       	cpi	r24, 0x33	; 51
    1024:	b9 f0       	breq	.+46     	; 0x1054 <__DATA_REGION_LENGTH__+0x54>
    1026:	28 f4       	brcc	.+10     	; 0x1032 <__DATA_REGION_LENGTH__+0x32>
    1028:	81 33       	cpi	r24, 0x31	; 49
    102a:	49 f0       	breq	.+18     	; 0x103e <__DATA_REGION_LENGTH__+0x3e>
    102c:	82 33       	cpi	r24, 0x32	; 50
    102e:	79 f0       	breq	.+30     	; 0x104e <__DATA_REGION_LENGTH__+0x4e>
    1030:	ef cf       	rjmp	.-34     	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
    1032:	85 33       	cpi	r24, 0x35	; 53
    1034:	a9 f0       	breq	.+42     	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
    1036:	88 f0       	brcs	.+34     	; 0x105a <__DATA_REGION_LENGTH__+0x5a>
    1038:	86 33       	cpi	r24, 0x36	; 54
    103a:	a1 f0       	breq	.+40     	; 0x1064 <__DATA_REGION_LENGTH__+0x64>
    103c:	e9 cf       	rjmp	.-46     	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
		{
			case '1':
				lcd_clear();
    103e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_clear>
				lcd_string("INSTRUCTIONS",12);
    1042:	6c e0       	ldi	r22, 0x0C	; 12
    1044:	81 ee       	ldi	r24, 0xE1	; 225
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
				break;
    104c:	e1 cf       	rjmp	.-62     	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
			case '2':
				get_plantcount();
    104e:	0e 94 d3 05 	call	0xba6	; 0xba6 <get_plantcount>
				break;
    1052:	de cf       	rjmp	.-68     	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
				
			case '3':
				water_level();
    1054:	0e 94 2b 06 	call	0xc56	; 0xc56 <water_level>
			break;		
    1058:	db cf       	rjmp	.-74     	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
			
			case '4':
				dht11_output();
    105a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <dht11_output>
			break;
    105e:	d8 cf       	rjmp	.-80     	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
				
			case '5':
				ldrconfig();
    1060:	0e 94 72 05 	call	0xae4	; 0xae4 <ldrconfig>
			break;
			
			case '6':
				buffer_pointer = 0;
    1064:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <buffer_pointer+0x1>
    1068:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <buffer_pointer>
				int is_msg_arrived;
				memset(message_received, 0, 60);
    106c:	8c e3       	ldi	r24, 0x3C	; 60
    106e:	eb ed       	ldi	r30, 0xDB	; 219
    1070:	f2 e0       	ldi	r31, 0x02	; 2
    1072:	df 01       	movw	r26, r30
    1074:	1d 92       	st	X+, r1
    1076:	8a 95       	dec	r24
    1078:	e9 f7       	brne	.-6      	; 0x1074 <__DATA_REGION_LENGTH__+0x74>
				lcdint();
    107a:	0e 94 05 01 	call	0x20a	; 0x20a <lcdint>
				USART_Init(9600);						    /* initialize USART communication */
    107e:	60 e8       	ldi	r22, 0x80	; 128
    1080:	75 e2       	ldi	r23, 0x25	; 37
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 a6 00 	call	0x14c	; 0x14c <USART_Init>
				sei();
    108a:	78 94       	sei
				lcd_line_one();
    108c:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_line_one>
				lcd_string("GSM Initializing",16);
    1090:	60 e1       	ldi	r22, 0x10	; 16
    1092:	8d ef       	ldi	r24, 0xFD	; 253
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
    109a:	bf ef       	ldi	r27, 0xFF	; 255
    109c:	2d e3       	ldi	r18, 0x3D	; 61
    109e:	89 e4       	ldi	r24, 0x49	; 73
    10a0:	b1 50       	subi	r27, 0x01	; 1
    10a2:	20 40       	sbci	r18, 0x00	; 0
    10a4:	80 40       	sbci	r24, 0x00	; 0
    10a6:	e1 f7       	brne	.-8      	; 0x10a0 <__DATA_REGION_LENGTH__+0xa0>
    10a8:	00 c0       	rjmp	.+0      	; 0x10aa <__DATA_REGION_LENGTH__+0xaa>
    10aa:	00 00       	nop
				_delay_ms(3000);
				lcd_clear();
    10ac:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_clear>
				lcd_string("AT",2);
    10b0:	62 e0       	ldi	r22, 0x02	; 2
    10b2:	8e e0       	ldi	r24, 0x0E	; 14
    10b4:	92 e0       	ldi	r25, 0x02	; 2
    10b6:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
				GSM_Begin();								/* check GSM responses and initialize GSM */
    10ba:	0e 94 89 04 	call	0x912	; 0x912 <GSM_Begin>
				lcd_clear();
    10be:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_clear>
				
				for(int a=0;a<2;a++){
    10c2:	c0 e0       	ldi	r28, 0x00	; 0
    10c4:	d0 e0       	ldi	r29, 0x00	; 0
    10c6:	17 c0       	rjmp	.+46     	; 0x10f6 <__DATA_REGION_LENGTH__+0xf6>
					GSM_Send_Msg("+94773229902","Hi");
    10c8:	61 e1       	ldi	r22, 0x11	; 17
    10ca:	72 e0       	ldi	r23, 0x02	; 2
    10cc:	84 e1       	ldi	r24, 0x14	; 20
    10ce:	92 e0       	ldi	r25, 0x02	; 2
    10d0:	0e 94 20 03 	call	0x640	; 0x640 <GSM_Send_Msg>
					lcd_string("SD",2);
    10d4:	62 e0       	ldi	r22, 0x02	; 2
    10d6:	81 e2       	ldi	r24, 0x21	; 33
    10d8:	92 e0       	ldi	r25, 0x02	; 2
    10da:	0e 94 33 01 	call	0x266	; 0x266 <lcd_string>
    10de:	9f ef       	ldi	r25, 0xFF	; 255
    10e0:	a3 ed       	ldi	r26, 0xD3	; 211
    10e2:	b0 e3       	ldi	r27, 0x30	; 48
    10e4:	91 50       	subi	r25, 0x01	; 1
    10e6:	a0 40       	sbci	r26, 0x00	; 0
    10e8:	b0 40       	sbci	r27, 0x00	; 0
    10ea:	e1 f7       	brne	.-8      	; 0x10e4 <__DATA_REGION_LENGTH__+0xe4>
    10ec:	00 c0       	rjmp	.+0      	; 0x10ee <__DATA_REGION_LENGTH__+0xee>
    10ee:	00 00       	nop
					_delay_ms(2000);
					lcd_clear();
    10f0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_clear>
				lcd_clear();
				lcd_string("AT",2);
				GSM_Begin();								/* check GSM responses and initialize GSM */
				lcd_clear();
				
				for(int a=0;a<2;a++){
    10f4:	21 96       	adiw	r28, 0x01	; 1
    10f6:	c2 30       	cpi	r28, 0x02	; 2
    10f8:	d1 05       	cpc	r29, r1
    10fa:	34 f3       	brlt	.-52     	; 0x10c8 <__DATA_REGION_LENGTH__+0xc8>
    10fc:	89 cf       	rjmp	.-238    	; 0x1010 <__DATA_REGION_LENGTH__+0x10>

000010fe <__subsf3>:
    10fe:	50 58       	subi	r21, 0x80	; 128

00001100 <__addsf3>:
    1100:	bb 27       	eor	r27, r27
    1102:	aa 27       	eor	r26, r26
    1104:	0e 94 97 08 	call	0x112e	; 0x112e <__addsf3x>
    1108:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_round>
    110c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__fp_pscA>
    1110:	38 f0       	brcs	.+14     	; 0x1120 <__addsf3+0x20>
    1112:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fp_pscB>
    1116:	20 f0       	brcs	.+8      	; 0x1120 <__addsf3+0x20>
    1118:	39 f4       	brne	.+14     	; 0x1128 <__addsf3+0x28>
    111a:	9f 3f       	cpi	r25, 0xFF	; 255
    111c:	19 f4       	brne	.+6      	; 0x1124 <__addsf3+0x24>
    111e:	26 f4       	brtc	.+8      	; 0x1128 <__addsf3+0x28>
    1120:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__fp_nan>
    1124:	0e f4       	brtc	.+2      	; 0x1128 <__addsf3+0x28>
    1126:	e0 95       	com	r30
    1128:	e7 fb       	bst	r30, 7
    112a:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__fp_inf>

0000112e <__addsf3x>:
    112e:	e9 2f       	mov	r30, r25
    1130:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fp_split3>
    1134:	58 f3       	brcs	.-42     	; 0x110c <__addsf3+0xc>
    1136:	ba 17       	cp	r27, r26
    1138:	62 07       	cpc	r22, r18
    113a:	73 07       	cpc	r23, r19
    113c:	84 07       	cpc	r24, r20
    113e:	95 07       	cpc	r25, r21
    1140:	20 f0       	brcs	.+8      	; 0x114a <__addsf3x+0x1c>
    1142:	79 f4       	brne	.+30     	; 0x1162 <__addsf3x+0x34>
    1144:	a6 f5       	brtc	.+104    	; 0x11ae <__addsf3x+0x80>
    1146:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__fp_zero>
    114a:	0e f4       	brtc	.+2      	; 0x114e <__addsf3x+0x20>
    114c:	e0 95       	com	r30
    114e:	0b 2e       	mov	r0, r27
    1150:	ba 2f       	mov	r27, r26
    1152:	a0 2d       	mov	r26, r0
    1154:	0b 01       	movw	r0, r22
    1156:	b9 01       	movw	r22, r18
    1158:	90 01       	movw	r18, r0
    115a:	0c 01       	movw	r0, r24
    115c:	ca 01       	movw	r24, r20
    115e:	a0 01       	movw	r20, r0
    1160:	11 24       	eor	r1, r1
    1162:	ff 27       	eor	r31, r31
    1164:	59 1b       	sub	r21, r25
    1166:	99 f0       	breq	.+38     	; 0x118e <__addsf3x+0x60>
    1168:	59 3f       	cpi	r21, 0xF9	; 249
    116a:	50 f4       	brcc	.+20     	; 0x1180 <__addsf3x+0x52>
    116c:	50 3e       	cpi	r21, 0xE0	; 224
    116e:	68 f1       	brcs	.+90     	; 0x11ca <__addsf3x+0x9c>
    1170:	1a 16       	cp	r1, r26
    1172:	f0 40       	sbci	r31, 0x00	; 0
    1174:	a2 2f       	mov	r26, r18
    1176:	23 2f       	mov	r18, r19
    1178:	34 2f       	mov	r19, r20
    117a:	44 27       	eor	r20, r20
    117c:	58 5f       	subi	r21, 0xF8	; 248
    117e:	f3 cf       	rjmp	.-26     	; 0x1166 <__addsf3x+0x38>
    1180:	46 95       	lsr	r20
    1182:	37 95       	ror	r19
    1184:	27 95       	ror	r18
    1186:	a7 95       	ror	r26
    1188:	f0 40       	sbci	r31, 0x00	; 0
    118a:	53 95       	inc	r21
    118c:	c9 f7       	brne	.-14     	; 0x1180 <__addsf3x+0x52>
    118e:	7e f4       	brtc	.+30     	; 0x11ae <__addsf3x+0x80>
    1190:	1f 16       	cp	r1, r31
    1192:	ba 0b       	sbc	r27, r26
    1194:	62 0b       	sbc	r22, r18
    1196:	73 0b       	sbc	r23, r19
    1198:	84 0b       	sbc	r24, r20
    119a:	ba f0       	brmi	.+46     	; 0x11ca <__addsf3x+0x9c>
    119c:	91 50       	subi	r25, 0x01	; 1
    119e:	a1 f0       	breq	.+40     	; 0x11c8 <__addsf3x+0x9a>
    11a0:	ff 0f       	add	r31, r31
    11a2:	bb 1f       	adc	r27, r27
    11a4:	66 1f       	adc	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	88 1f       	adc	r24, r24
    11aa:	c2 f7       	brpl	.-16     	; 0x119c <__addsf3x+0x6e>
    11ac:	0e c0       	rjmp	.+28     	; 0x11ca <__addsf3x+0x9c>
    11ae:	ba 0f       	add	r27, r26
    11b0:	62 1f       	adc	r22, r18
    11b2:	73 1f       	adc	r23, r19
    11b4:	84 1f       	adc	r24, r20
    11b6:	48 f4       	brcc	.+18     	; 0x11ca <__addsf3x+0x9c>
    11b8:	87 95       	ror	r24
    11ba:	77 95       	ror	r23
    11bc:	67 95       	ror	r22
    11be:	b7 95       	ror	r27
    11c0:	f7 95       	ror	r31
    11c2:	9e 3f       	cpi	r25, 0xFE	; 254
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <__addsf3x+0x9a>
    11c6:	b0 cf       	rjmp	.-160    	; 0x1128 <__addsf3+0x28>
    11c8:	93 95       	inc	r25
    11ca:	88 0f       	add	r24, r24
    11cc:	08 f0       	brcs	.+2      	; 0x11d0 <__addsf3x+0xa2>
    11ce:	99 27       	eor	r25, r25
    11d0:	ee 0f       	add	r30, r30
    11d2:	97 95       	ror	r25
    11d4:	87 95       	ror	r24
    11d6:	08 95       	ret

000011d8 <__divsf3>:
    11d8:	0e 94 00 09 	call	0x1200	; 0x1200 <__divsf3x>
    11dc:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_round>
    11e0:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fp_pscB>
    11e4:	58 f0       	brcs	.+22     	; 0x11fc <__divsf3+0x24>
    11e6:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__fp_pscA>
    11ea:	40 f0       	brcs	.+16     	; 0x11fc <__divsf3+0x24>
    11ec:	29 f4       	brne	.+10     	; 0x11f8 <__divsf3+0x20>
    11ee:	5f 3f       	cpi	r21, 0xFF	; 255
    11f0:	29 f0       	breq	.+10     	; 0x11fc <__divsf3+0x24>
    11f2:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__fp_inf>
    11f6:	51 11       	cpse	r21, r1
    11f8:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_szero>
    11fc:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__fp_nan>

00001200 <__divsf3x>:
    1200:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fp_split3>
    1204:	68 f3       	brcs	.-38     	; 0x11e0 <__divsf3+0x8>

00001206 <__divsf3_pse>:
    1206:	99 23       	and	r25, r25
    1208:	b1 f3       	breq	.-20     	; 0x11f6 <__divsf3+0x1e>
    120a:	55 23       	and	r21, r21
    120c:	91 f3       	breq	.-28     	; 0x11f2 <__divsf3+0x1a>
    120e:	95 1b       	sub	r25, r21
    1210:	55 0b       	sbc	r21, r21
    1212:	bb 27       	eor	r27, r27
    1214:	aa 27       	eor	r26, r26
    1216:	62 17       	cp	r22, r18
    1218:	73 07       	cpc	r23, r19
    121a:	84 07       	cpc	r24, r20
    121c:	38 f0       	brcs	.+14     	; 0x122c <__divsf3_pse+0x26>
    121e:	9f 5f       	subi	r25, 0xFF	; 255
    1220:	5f 4f       	sbci	r21, 0xFF	; 255
    1222:	22 0f       	add	r18, r18
    1224:	33 1f       	adc	r19, r19
    1226:	44 1f       	adc	r20, r20
    1228:	aa 1f       	adc	r26, r26
    122a:	a9 f3       	breq	.-22     	; 0x1216 <__divsf3_pse+0x10>
    122c:	35 d0       	rcall	.+106    	; 0x1298 <__divsf3_pse+0x92>
    122e:	0e 2e       	mov	r0, r30
    1230:	3a f0       	brmi	.+14     	; 0x1240 <__divsf3_pse+0x3a>
    1232:	e0 e8       	ldi	r30, 0x80	; 128
    1234:	32 d0       	rcall	.+100    	; 0x129a <__divsf3_pse+0x94>
    1236:	91 50       	subi	r25, 0x01	; 1
    1238:	50 40       	sbci	r21, 0x00	; 0
    123a:	e6 95       	lsr	r30
    123c:	00 1c       	adc	r0, r0
    123e:	ca f7       	brpl	.-14     	; 0x1232 <__divsf3_pse+0x2c>
    1240:	2b d0       	rcall	.+86     	; 0x1298 <__divsf3_pse+0x92>
    1242:	fe 2f       	mov	r31, r30
    1244:	29 d0       	rcall	.+82     	; 0x1298 <__divsf3_pse+0x92>
    1246:	66 0f       	add	r22, r22
    1248:	77 1f       	adc	r23, r23
    124a:	88 1f       	adc	r24, r24
    124c:	bb 1f       	adc	r27, r27
    124e:	26 17       	cp	r18, r22
    1250:	37 07       	cpc	r19, r23
    1252:	48 07       	cpc	r20, r24
    1254:	ab 07       	cpc	r26, r27
    1256:	b0 e8       	ldi	r27, 0x80	; 128
    1258:	09 f0       	breq	.+2      	; 0x125c <__divsf3_pse+0x56>
    125a:	bb 0b       	sbc	r27, r27
    125c:	80 2d       	mov	r24, r0
    125e:	bf 01       	movw	r22, r30
    1260:	ff 27       	eor	r31, r31
    1262:	93 58       	subi	r25, 0x83	; 131
    1264:	5f 4f       	sbci	r21, 0xFF	; 255
    1266:	3a f0       	brmi	.+14     	; 0x1276 <__divsf3_pse+0x70>
    1268:	9e 3f       	cpi	r25, 0xFE	; 254
    126a:	51 05       	cpc	r21, r1
    126c:	78 f0       	brcs	.+30     	; 0x128c <__divsf3_pse+0x86>
    126e:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__fp_inf>
    1272:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_szero>
    1276:	5f 3f       	cpi	r21, 0xFF	; 255
    1278:	e4 f3       	brlt	.-8      	; 0x1272 <__divsf3_pse+0x6c>
    127a:	98 3e       	cpi	r25, 0xE8	; 232
    127c:	d4 f3       	brlt	.-12     	; 0x1272 <__divsf3_pse+0x6c>
    127e:	86 95       	lsr	r24
    1280:	77 95       	ror	r23
    1282:	67 95       	ror	r22
    1284:	b7 95       	ror	r27
    1286:	f7 95       	ror	r31
    1288:	9f 5f       	subi	r25, 0xFF	; 255
    128a:	c9 f7       	brne	.-14     	; 0x127e <__divsf3_pse+0x78>
    128c:	88 0f       	add	r24, r24
    128e:	91 1d       	adc	r25, r1
    1290:	96 95       	lsr	r25
    1292:	87 95       	ror	r24
    1294:	97 f9       	bld	r25, 7
    1296:	08 95       	ret
    1298:	e1 e0       	ldi	r30, 0x01	; 1
    129a:	66 0f       	add	r22, r22
    129c:	77 1f       	adc	r23, r23
    129e:	88 1f       	adc	r24, r24
    12a0:	bb 1f       	adc	r27, r27
    12a2:	62 17       	cp	r22, r18
    12a4:	73 07       	cpc	r23, r19
    12a6:	84 07       	cpc	r24, r20
    12a8:	ba 07       	cpc	r27, r26
    12aa:	20 f0       	brcs	.+8      	; 0x12b4 <__divsf3_pse+0xae>
    12ac:	62 1b       	sub	r22, r18
    12ae:	73 0b       	sbc	r23, r19
    12b0:	84 0b       	sbc	r24, r20
    12b2:	ba 0b       	sbc	r27, r26
    12b4:	ee 1f       	adc	r30, r30
    12b6:	88 f7       	brcc	.-30     	; 0x129a <__divsf3_pse+0x94>
    12b8:	e0 95       	com	r30
    12ba:	08 95       	ret

000012bc <__fixsfsi>:
    12bc:	0e 94 65 09 	call	0x12ca	; 0x12ca <__fixunssfsi>
    12c0:	68 94       	set
    12c2:	b1 11       	cpse	r27, r1
    12c4:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_szero>
    12c8:	08 95       	ret

000012ca <__fixunssfsi>:
    12ca:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fp_splitA>
    12ce:	88 f0       	brcs	.+34     	; 0x12f2 <__fixunssfsi+0x28>
    12d0:	9f 57       	subi	r25, 0x7F	; 127
    12d2:	98 f0       	brcs	.+38     	; 0x12fa <__fixunssfsi+0x30>
    12d4:	b9 2f       	mov	r27, r25
    12d6:	99 27       	eor	r25, r25
    12d8:	b7 51       	subi	r27, 0x17	; 23
    12da:	b0 f0       	brcs	.+44     	; 0x1308 <__fixunssfsi+0x3e>
    12dc:	e1 f0       	breq	.+56     	; 0x1316 <__fixunssfsi+0x4c>
    12de:	66 0f       	add	r22, r22
    12e0:	77 1f       	adc	r23, r23
    12e2:	88 1f       	adc	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	1a f0       	brmi	.+6      	; 0x12ee <__fixunssfsi+0x24>
    12e8:	ba 95       	dec	r27
    12ea:	c9 f7       	brne	.-14     	; 0x12de <__fixunssfsi+0x14>
    12ec:	14 c0       	rjmp	.+40     	; 0x1316 <__fixunssfsi+0x4c>
    12ee:	b1 30       	cpi	r27, 0x01	; 1
    12f0:	91 f0       	breq	.+36     	; 0x1316 <__fixunssfsi+0x4c>
    12f2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__fp_zero>
    12f6:	b1 e0       	ldi	r27, 0x01	; 1
    12f8:	08 95       	ret
    12fa:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__fp_zero>
    12fe:	67 2f       	mov	r22, r23
    1300:	78 2f       	mov	r23, r24
    1302:	88 27       	eor	r24, r24
    1304:	b8 5f       	subi	r27, 0xF8	; 248
    1306:	39 f0       	breq	.+14     	; 0x1316 <__fixunssfsi+0x4c>
    1308:	b9 3f       	cpi	r27, 0xF9	; 249
    130a:	cc f3       	brlt	.-14     	; 0x12fe <__fixunssfsi+0x34>
    130c:	86 95       	lsr	r24
    130e:	77 95       	ror	r23
    1310:	67 95       	ror	r22
    1312:	b3 95       	inc	r27
    1314:	d9 f7       	brne	.-10     	; 0x130c <__fixunssfsi+0x42>
    1316:	3e f4       	brtc	.+14     	; 0x1326 <__fixunssfsi+0x5c>
    1318:	90 95       	com	r25
    131a:	80 95       	com	r24
    131c:	70 95       	com	r23
    131e:	61 95       	neg	r22
    1320:	7f 4f       	sbci	r23, 0xFF	; 255
    1322:	8f 4f       	sbci	r24, 0xFF	; 255
    1324:	9f 4f       	sbci	r25, 0xFF	; 255
    1326:	08 95       	ret

00001328 <__floatunsisf>:
    1328:	e8 94       	clt
    132a:	09 c0       	rjmp	.+18     	; 0x133e <__floatsisf+0x12>

0000132c <__floatsisf>:
    132c:	97 fb       	bst	r25, 7
    132e:	3e f4       	brtc	.+14     	; 0x133e <__floatsisf+0x12>
    1330:	90 95       	com	r25
    1332:	80 95       	com	r24
    1334:	70 95       	com	r23
    1336:	61 95       	neg	r22
    1338:	7f 4f       	sbci	r23, 0xFF	; 255
    133a:	8f 4f       	sbci	r24, 0xFF	; 255
    133c:	9f 4f       	sbci	r25, 0xFF	; 255
    133e:	99 23       	and	r25, r25
    1340:	a9 f0       	breq	.+42     	; 0x136c <__floatsisf+0x40>
    1342:	f9 2f       	mov	r31, r25
    1344:	96 e9       	ldi	r25, 0x96	; 150
    1346:	bb 27       	eor	r27, r27
    1348:	93 95       	inc	r25
    134a:	f6 95       	lsr	r31
    134c:	87 95       	ror	r24
    134e:	77 95       	ror	r23
    1350:	67 95       	ror	r22
    1352:	b7 95       	ror	r27
    1354:	f1 11       	cpse	r31, r1
    1356:	f8 cf       	rjmp	.-16     	; 0x1348 <__floatsisf+0x1c>
    1358:	fa f4       	brpl	.+62     	; 0x1398 <__floatsisf+0x6c>
    135a:	bb 0f       	add	r27, r27
    135c:	11 f4       	brne	.+4      	; 0x1362 <__floatsisf+0x36>
    135e:	60 ff       	sbrs	r22, 0
    1360:	1b c0       	rjmp	.+54     	; 0x1398 <__floatsisf+0x6c>
    1362:	6f 5f       	subi	r22, 0xFF	; 255
    1364:	7f 4f       	sbci	r23, 0xFF	; 255
    1366:	8f 4f       	sbci	r24, 0xFF	; 255
    1368:	9f 4f       	sbci	r25, 0xFF	; 255
    136a:	16 c0       	rjmp	.+44     	; 0x1398 <__floatsisf+0x6c>
    136c:	88 23       	and	r24, r24
    136e:	11 f0       	breq	.+4      	; 0x1374 <__floatsisf+0x48>
    1370:	96 e9       	ldi	r25, 0x96	; 150
    1372:	11 c0       	rjmp	.+34     	; 0x1396 <__floatsisf+0x6a>
    1374:	77 23       	and	r23, r23
    1376:	21 f0       	breq	.+8      	; 0x1380 <__floatsisf+0x54>
    1378:	9e e8       	ldi	r25, 0x8E	; 142
    137a:	87 2f       	mov	r24, r23
    137c:	76 2f       	mov	r23, r22
    137e:	05 c0       	rjmp	.+10     	; 0x138a <__floatsisf+0x5e>
    1380:	66 23       	and	r22, r22
    1382:	71 f0       	breq	.+28     	; 0x13a0 <__floatsisf+0x74>
    1384:	96 e8       	ldi	r25, 0x86	; 134
    1386:	86 2f       	mov	r24, r22
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	2a f0       	brmi	.+10     	; 0x1398 <__floatsisf+0x6c>
    138e:	9a 95       	dec	r25
    1390:	66 0f       	add	r22, r22
    1392:	77 1f       	adc	r23, r23
    1394:	88 1f       	adc	r24, r24
    1396:	da f7       	brpl	.-10     	; 0x138e <__floatsisf+0x62>
    1398:	88 0f       	add	r24, r24
    139a:	96 95       	lsr	r25
    139c:	87 95       	ror	r24
    139e:	97 f9       	bld	r25, 7
    13a0:	08 95       	ret

000013a2 <__fp_inf>:
    13a2:	97 f9       	bld	r25, 7
    13a4:	9f 67       	ori	r25, 0x7F	; 127
    13a6:	80 e8       	ldi	r24, 0x80	; 128
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	08 95       	ret

000013ae <__fp_nan>:
    13ae:	9f ef       	ldi	r25, 0xFF	; 255
    13b0:	80 ec       	ldi	r24, 0xC0	; 192
    13b2:	08 95       	ret

000013b4 <__fp_pscA>:
    13b4:	00 24       	eor	r0, r0
    13b6:	0a 94       	dec	r0
    13b8:	16 16       	cp	r1, r22
    13ba:	17 06       	cpc	r1, r23
    13bc:	18 06       	cpc	r1, r24
    13be:	09 06       	cpc	r0, r25
    13c0:	08 95       	ret

000013c2 <__fp_pscB>:
    13c2:	00 24       	eor	r0, r0
    13c4:	0a 94       	dec	r0
    13c6:	12 16       	cp	r1, r18
    13c8:	13 06       	cpc	r1, r19
    13ca:	14 06       	cpc	r1, r20
    13cc:	05 06       	cpc	r0, r21
    13ce:	08 95       	ret

000013d0 <__fp_round>:
    13d0:	09 2e       	mov	r0, r25
    13d2:	03 94       	inc	r0
    13d4:	00 0c       	add	r0, r0
    13d6:	11 f4       	brne	.+4      	; 0x13dc <__fp_round+0xc>
    13d8:	88 23       	and	r24, r24
    13da:	52 f0       	brmi	.+20     	; 0x13f0 <__fp_round+0x20>
    13dc:	bb 0f       	add	r27, r27
    13de:	40 f4       	brcc	.+16     	; 0x13f0 <__fp_round+0x20>
    13e0:	bf 2b       	or	r27, r31
    13e2:	11 f4       	brne	.+4      	; 0x13e8 <__fp_round+0x18>
    13e4:	60 ff       	sbrs	r22, 0
    13e6:	04 c0       	rjmp	.+8      	; 0x13f0 <__fp_round+0x20>
    13e8:	6f 5f       	subi	r22, 0xFF	; 255
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	8f 4f       	sbci	r24, 0xFF	; 255
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	08 95       	ret

000013f2 <__fp_split3>:
    13f2:	57 fd       	sbrc	r21, 7
    13f4:	90 58       	subi	r25, 0x80	; 128
    13f6:	44 0f       	add	r20, r20
    13f8:	55 1f       	adc	r21, r21
    13fa:	59 f0       	breq	.+22     	; 0x1412 <__fp_splitA+0x10>
    13fc:	5f 3f       	cpi	r21, 0xFF	; 255
    13fe:	71 f0       	breq	.+28     	; 0x141c <__fp_splitA+0x1a>
    1400:	47 95       	ror	r20

00001402 <__fp_splitA>:
    1402:	88 0f       	add	r24, r24
    1404:	97 fb       	bst	r25, 7
    1406:	99 1f       	adc	r25, r25
    1408:	61 f0       	breq	.+24     	; 0x1422 <__fp_splitA+0x20>
    140a:	9f 3f       	cpi	r25, 0xFF	; 255
    140c:	79 f0       	breq	.+30     	; 0x142c <__fp_splitA+0x2a>
    140e:	87 95       	ror	r24
    1410:	08 95       	ret
    1412:	12 16       	cp	r1, r18
    1414:	13 06       	cpc	r1, r19
    1416:	14 06       	cpc	r1, r20
    1418:	55 1f       	adc	r21, r21
    141a:	f2 cf       	rjmp	.-28     	; 0x1400 <__fp_split3+0xe>
    141c:	46 95       	lsr	r20
    141e:	f1 df       	rcall	.-30     	; 0x1402 <__fp_splitA>
    1420:	08 c0       	rjmp	.+16     	; 0x1432 <__fp_splitA+0x30>
    1422:	16 16       	cp	r1, r22
    1424:	17 06       	cpc	r1, r23
    1426:	18 06       	cpc	r1, r24
    1428:	99 1f       	adc	r25, r25
    142a:	f1 cf       	rjmp	.-30     	; 0x140e <__fp_splitA+0xc>
    142c:	86 95       	lsr	r24
    142e:	71 05       	cpc	r23, r1
    1430:	61 05       	cpc	r22, r1
    1432:	08 94       	sec
    1434:	08 95       	ret

00001436 <__fp_zero>:
    1436:	e8 94       	clt

00001438 <__fp_szero>:
    1438:	bb 27       	eor	r27, r27
    143a:	66 27       	eor	r22, r22
    143c:	77 27       	eor	r23, r23
    143e:	cb 01       	movw	r24, r22
    1440:	97 f9       	bld	r25, 7
    1442:	08 95       	ret

00001444 <__mulsf3>:
    1444:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3x>
    1448:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_round>
    144c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__fp_pscA>
    1450:	38 f0       	brcs	.+14     	; 0x1460 <__mulsf3+0x1c>
    1452:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fp_pscB>
    1456:	20 f0       	brcs	.+8      	; 0x1460 <__mulsf3+0x1c>
    1458:	95 23       	and	r25, r21
    145a:	11 f0       	breq	.+4      	; 0x1460 <__mulsf3+0x1c>
    145c:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__fp_inf>
    1460:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__fp_nan>
    1464:	11 24       	eor	r1, r1
    1466:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_szero>

0000146a <__mulsf3x>:
    146a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fp_split3>
    146e:	70 f3       	brcs	.-36     	; 0x144c <__mulsf3+0x8>

00001470 <__mulsf3_pse>:
    1470:	95 9f       	mul	r25, r21
    1472:	c1 f3       	breq	.-16     	; 0x1464 <__mulsf3+0x20>
    1474:	95 0f       	add	r25, r21
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	55 1f       	adc	r21, r21
    147a:	62 9f       	mul	r22, r18
    147c:	f0 01       	movw	r30, r0
    147e:	72 9f       	mul	r23, r18
    1480:	bb 27       	eor	r27, r27
    1482:	f0 0d       	add	r31, r0
    1484:	b1 1d       	adc	r27, r1
    1486:	63 9f       	mul	r22, r19
    1488:	aa 27       	eor	r26, r26
    148a:	f0 0d       	add	r31, r0
    148c:	b1 1d       	adc	r27, r1
    148e:	aa 1f       	adc	r26, r26
    1490:	64 9f       	mul	r22, r20
    1492:	66 27       	eor	r22, r22
    1494:	b0 0d       	add	r27, r0
    1496:	a1 1d       	adc	r26, r1
    1498:	66 1f       	adc	r22, r22
    149a:	82 9f       	mul	r24, r18
    149c:	22 27       	eor	r18, r18
    149e:	b0 0d       	add	r27, r0
    14a0:	a1 1d       	adc	r26, r1
    14a2:	62 1f       	adc	r22, r18
    14a4:	73 9f       	mul	r23, r19
    14a6:	b0 0d       	add	r27, r0
    14a8:	a1 1d       	adc	r26, r1
    14aa:	62 1f       	adc	r22, r18
    14ac:	83 9f       	mul	r24, r19
    14ae:	a0 0d       	add	r26, r0
    14b0:	61 1d       	adc	r22, r1
    14b2:	22 1f       	adc	r18, r18
    14b4:	74 9f       	mul	r23, r20
    14b6:	33 27       	eor	r19, r19
    14b8:	a0 0d       	add	r26, r0
    14ba:	61 1d       	adc	r22, r1
    14bc:	23 1f       	adc	r18, r19
    14be:	84 9f       	mul	r24, r20
    14c0:	60 0d       	add	r22, r0
    14c2:	21 1d       	adc	r18, r1
    14c4:	82 2f       	mov	r24, r18
    14c6:	76 2f       	mov	r23, r22
    14c8:	6a 2f       	mov	r22, r26
    14ca:	11 24       	eor	r1, r1
    14cc:	9f 57       	subi	r25, 0x7F	; 127
    14ce:	50 40       	sbci	r21, 0x00	; 0
    14d0:	9a f0       	brmi	.+38     	; 0x14f8 <__mulsf3_pse+0x88>
    14d2:	f1 f0       	breq	.+60     	; 0x1510 <__mulsf3_pse+0xa0>
    14d4:	88 23       	and	r24, r24
    14d6:	4a f0       	brmi	.+18     	; 0x14ea <__mulsf3_pse+0x7a>
    14d8:	ee 0f       	add	r30, r30
    14da:	ff 1f       	adc	r31, r31
    14dc:	bb 1f       	adc	r27, r27
    14de:	66 1f       	adc	r22, r22
    14e0:	77 1f       	adc	r23, r23
    14e2:	88 1f       	adc	r24, r24
    14e4:	91 50       	subi	r25, 0x01	; 1
    14e6:	50 40       	sbci	r21, 0x00	; 0
    14e8:	a9 f7       	brne	.-22     	; 0x14d4 <__mulsf3_pse+0x64>
    14ea:	9e 3f       	cpi	r25, 0xFE	; 254
    14ec:	51 05       	cpc	r21, r1
    14ee:	80 f0       	brcs	.+32     	; 0x1510 <__mulsf3_pse+0xa0>
    14f0:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__fp_inf>
    14f4:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_szero>
    14f8:	5f 3f       	cpi	r21, 0xFF	; 255
    14fa:	e4 f3       	brlt	.-8      	; 0x14f4 <__mulsf3_pse+0x84>
    14fc:	98 3e       	cpi	r25, 0xE8	; 232
    14fe:	d4 f3       	brlt	.-12     	; 0x14f4 <__mulsf3_pse+0x84>
    1500:	86 95       	lsr	r24
    1502:	77 95       	ror	r23
    1504:	67 95       	ror	r22
    1506:	b7 95       	ror	r27
    1508:	f7 95       	ror	r31
    150a:	e7 95       	ror	r30
    150c:	9f 5f       	subi	r25, 0xFF	; 255
    150e:	c1 f7       	brne	.-16     	; 0x1500 <__mulsf3_pse+0x90>
    1510:	fe 2b       	or	r31, r30
    1512:	88 0f       	add	r24, r24
    1514:	91 1d       	adc	r25, r1
    1516:	96 95       	lsr	r25
    1518:	87 95       	ror	r24
    151a:	97 f9       	bld	r25, 7
    151c:	08 95       	ret

0000151e <pow>:
    151e:	fa 01       	movw	r30, r20
    1520:	ee 0f       	add	r30, r30
    1522:	ff 1f       	adc	r31, r31
    1524:	30 96       	adiw	r30, 0x00	; 0
    1526:	21 05       	cpc	r18, r1
    1528:	31 05       	cpc	r19, r1
    152a:	a1 f1       	breq	.+104    	; 0x1594 <pow+0x76>
    152c:	61 15       	cp	r22, r1
    152e:	71 05       	cpc	r23, r1
    1530:	61 f4       	brne	.+24     	; 0x154a <pow+0x2c>
    1532:	80 38       	cpi	r24, 0x80	; 128
    1534:	bf e3       	ldi	r27, 0x3F	; 63
    1536:	9b 07       	cpc	r25, r27
    1538:	49 f1       	breq	.+82     	; 0x158c <pow+0x6e>
    153a:	68 94       	set
    153c:	90 38       	cpi	r25, 0x80	; 128
    153e:	81 05       	cpc	r24, r1
    1540:	61 f0       	breq	.+24     	; 0x155a <pow+0x3c>
    1542:	80 38       	cpi	r24, 0x80	; 128
    1544:	bf ef       	ldi	r27, 0xFF	; 255
    1546:	9b 07       	cpc	r25, r27
    1548:	41 f0       	breq	.+16     	; 0x155a <pow+0x3c>
    154a:	99 23       	and	r25, r25
    154c:	4a f5       	brpl	.+82     	; 0x15a0 <pow+0x82>
    154e:	ff 3f       	cpi	r31, 0xFF	; 255
    1550:	e1 05       	cpc	r30, r1
    1552:	31 05       	cpc	r19, r1
    1554:	21 05       	cpc	r18, r1
    1556:	19 f1       	breq	.+70     	; 0x159e <pow+0x80>
    1558:	e8 94       	clt
    155a:	08 94       	sec
    155c:	e7 95       	ror	r30
    155e:	d9 01       	movw	r26, r18
    1560:	aa 23       	and	r26, r26
    1562:	29 f4       	brne	.+10     	; 0x156e <pow+0x50>
    1564:	ab 2f       	mov	r26, r27
    1566:	be 2f       	mov	r27, r30
    1568:	f8 5f       	subi	r31, 0xF8	; 248
    156a:	d0 f3       	brcs	.-12     	; 0x1560 <pow+0x42>
    156c:	10 c0       	rjmp	.+32     	; 0x158e <pow+0x70>
    156e:	ff 5f       	subi	r31, 0xFF	; 255
    1570:	70 f4       	brcc	.+28     	; 0x158e <pow+0x70>
    1572:	a6 95       	lsr	r26
    1574:	e0 f7       	brcc	.-8      	; 0x156e <pow+0x50>
    1576:	f7 39       	cpi	r31, 0x97	; 151
    1578:	50 f0       	brcs	.+20     	; 0x158e <pow+0x70>
    157a:	19 f0       	breq	.+6      	; 0x1582 <pow+0x64>
    157c:	ff 3a       	cpi	r31, 0xAF	; 175
    157e:	38 f4       	brcc	.+14     	; 0x158e <pow+0x70>
    1580:	9f 77       	andi	r25, 0x7F	; 127
    1582:	9f 93       	push	r25
    1584:	0d d0       	rcall	.+26     	; 0x15a0 <pow+0x82>
    1586:	0f 90       	pop	r0
    1588:	07 fc       	sbrc	r0, 7
    158a:	90 58       	subi	r25, 0x80	; 128
    158c:	08 95       	ret
    158e:	46 f0       	brts	.+16     	; 0x15a0 <pow+0x82>
    1590:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__fp_nan>
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	80 e8       	ldi	r24, 0x80	; 128
    159a:	9f e3       	ldi	r25, 0x3F	; 63
    159c:	08 95       	ret
    159e:	4f e7       	ldi	r20, 0x7F	; 127
    15a0:	9f 77       	andi	r25, 0x7F	; 127
    15a2:	5f 93       	push	r21
    15a4:	4f 93       	push	r20
    15a6:	3f 93       	push	r19
    15a8:	2f 93       	push	r18
    15aa:	0e 94 8a 0b 	call	0x1714	; 0x1714 <log>
    15ae:	2f 91       	pop	r18
    15b0:	3f 91       	pop	r19
    15b2:	4f 91       	pop	r20
    15b4:	5f 91       	pop	r21
    15b6:	0e 94 22 0a 	call	0x1444	; 0x1444 <__mulsf3>
    15ba:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <exp>
    15be:	29 f4       	brne	.+10     	; 0x15ca <pow+0xac>
    15c0:	16 f0       	brts	.+4      	; 0x15c6 <pow+0xa8>
    15c2:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__fp_inf>
    15c6:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__fp_zero>
    15ca:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__fp_nan>

000015ce <exp>:
    15ce:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fp_splitA>
    15d2:	a8 f3       	brcs	.-22     	; 0x15be <pow+0xa0>
    15d4:	96 38       	cpi	r25, 0x86	; 134
    15d6:	a0 f7       	brcc	.-24     	; 0x15c0 <pow+0xa2>
    15d8:	07 f8       	bld	r0, 7
    15da:	0f 92       	push	r0
    15dc:	e8 94       	clt
    15de:	2b e3       	ldi	r18, 0x3B	; 59
    15e0:	3a ea       	ldi	r19, 0xAA	; 170
    15e2:	48 eb       	ldi	r20, 0xB8	; 184
    15e4:	5f e7       	ldi	r21, 0x7F	; 127
    15e6:	0e 94 38 0a 	call	0x1470	; 0x1470 <__mulsf3_pse>
    15ea:	0f 92       	push	r0
    15ec:	0f 92       	push	r0
    15ee:	0f 92       	push	r0
    15f0:	4d b7       	in	r20, 0x3d	; 61
    15f2:	5e b7       	in	r21, 0x3e	; 62
    15f4:	0f 92       	push	r0
    15f6:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <modf>
    15fa:	ec e8       	ldi	r30, 0x8C	; 140
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	0e 94 19 0b 	call	0x1632	; 0x1632 <__fp_powser>
    1602:	4f 91       	pop	r20
    1604:	5f 91       	pop	r21
    1606:	ef 91       	pop	r30
    1608:	ff 91       	pop	r31
    160a:	e5 95       	asr	r30
    160c:	ee 1f       	adc	r30, r30
    160e:	ff 1f       	adc	r31, r31
    1610:	49 f0       	breq	.+18     	; 0x1624 <exp+0x56>
    1612:	fe 57       	subi	r31, 0x7E	; 126
    1614:	e0 68       	ori	r30, 0x80	; 128
    1616:	44 27       	eor	r20, r20
    1618:	ee 0f       	add	r30, r30
    161a:	44 1f       	adc	r20, r20
    161c:	fa 95       	dec	r31
    161e:	e1 f7       	brne	.-8      	; 0x1618 <exp+0x4a>
    1620:	41 95       	neg	r20
    1622:	55 0b       	sbc	r21, r21
    1624:	0e 94 4c 0b 	call	0x1698	; 0x1698 <ldexp>
    1628:	0f 90       	pop	r0
    162a:	07 fe       	sbrs	r0, 7
    162c:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <inverse>
    1630:	08 95       	ret

00001632 <__fp_powser>:
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	1f 93       	push	r17
    1638:	0f 93       	push	r16
    163a:	ff 92       	push	r15
    163c:	ef 92       	push	r14
    163e:	df 92       	push	r13
    1640:	7b 01       	movw	r14, r22
    1642:	8c 01       	movw	r16, r24
    1644:	68 94       	set
    1646:	06 c0       	rjmp	.+12     	; 0x1654 <__fp_powser+0x22>
    1648:	da 2e       	mov	r13, r26
    164a:	ef 01       	movw	r28, r30
    164c:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3x>
    1650:	fe 01       	movw	r30, r28
    1652:	e8 94       	clt
    1654:	a5 91       	lpm	r26, Z+
    1656:	25 91       	lpm	r18, Z+
    1658:	35 91       	lpm	r19, Z+
    165a:	45 91       	lpm	r20, Z+
    165c:	55 91       	lpm	r21, Z+
    165e:	a6 f3       	brts	.-24     	; 0x1648 <__fp_powser+0x16>
    1660:	ef 01       	movw	r28, r30
    1662:	0e 94 97 08 	call	0x112e	; 0x112e <__addsf3x>
    1666:	fe 01       	movw	r30, r28
    1668:	97 01       	movw	r18, r14
    166a:	a8 01       	movw	r20, r16
    166c:	da 94       	dec	r13
    166e:	69 f7       	brne	.-38     	; 0x164a <__fp_powser+0x18>
    1670:	df 90       	pop	r13
    1672:	ef 90       	pop	r14
    1674:	ff 90       	pop	r15
    1676:	0f 91       	pop	r16
    1678:	1f 91       	pop	r17
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <inverse>:
    1680:	9b 01       	movw	r18, r22
    1682:	ac 01       	movw	r20, r24
    1684:	60 e0       	ldi	r22, 0x00	; 0
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	80 e8       	ldi	r24, 0x80	; 128
    168a:	9f e3       	ldi	r25, 0x3F	; 63
    168c:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__divsf3>
    1690:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__fp_inf>
    1694:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_mpack>

00001698 <ldexp>:
    1698:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fp_splitA>
    169c:	d8 f3       	brcs	.-10     	; 0x1694 <inverse+0x14>
    169e:	99 23       	and	r25, r25
    16a0:	c9 f3       	breq	.-14     	; 0x1694 <inverse+0x14>
    16a2:	94 0f       	add	r25, r20
    16a4:	51 1d       	adc	r21, r1
    16a6:	a3 f3       	brvs	.-24     	; 0x1690 <inverse+0x10>
    16a8:	91 50       	subi	r25, 0x01	; 1
    16aa:	50 40       	sbci	r21, 0x00	; 0
    16ac:	94 f0       	brlt	.+36     	; 0x16d2 <ldexp+0x3a>
    16ae:	59 f0       	breq	.+22     	; 0x16c6 <ldexp+0x2e>
    16b0:	88 23       	and	r24, r24
    16b2:	32 f0       	brmi	.+12     	; 0x16c0 <ldexp+0x28>
    16b4:	66 0f       	add	r22, r22
    16b6:	77 1f       	adc	r23, r23
    16b8:	88 1f       	adc	r24, r24
    16ba:	91 50       	subi	r25, 0x01	; 1
    16bc:	50 40       	sbci	r21, 0x00	; 0
    16be:	c1 f7       	brne	.-16     	; 0x16b0 <ldexp+0x18>
    16c0:	9e 3f       	cpi	r25, 0xFE	; 254
    16c2:	51 05       	cpc	r21, r1
    16c4:	2c f7       	brge	.-54     	; 0x1690 <inverse+0x10>
    16c6:	88 0f       	add	r24, r24
    16c8:	91 1d       	adc	r25, r1
    16ca:	96 95       	lsr	r25
    16cc:	87 95       	ror	r24
    16ce:	97 f9       	bld	r25, 7
    16d0:	08 95       	ret
    16d2:	5f 3f       	cpi	r21, 0xFF	; 255
    16d4:	ac f0       	brlt	.+42     	; 0x1700 <ldexp+0x68>
    16d6:	98 3e       	cpi	r25, 0xE8	; 232
    16d8:	9c f0       	brlt	.+38     	; 0x1700 <ldexp+0x68>
    16da:	bb 27       	eor	r27, r27
    16dc:	86 95       	lsr	r24
    16de:	77 95       	ror	r23
    16e0:	67 95       	ror	r22
    16e2:	b7 95       	ror	r27
    16e4:	08 f4       	brcc	.+2      	; 0x16e8 <ldexp+0x50>
    16e6:	b1 60       	ori	r27, 0x01	; 1
    16e8:	93 95       	inc	r25
    16ea:	c1 f7       	brne	.-16     	; 0x16dc <ldexp+0x44>
    16ec:	bb 0f       	add	r27, r27
    16ee:	58 f7       	brcc	.-42     	; 0x16c6 <ldexp+0x2e>
    16f0:	11 f4       	brne	.+4      	; 0x16f6 <ldexp+0x5e>
    16f2:	60 ff       	sbrs	r22, 0
    16f4:	e8 cf       	rjmp	.-48     	; 0x16c6 <ldexp+0x2e>
    16f6:	6f 5f       	subi	r22, 0xFF	; 255
    16f8:	7f 4f       	sbci	r23, 0xFF	; 255
    16fa:	8f 4f       	sbci	r24, 0xFF	; 255
    16fc:	9f 4f       	sbci	r25, 0xFF	; 255
    16fe:	e3 cf       	rjmp	.-58     	; 0x16c6 <ldexp+0x2e>
    1700:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_szero>
    1704:	16 f0       	brts	.+4      	; 0x170a <ldexp+0x72>
    1706:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_mpack>
    170a:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__fp_nan>
    170e:	68 94       	set
    1710:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__fp_inf>

00001714 <log>:
    1714:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fp_splitA>
    1718:	a8 f3       	brcs	.-22     	; 0x1704 <ldexp+0x6c>
    171a:	99 23       	and	r25, r25
    171c:	c1 f3       	breq	.-16     	; 0x170e <ldexp+0x76>
    171e:	ae f3       	brts	.-22     	; 0x170a <ldexp+0x72>
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	1f 93       	push	r17
    1726:	0f 93       	push	r16
    1728:	ff 92       	push	r15
    172a:	c9 2f       	mov	r28, r25
    172c:	dd 27       	eor	r29, r29
    172e:	88 23       	and	r24, r24
    1730:	2a f0       	brmi	.+10     	; 0x173c <log+0x28>
    1732:	21 97       	sbiw	r28, 0x01	; 1
    1734:	66 0f       	add	r22, r22
    1736:	77 1f       	adc	r23, r23
    1738:	88 1f       	adc	r24, r24
    173a:	da f7       	brpl	.-10     	; 0x1732 <log+0x1e>
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e8       	ldi	r20, 0x80	; 128
    1742:	5f eb       	ldi	r21, 0xBF	; 191
    1744:	9f e3       	ldi	r25, 0x3F	; 63
    1746:	88 39       	cpi	r24, 0x98	; 152
    1748:	20 f0       	brcs	.+8      	; 0x1752 <log+0x3e>
    174a:	80 3e       	cpi	r24, 0xE0	; 224
    174c:	38 f0       	brcs	.+14     	; 0x175c <log+0x48>
    174e:	21 96       	adiw	r28, 0x01	; 1
    1750:	8f 77       	andi	r24, 0x7F	; 127
    1752:	0e 94 80 08 	call	0x1100	; 0x1100 <__addsf3>
    1756:	e4 eb       	ldi	r30, 0xB4	; 180
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <log+0x50>
    175c:	0e 94 80 08 	call	0x1100	; 0x1100 <__addsf3>
    1760:	e1 ee       	ldi	r30, 0xE1	; 225
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	0e 94 19 0b 	call	0x1632	; 0x1632 <__fp_powser>
    1768:	8b 01       	movw	r16, r22
    176a:	be 01       	movw	r22, r28
    176c:	ec 01       	movw	r28, r24
    176e:	fb 2e       	mov	r15, r27
    1770:	6f 57       	subi	r22, 0x7F	; 127
    1772:	71 09       	sbc	r23, r1
    1774:	75 95       	asr	r23
    1776:	77 1f       	adc	r23, r23
    1778:	88 0b       	sbc	r24, r24
    177a:	99 0b       	sbc	r25, r25
    177c:	0e 94 96 09 	call	0x132c	; 0x132c <__floatsisf>
    1780:	28 e1       	ldi	r18, 0x18	; 24
    1782:	32 e7       	ldi	r19, 0x72	; 114
    1784:	41 e3       	ldi	r20, 0x31	; 49
    1786:	5f e3       	ldi	r21, 0x3F	; 63
    1788:	0e 94 35 0a 	call	0x146a	; 0x146a <__mulsf3x>
    178c:	af 2d       	mov	r26, r15
    178e:	98 01       	movw	r18, r16
    1790:	ae 01       	movw	r20, r28
    1792:	ff 90       	pop	r15
    1794:	0f 91       	pop	r16
    1796:	1f 91       	pop	r17
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	0e 94 97 08 	call	0x112e	; 0x112e <__addsf3x>
    17a0:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_round>

000017a4 <modf>:
    17a4:	fa 01       	movw	r30, r20
    17a6:	dc 01       	movw	r26, r24
    17a8:	aa 0f       	add	r26, r26
    17aa:	bb 1f       	adc	r27, r27
    17ac:	9b 01       	movw	r18, r22
    17ae:	ac 01       	movw	r20, r24
    17b0:	bf 57       	subi	r27, 0x7F	; 127
    17b2:	28 f4       	brcc	.+10     	; 0x17be <modf+0x1a>
    17b4:	22 27       	eor	r18, r18
    17b6:	33 27       	eor	r19, r19
    17b8:	44 27       	eor	r20, r20
    17ba:	50 78       	andi	r21, 0x80	; 128
    17bc:	20 c0       	rjmp	.+64     	; 0x17fe <modf+0x5a>
    17be:	b7 51       	subi	r27, 0x17	; 23
    17c0:	90 f4       	brcc	.+36     	; 0x17e6 <modf+0x42>
    17c2:	ab 2f       	mov	r26, r27
    17c4:	00 24       	eor	r0, r0
    17c6:	46 95       	lsr	r20
    17c8:	37 95       	ror	r19
    17ca:	27 95       	ror	r18
    17cc:	01 1c       	adc	r0, r1
    17ce:	a3 95       	inc	r26
    17d0:	d2 f3       	brmi	.-12     	; 0x17c6 <modf+0x22>
    17d2:	00 20       	and	r0, r0
    17d4:	71 f0       	breq	.+28     	; 0x17f2 <modf+0x4e>
    17d6:	22 0f       	add	r18, r18
    17d8:	33 1f       	adc	r19, r19
    17da:	44 1f       	adc	r20, r20
    17dc:	b3 95       	inc	r27
    17de:	da f3       	brmi	.-10     	; 0x17d6 <modf+0x32>
    17e0:	0e d0       	rcall	.+28     	; 0x17fe <modf+0x5a>
    17e2:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__subsf3>
    17e6:	61 30       	cpi	r22, 0x01	; 1
    17e8:	71 05       	cpc	r23, r1
    17ea:	a0 e8       	ldi	r26, 0x80	; 128
    17ec:	8a 07       	cpc	r24, r26
    17ee:	b9 46       	sbci	r27, 0x69	; 105
    17f0:	30 f4       	brcc	.+12     	; 0x17fe <modf+0x5a>
    17f2:	9b 01       	movw	r18, r22
    17f4:	ac 01       	movw	r20, r24
    17f6:	66 27       	eor	r22, r22
    17f8:	77 27       	eor	r23, r23
    17fa:	88 27       	eor	r24, r24
    17fc:	90 78       	andi	r25, 0x80	; 128
    17fe:	30 96       	adiw	r30, 0x00	; 0
    1800:	21 f0       	breq	.+8      	; 0x180a <modf+0x66>
    1802:	20 83       	st	Z, r18
    1804:	31 83       	std	Z+1, r19	; 0x01
    1806:	42 83       	std	Z+2, r20	; 0x02
    1808:	53 83       	std	Z+3, r21	; 0x03
    180a:	08 95       	ret

0000180c <__fp_mpack>:
    180c:	9f 3f       	cpi	r25, 0xFF	; 255
    180e:	31 f0       	breq	.+12     	; 0x181c <__fp_mpack_finite+0xc>

00001810 <__fp_mpack_finite>:
    1810:	91 50       	subi	r25, 0x01	; 1
    1812:	20 f4       	brcc	.+8      	; 0x181c <__fp_mpack_finite+0xc>
    1814:	87 95       	ror	r24
    1816:	77 95       	ror	r23
    1818:	67 95       	ror	r22
    181a:	b7 95       	ror	r27
    181c:	88 0f       	add	r24, r24
    181e:	91 1d       	adc	r25, r1
    1820:	96 95       	lsr	r25
    1822:	87 95       	ror	r24
    1824:	97 f9       	bld	r25, 7
    1826:	08 95       	ret

00001828 <__udivmodsi4>:
    1828:	a1 e2       	ldi	r26, 0x21	; 33
    182a:	1a 2e       	mov	r1, r26
    182c:	aa 1b       	sub	r26, r26
    182e:	bb 1b       	sub	r27, r27
    1830:	fd 01       	movw	r30, r26
    1832:	0d c0       	rjmp	.+26     	; 0x184e <__udivmodsi4_ep>

00001834 <__udivmodsi4_loop>:
    1834:	aa 1f       	adc	r26, r26
    1836:	bb 1f       	adc	r27, r27
    1838:	ee 1f       	adc	r30, r30
    183a:	ff 1f       	adc	r31, r31
    183c:	a2 17       	cp	r26, r18
    183e:	b3 07       	cpc	r27, r19
    1840:	e4 07       	cpc	r30, r20
    1842:	f5 07       	cpc	r31, r21
    1844:	20 f0       	brcs	.+8      	; 0x184e <__udivmodsi4_ep>
    1846:	a2 1b       	sub	r26, r18
    1848:	b3 0b       	sbc	r27, r19
    184a:	e4 0b       	sbc	r30, r20
    184c:	f5 0b       	sbc	r31, r21

0000184e <__udivmodsi4_ep>:
    184e:	66 1f       	adc	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	88 1f       	adc	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	1a 94       	dec	r1
    1858:	69 f7       	brne	.-38     	; 0x1834 <__udivmodsi4_loop>
    185a:	60 95       	com	r22
    185c:	70 95       	com	r23
    185e:	80 95       	com	r24
    1860:	90 95       	com	r25
    1862:	9b 01       	movw	r18, r22
    1864:	ac 01       	movw	r20, r24
    1866:	bd 01       	movw	r22, r26
    1868:	cf 01       	movw	r24, r30
    186a:	08 95       	ret

0000186c <__ashrdi3>:
    186c:	97 fb       	bst	r25, 7
    186e:	10 f8       	bld	r1, 0

00001870 <__lshrdi3>:
    1870:	16 94       	lsr	r1
    1872:	00 08       	sbc	r0, r0
    1874:	0f 93       	push	r16
    1876:	08 30       	cpi	r16, 0x08	; 8
    1878:	98 f0       	brcs	.+38     	; 0x18a0 <__lshrdi3+0x30>
    187a:	08 50       	subi	r16, 0x08	; 8
    187c:	23 2f       	mov	r18, r19
    187e:	34 2f       	mov	r19, r20
    1880:	45 2f       	mov	r20, r21
    1882:	56 2f       	mov	r21, r22
    1884:	67 2f       	mov	r22, r23
    1886:	78 2f       	mov	r23, r24
    1888:	89 2f       	mov	r24, r25
    188a:	90 2d       	mov	r25, r0
    188c:	f4 cf       	rjmp	.-24     	; 0x1876 <__lshrdi3+0x6>
    188e:	05 94       	asr	r0
    1890:	97 95       	ror	r25
    1892:	87 95       	ror	r24
    1894:	77 95       	ror	r23
    1896:	67 95       	ror	r22
    1898:	57 95       	ror	r21
    189a:	47 95       	ror	r20
    189c:	37 95       	ror	r19
    189e:	27 95       	ror	r18
    18a0:	0a 95       	dec	r16
    18a2:	aa f7       	brpl	.-22     	; 0x188e <__lshrdi3+0x1e>
    18a4:	0f 91       	pop	r16
    18a6:	08 95       	ret

000018a8 <__adddi3_s8>:
    18a8:	00 24       	eor	r0, r0
    18aa:	a7 fd       	sbrc	r26, 7
    18ac:	00 94       	com	r0
    18ae:	2a 0f       	add	r18, r26
    18b0:	30 1d       	adc	r19, r0
    18b2:	40 1d       	adc	r20, r0
    18b4:	50 1d       	adc	r21, r0
    18b6:	60 1d       	adc	r22, r0
    18b8:	70 1d       	adc	r23, r0
    18ba:	80 1d       	adc	r24, r0
    18bc:	90 1d       	adc	r25, r0
    18be:	08 95       	ret

000018c0 <memset>:
    18c0:	dc 01       	movw	r26, r24
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <memset+0x6>
    18c4:	6d 93       	st	X+, r22
    18c6:	41 50       	subi	r20, 0x01	; 1
    18c8:	50 40       	sbci	r21, 0x00	; 0
    18ca:	e0 f7       	brcc	.-8      	; 0x18c4 <memset+0x4>
    18cc:	08 95       	ret

000018ce <strncmp>:
    18ce:	fb 01       	movw	r30, r22
    18d0:	dc 01       	movw	r26, r24
    18d2:	41 50       	subi	r20, 0x01	; 1
    18d4:	50 40       	sbci	r21, 0x00	; 0
    18d6:	30 f0       	brcs	.+12     	; 0x18e4 <strncmp+0x16>
    18d8:	8d 91       	ld	r24, X+
    18da:	01 90       	ld	r0, Z+
    18dc:	80 19       	sub	r24, r0
    18de:	19 f4       	brne	.+6      	; 0x18e6 <strncmp+0x18>
    18e0:	00 20       	and	r0, r0
    18e2:	b9 f7       	brne	.-18     	; 0x18d2 <strncmp+0x4>
    18e4:	88 1b       	sub	r24, r24
    18e6:	99 0b       	sbc	r25, r25
    18e8:	08 95       	ret

000018ea <strstr>:
    18ea:	fb 01       	movw	r30, r22
    18ec:	51 91       	ld	r21, Z+
    18ee:	55 23       	and	r21, r21
    18f0:	a9 f0       	breq	.+42     	; 0x191c <strstr+0x32>
    18f2:	bf 01       	movw	r22, r30
    18f4:	dc 01       	movw	r26, r24
    18f6:	4d 91       	ld	r20, X+
    18f8:	45 17       	cp	r20, r21
    18fa:	41 11       	cpse	r20, r1
    18fc:	e1 f7       	brne	.-8      	; 0x18f6 <strstr+0xc>
    18fe:	59 f4       	brne	.+22     	; 0x1916 <strstr+0x2c>
    1900:	cd 01       	movw	r24, r26
    1902:	01 90       	ld	r0, Z+
    1904:	00 20       	and	r0, r0
    1906:	49 f0       	breq	.+18     	; 0x191a <strstr+0x30>
    1908:	4d 91       	ld	r20, X+
    190a:	40 15       	cp	r20, r0
    190c:	41 11       	cpse	r20, r1
    190e:	c9 f3       	breq	.-14     	; 0x1902 <strstr+0x18>
    1910:	fb 01       	movw	r30, r22
    1912:	41 11       	cpse	r20, r1
    1914:	ef cf       	rjmp	.-34     	; 0x18f4 <strstr+0xa>
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	08 95       	ret

0000191e <__itoa_ncheck>:
    191e:	bb 27       	eor	r27, r27
    1920:	4a 30       	cpi	r20, 0x0A	; 10
    1922:	31 f4       	brne	.+12     	; 0x1930 <__itoa_ncheck+0x12>
    1924:	99 23       	and	r25, r25
    1926:	22 f4       	brpl	.+8      	; 0x1930 <__itoa_ncheck+0x12>
    1928:	bd e2       	ldi	r27, 0x2D	; 45
    192a:	90 95       	com	r25
    192c:	81 95       	neg	r24
    192e:	9f 4f       	sbci	r25, 0xFF	; 255
    1930:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <__utoa_common>

00001934 <__utoa_ncheck>:
    1934:	bb 27       	eor	r27, r27

00001936 <__utoa_common>:
    1936:	fb 01       	movw	r30, r22
    1938:	55 27       	eor	r21, r21
    193a:	aa 27       	eor	r26, r26
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	aa 1f       	adc	r26, r26
    1942:	a4 17       	cp	r26, r20
    1944:	10 f0       	brcs	.+4      	; 0x194a <__utoa_common+0x14>
    1946:	a4 1b       	sub	r26, r20
    1948:	83 95       	inc	r24
    194a:	50 51       	subi	r21, 0x10	; 16
    194c:	b9 f7       	brne	.-18     	; 0x193c <__utoa_common+0x6>
    194e:	a0 5d       	subi	r26, 0xD0	; 208
    1950:	aa 33       	cpi	r26, 0x3A	; 58
    1952:	08 f0       	brcs	.+2      	; 0x1956 <__utoa_common+0x20>
    1954:	a9 5d       	subi	r26, 0xD9	; 217
    1956:	a1 93       	st	Z+, r26
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	79 f7       	brne	.-34     	; 0x193a <__utoa_common+0x4>
    195c:	b1 11       	cpse	r27, r1
    195e:	b1 93       	st	Z+, r27
    1960:	11 92       	st	Z+, r1
    1962:	cb 01       	movw	r24, r22
    1964:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <strrev>

00001968 <sprintf>:
    1968:	ae e0       	ldi	r26, 0x0E	; 14
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	ea eb       	ldi	r30, 0xBA	; 186
    196e:	fc e0       	ldi	r31, 0x0C	; 12
    1970:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__prologue_saves__+0x1c>
    1974:	0d 89       	ldd	r16, Y+21	; 0x15
    1976:	1e 89       	ldd	r17, Y+22	; 0x16
    1978:	86 e0       	ldi	r24, 0x06	; 6
    197a:	8c 83       	std	Y+4, r24	; 0x04
    197c:	1a 83       	std	Y+2, r17	; 0x02
    197e:	09 83       	std	Y+1, r16	; 0x01
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	9f e7       	ldi	r25, 0x7F	; 127
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
    1988:	ae 01       	movw	r20, r28
    198a:	47 5e       	subi	r20, 0xE7	; 231
    198c:	5f 4f       	sbci	r21, 0xFF	; 255
    198e:	6f 89       	ldd	r22, Y+23	; 0x17
    1990:	78 8d       	ldd	r23, Y+24	; 0x18
    1992:	ce 01       	movw	r24, r28
    1994:	01 96       	adiw	r24, 0x01	; 1
    1996:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <vfprintf>
    199a:	ef 81       	ldd	r30, Y+7	; 0x07
    199c:	f8 85       	ldd	r31, Y+8	; 0x08
    199e:	e0 0f       	add	r30, r16
    19a0:	f1 1f       	adc	r31, r17
    19a2:	10 82       	st	Z, r1
    19a4:	2e 96       	adiw	r28, 0x0e	; 14
    19a6:	e4 e0       	ldi	r30, 0x04	; 4
    19a8:	0c 94 a1 0f 	jmp	0x1f42	; 0x1f42 <__epilogue_restores__+0x1c>

000019ac <vfprintf>:
    19ac:	ab e0       	ldi	r26, 0x0B	; 11
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	ec ed       	ldi	r30, 0xDC	; 220
    19b2:	fc e0       	ldi	r31, 0x0C	; 12
    19b4:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__prologue_saves__>
    19b8:	6c 01       	movw	r12, r24
    19ba:	7b 01       	movw	r14, r22
    19bc:	8a 01       	movw	r16, r20
    19be:	fc 01       	movw	r30, r24
    19c0:	17 82       	std	Z+7, r1	; 0x07
    19c2:	16 82       	std	Z+6, r1	; 0x06
    19c4:	83 81       	ldd	r24, Z+3	; 0x03
    19c6:	81 ff       	sbrs	r24, 1
    19c8:	cc c1       	rjmp	.+920    	; 0x1d62 <vfprintf+0x3b6>
    19ca:	ce 01       	movw	r24, r28
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	3c 01       	movw	r6, r24
    19d0:	f6 01       	movw	r30, r12
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	f7 01       	movw	r30, r14
    19d6:	93 fd       	sbrc	r25, 3
    19d8:	85 91       	lpm	r24, Z+
    19da:	93 ff       	sbrs	r25, 3
    19dc:	81 91       	ld	r24, Z+
    19de:	7f 01       	movw	r14, r30
    19e0:	88 23       	and	r24, r24
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <vfprintf+0x3a>
    19e4:	ba c1       	rjmp	.+884    	; 0x1d5a <vfprintf+0x3ae>
    19e6:	85 32       	cpi	r24, 0x25	; 37
    19e8:	39 f4       	brne	.+14     	; 0x19f8 <vfprintf+0x4c>
    19ea:	93 fd       	sbrc	r25, 3
    19ec:	85 91       	lpm	r24, Z+
    19ee:	93 ff       	sbrs	r25, 3
    19f0:	81 91       	ld	r24, Z+
    19f2:	7f 01       	movw	r14, r30
    19f4:	85 32       	cpi	r24, 0x25	; 37
    19f6:	29 f4       	brne	.+10     	; 0x1a02 <vfprintf+0x56>
    19f8:	b6 01       	movw	r22, r12
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1a00:	e7 cf       	rjmp	.-50     	; 0x19d0 <vfprintf+0x24>
    1a02:	91 2c       	mov	r9, r1
    1a04:	21 2c       	mov	r2, r1
    1a06:	31 2c       	mov	r3, r1
    1a08:	ff e1       	ldi	r31, 0x1F	; 31
    1a0a:	f3 15       	cp	r31, r3
    1a0c:	d8 f0       	brcs	.+54     	; 0x1a44 <vfprintf+0x98>
    1a0e:	8b 32       	cpi	r24, 0x2B	; 43
    1a10:	79 f0       	breq	.+30     	; 0x1a30 <vfprintf+0x84>
    1a12:	38 f4       	brcc	.+14     	; 0x1a22 <vfprintf+0x76>
    1a14:	80 32       	cpi	r24, 0x20	; 32
    1a16:	79 f0       	breq	.+30     	; 0x1a36 <vfprintf+0x8a>
    1a18:	83 32       	cpi	r24, 0x23	; 35
    1a1a:	a1 f4       	brne	.+40     	; 0x1a44 <vfprintf+0x98>
    1a1c:	23 2d       	mov	r18, r3
    1a1e:	20 61       	ori	r18, 0x10	; 16
    1a20:	1d c0       	rjmp	.+58     	; 0x1a5c <vfprintf+0xb0>
    1a22:	8d 32       	cpi	r24, 0x2D	; 45
    1a24:	61 f0       	breq	.+24     	; 0x1a3e <vfprintf+0x92>
    1a26:	80 33       	cpi	r24, 0x30	; 48
    1a28:	69 f4       	brne	.+26     	; 0x1a44 <vfprintf+0x98>
    1a2a:	23 2d       	mov	r18, r3
    1a2c:	21 60       	ori	r18, 0x01	; 1
    1a2e:	16 c0       	rjmp	.+44     	; 0x1a5c <vfprintf+0xb0>
    1a30:	83 2d       	mov	r24, r3
    1a32:	82 60       	ori	r24, 0x02	; 2
    1a34:	38 2e       	mov	r3, r24
    1a36:	e3 2d       	mov	r30, r3
    1a38:	e4 60       	ori	r30, 0x04	; 4
    1a3a:	3e 2e       	mov	r3, r30
    1a3c:	2a c0       	rjmp	.+84     	; 0x1a92 <vfprintf+0xe6>
    1a3e:	f3 2d       	mov	r31, r3
    1a40:	f8 60       	ori	r31, 0x08	; 8
    1a42:	1d c0       	rjmp	.+58     	; 0x1a7e <vfprintf+0xd2>
    1a44:	37 fc       	sbrc	r3, 7
    1a46:	2d c0       	rjmp	.+90     	; 0x1aa2 <vfprintf+0xf6>
    1a48:	20 ed       	ldi	r18, 0xD0	; 208
    1a4a:	28 0f       	add	r18, r24
    1a4c:	2a 30       	cpi	r18, 0x0A	; 10
    1a4e:	40 f0       	brcs	.+16     	; 0x1a60 <vfprintf+0xb4>
    1a50:	8e 32       	cpi	r24, 0x2E	; 46
    1a52:	b9 f4       	brne	.+46     	; 0x1a82 <vfprintf+0xd6>
    1a54:	36 fc       	sbrc	r3, 6
    1a56:	81 c1       	rjmp	.+770    	; 0x1d5a <vfprintf+0x3ae>
    1a58:	23 2d       	mov	r18, r3
    1a5a:	20 64       	ori	r18, 0x40	; 64
    1a5c:	32 2e       	mov	r3, r18
    1a5e:	19 c0       	rjmp	.+50     	; 0x1a92 <vfprintf+0xe6>
    1a60:	36 fe       	sbrs	r3, 6
    1a62:	06 c0       	rjmp	.+12     	; 0x1a70 <vfprintf+0xc4>
    1a64:	8a e0       	ldi	r24, 0x0A	; 10
    1a66:	98 9e       	mul	r9, r24
    1a68:	20 0d       	add	r18, r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	92 2e       	mov	r9, r18
    1a6e:	11 c0       	rjmp	.+34     	; 0x1a92 <vfprintf+0xe6>
    1a70:	ea e0       	ldi	r30, 0x0A	; 10
    1a72:	2e 9e       	mul	r2, r30
    1a74:	20 0d       	add	r18, r0
    1a76:	11 24       	eor	r1, r1
    1a78:	22 2e       	mov	r2, r18
    1a7a:	f3 2d       	mov	r31, r3
    1a7c:	f0 62       	ori	r31, 0x20	; 32
    1a7e:	3f 2e       	mov	r3, r31
    1a80:	08 c0       	rjmp	.+16     	; 0x1a92 <vfprintf+0xe6>
    1a82:	8c 36       	cpi	r24, 0x6C	; 108
    1a84:	21 f4       	brne	.+8      	; 0x1a8e <vfprintf+0xe2>
    1a86:	83 2d       	mov	r24, r3
    1a88:	80 68       	ori	r24, 0x80	; 128
    1a8a:	38 2e       	mov	r3, r24
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <vfprintf+0xe6>
    1a8e:	88 36       	cpi	r24, 0x68	; 104
    1a90:	41 f4       	brne	.+16     	; 0x1aa2 <vfprintf+0xf6>
    1a92:	f7 01       	movw	r30, r14
    1a94:	93 fd       	sbrc	r25, 3
    1a96:	85 91       	lpm	r24, Z+
    1a98:	93 ff       	sbrs	r25, 3
    1a9a:	81 91       	ld	r24, Z+
    1a9c:	7f 01       	movw	r14, r30
    1a9e:	81 11       	cpse	r24, r1
    1aa0:	b3 cf       	rjmp	.-154    	; 0x1a08 <vfprintf+0x5c>
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	9f 7d       	andi	r25, 0xDF	; 223
    1aa6:	95 54       	subi	r25, 0x45	; 69
    1aa8:	93 30       	cpi	r25, 0x03	; 3
    1aaa:	28 f4       	brcc	.+10     	; 0x1ab6 <vfprintf+0x10a>
    1aac:	0c 5f       	subi	r16, 0xFC	; 252
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	9f e3       	ldi	r25, 0x3F	; 63
    1ab2:	99 83       	std	Y+1, r25	; 0x01
    1ab4:	0d c0       	rjmp	.+26     	; 0x1ad0 <vfprintf+0x124>
    1ab6:	83 36       	cpi	r24, 0x63	; 99
    1ab8:	31 f0       	breq	.+12     	; 0x1ac6 <vfprintf+0x11a>
    1aba:	83 37       	cpi	r24, 0x73	; 115
    1abc:	71 f0       	breq	.+28     	; 0x1ada <vfprintf+0x12e>
    1abe:	83 35       	cpi	r24, 0x53	; 83
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <vfprintf+0x118>
    1ac2:	59 c0       	rjmp	.+178    	; 0x1b76 <vfprintf+0x1ca>
    1ac4:	21 c0       	rjmp	.+66     	; 0x1b08 <vfprintf+0x15c>
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	80 81       	ld	r24, Z
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	0e 5f       	subi	r16, 0xFE	; 254
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad0:	88 24       	eor	r8, r8
    1ad2:	83 94       	inc	r8
    1ad4:	91 2c       	mov	r9, r1
    1ad6:	53 01       	movw	r10, r6
    1ad8:	13 c0       	rjmp	.+38     	; 0x1b00 <vfprintf+0x154>
    1ada:	28 01       	movw	r4, r16
    1adc:	f2 e0       	ldi	r31, 0x02	; 2
    1ade:	4f 0e       	add	r4, r31
    1ae0:	51 1c       	adc	r5, r1
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	a0 80       	ld	r10, Z
    1ae6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ae8:	36 fe       	sbrs	r3, 6
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <vfprintf+0x146>
    1aec:	69 2d       	mov	r22, r9
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <vfprintf+0x14a>
    1af2:	6f ef       	ldi	r22, 0xFF	; 255
    1af4:	7f ef       	ldi	r23, 0xFF	; 255
    1af6:	c5 01       	movw	r24, r10
    1af8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <strnlen>
    1afc:	4c 01       	movw	r8, r24
    1afe:	82 01       	movw	r16, r4
    1b00:	f3 2d       	mov	r31, r3
    1b02:	ff 77       	andi	r31, 0x7F	; 127
    1b04:	3f 2e       	mov	r3, r31
    1b06:	16 c0       	rjmp	.+44     	; 0x1b34 <vfprintf+0x188>
    1b08:	28 01       	movw	r4, r16
    1b0a:	22 e0       	ldi	r18, 0x02	; 2
    1b0c:	42 0e       	add	r4, r18
    1b0e:	51 1c       	adc	r5, r1
    1b10:	f8 01       	movw	r30, r16
    1b12:	a0 80       	ld	r10, Z
    1b14:	b1 80       	ldd	r11, Z+1	; 0x01
    1b16:	36 fe       	sbrs	r3, 6
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <vfprintf+0x174>
    1b1a:	69 2d       	mov	r22, r9
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <vfprintf+0x178>
    1b20:	6f ef       	ldi	r22, 0xFF	; 255
    1b22:	7f ef       	ldi	r23, 0xFF	; 255
    1b24:	c5 01       	movw	r24, r10
    1b26:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <strnlen_P>
    1b2a:	4c 01       	movw	r8, r24
    1b2c:	f3 2d       	mov	r31, r3
    1b2e:	f0 68       	ori	r31, 0x80	; 128
    1b30:	3f 2e       	mov	r3, r31
    1b32:	82 01       	movw	r16, r4
    1b34:	33 fc       	sbrc	r3, 3
    1b36:	1b c0       	rjmp	.+54     	; 0x1b6e <vfprintf+0x1c2>
    1b38:	82 2d       	mov	r24, r2
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	88 16       	cp	r8, r24
    1b3e:	99 06       	cpc	r9, r25
    1b40:	b0 f4       	brcc	.+44     	; 0x1b6e <vfprintf+0x1c2>
    1b42:	b6 01       	movw	r22, r12
    1b44:	80 e2       	ldi	r24, 0x20	; 32
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1b4c:	2a 94       	dec	r2
    1b4e:	f4 cf       	rjmp	.-24     	; 0x1b38 <vfprintf+0x18c>
    1b50:	f5 01       	movw	r30, r10
    1b52:	37 fc       	sbrc	r3, 7
    1b54:	85 91       	lpm	r24, Z+
    1b56:	37 fe       	sbrs	r3, 7
    1b58:	81 91       	ld	r24, Z+
    1b5a:	5f 01       	movw	r10, r30
    1b5c:	b6 01       	movw	r22, r12
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1b64:	21 10       	cpse	r2, r1
    1b66:	2a 94       	dec	r2
    1b68:	21 e0       	ldi	r18, 0x01	; 1
    1b6a:	82 1a       	sub	r8, r18
    1b6c:	91 08       	sbc	r9, r1
    1b6e:	81 14       	cp	r8, r1
    1b70:	91 04       	cpc	r9, r1
    1b72:	71 f7       	brne	.-36     	; 0x1b50 <vfprintf+0x1a4>
    1b74:	e8 c0       	rjmp	.+464    	; 0x1d46 <vfprintf+0x39a>
    1b76:	84 36       	cpi	r24, 0x64	; 100
    1b78:	11 f0       	breq	.+4      	; 0x1b7e <vfprintf+0x1d2>
    1b7a:	89 36       	cpi	r24, 0x69	; 105
    1b7c:	41 f5       	brne	.+80     	; 0x1bce <vfprintf+0x222>
    1b7e:	f8 01       	movw	r30, r16
    1b80:	37 fe       	sbrs	r3, 7
    1b82:	07 c0       	rjmp	.+14     	; 0x1b92 <vfprintf+0x1e6>
    1b84:	60 81       	ld	r22, Z
    1b86:	71 81       	ldd	r23, Z+1	; 0x01
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	0c 5f       	subi	r16, 0xFC	; 252
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	08 c0       	rjmp	.+16     	; 0x1ba2 <vfprintf+0x1f6>
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	07 2e       	mov	r0, r23
    1b98:	00 0c       	add	r0, r0
    1b9a:	88 0b       	sbc	r24, r24
    1b9c:	99 0b       	sbc	r25, r25
    1b9e:	0e 5f       	subi	r16, 0xFE	; 254
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	f3 2d       	mov	r31, r3
    1ba4:	ff 76       	andi	r31, 0x6F	; 111
    1ba6:	3f 2e       	mov	r3, r31
    1ba8:	97 ff       	sbrs	r25, 7
    1baa:	09 c0       	rjmp	.+18     	; 0x1bbe <vfprintf+0x212>
    1bac:	90 95       	com	r25
    1bae:	80 95       	com	r24
    1bb0:	70 95       	com	r23
    1bb2:	61 95       	neg	r22
    1bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bba:	f0 68       	ori	r31, 0x80	; 128
    1bbc:	3f 2e       	mov	r3, r31
    1bbe:	2a e0       	ldi	r18, 0x0A	; 10
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	a3 01       	movw	r20, r6
    1bc4:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__ultoa_invert>
    1bc8:	88 2e       	mov	r8, r24
    1bca:	86 18       	sub	r8, r6
    1bcc:	45 c0       	rjmp	.+138    	; 0x1c58 <vfprintf+0x2ac>
    1bce:	85 37       	cpi	r24, 0x75	; 117
    1bd0:	31 f4       	brne	.+12     	; 0x1bde <vfprintf+0x232>
    1bd2:	23 2d       	mov	r18, r3
    1bd4:	2f 7e       	andi	r18, 0xEF	; 239
    1bd6:	b2 2e       	mov	r11, r18
    1bd8:	2a e0       	ldi	r18, 0x0A	; 10
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	25 c0       	rjmp	.+74     	; 0x1c28 <vfprintf+0x27c>
    1bde:	93 2d       	mov	r25, r3
    1be0:	99 7f       	andi	r25, 0xF9	; 249
    1be2:	b9 2e       	mov	r11, r25
    1be4:	8f 36       	cpi	r24, 0x6F	; 111
    1be6:	c1 f0       	breq	.+48     	; 0x1c18 <vfprintf+0x26c>
    1be8:	18 f4       	brcc	.+6      	; 0x1bf0 <vfprintf+0x244>
    1bea:	88 35       	cpi	r24, 0x58	; 88
    1bec:	79 f0       	breq	.+30     	; 0x1c0c <vfprintf+0x260>
    1bee:	b5 c0       	rjmp	.+362    	; 0x1d5a <vfprintf+0x3ae>
    1bf0:	80 37       	cpi	r24, 0x70	; 112
    1bf2:	19 f0       	breq	.+6      	; 0x1bfa <vfprintf+0x24e>
    1bf4:	88 37       	cpi	r24, 0x78	; 120
    1bf6:	21 f0       	breq	.+8      	; 0x1c00 <vfprintf+0x254>
    1bf8:	b0 c0       	rjmp	.+352    	; 0x1d5a <vfprintf+0x3ae>
    1bfa:	e9 2f       	mov	r30, r25
    1bfc:	e0 61       	ori	r30, 0x10	; 16
    1bfe:	be 2e       	mov	r11, r30
    1c00:	b4 fe       	sbrs	r11, 4
    1c02:	0d c0       	rjmp	.+26     	; 0x1c1e <vfprintf+0x272>
    1c04:	fb 2d       	mov	r31, r11
    1c06:	f4 60       	ori	r31, 0x04	; 4
    1c08:	bf 2e       	mov	r11, r31
    1c0a:	09 c0       	rjmp	.+18     	; 0x1c1e <vfprintf+0x272>
    1c0c:	34 fe       	sbrs	r3, 4
    1c0e:	0a c0       	rjmp	.+20     	; 0x1c24 <vfprintf+0x278>
    1c10:	29 2f       	mov	r18, r25
    1c12:	26 60       	ori	r18, 0x06	; 6
    1c14:	b2 2e       	mov	r11, r18
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <vfprintf+0x278>
    1c18:	28 e0       	ldi	r18, 0x08	; 8
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	05 c0       	rjmp	.+10     	; 0x1c28 <vfprintf+0x27c>
    1c1e:	20 e1       	ldi	r18, 0x10	; 16
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <vfprintf+0x27c>
    1c24:	20 e1       	ldi	r18, 0x10	; 16
    1c26:	32 e0       	ldi	r19, 0x02	; 2
    1c28:	f8 01       	movw	r30, r16
    1c2a:	b7 fe       	sbrs	r11, 7
    1c2c:	07 c0       	rjmp	.+14     	; 0x1c3c <vfprintf+0x290>
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	0c 5f       	subi	r16, 0xFC	; 252
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	06 c0       	rjmp	.+12     	; 0x1c48 <vfprintf+0x29c>
    1c3c:	60 81       	ld	r22, Z
    1c3e:	71 81       	ldd	r23, Z+1	; 0x01
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 5f       	subi	r16, 0xFE	; 254
    1c46:	1f 4f       	sbci	r17, 0xFF	; 255
    1c48:	a3 01       	movw	r20, r6
    1c4a:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__ultoa_invert>
    1c4e:	88 2e       	mov	r8, r24
    1c50:	86 18       	sub	r8, r6
    1c52:	fb 2d       	mov	r31, r11
    1c54:	ff 77       	andi	r31, 0x7F	; 127
    1c56:	3f 2e       	mov	r3, r31
    1c58:	36 fe       	sbrs	r3, 6
    1c5a:	0d c0       	rjmp	.+26     	; 0x1c76 <vfprintf+0x2ca>
    1c5c:	23 2d       	mov	r18, r3
    1c5e:	2e 7f       	andi	r18, 0xFE	; 254
    1c60:	a2 2e       	mov	r10, r18
    1c62:	89 14       	cp	r8, r9
    1c64:	58 f4       	brcc	.+22     	; 0x1c7c <vfprintf+0x2d0>
    1c66:	34 fe       	sbrs	r3, 4
    1c68:	0b c0       	rjmp	.+22     	; 0x1c80 <vfprintf+0x2d4>
    1c6a:	32 fc       	sbrc	r3, 2
    1c6c:	09 c0       	rjmp	.+18     	; 0x1c80 <vfprintf+0x2d4>
    1c6e:	83 2d       	mov	r24, r3
    1c70:	8e 7e       	andi	r24, 0xEE	; 238
    1c72:	a8 2e       	mov	r10, r24
    1c74:	05 c0       	rjmp	.+10     	; 0x1c80 <vfprintf+0x2d4>
    1c76:	b8 2c       	mov	r11, r8
    1c78:	a3 2c       	mov	r10, r3
    1c7a:	03 c0       	rjmp	.+6      	; 0x1c82 <vfprintf+0x2d6>
    1c7c:	b8 2c       	mov	r11, r8
    1c7e:	01 c0       	rjmp	.+2      	; 0x1c82 <vfprintf+0x2d6>
    1c80:	b9 2c       	mov	r11, r9
    1c82:	a4 fe       	sbrs	r10, 4
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <vfprintf+0x2f8>
    1c86:	fe 01       	movw	r30, r28
    1c88:	e8 0d       	add	r30, r8
    1c8a:	f1 1d       	adc	r31, r1
    1c8c:	80 81       	ld	r24, Z
    1c8e:	80 33       	cpi	r24, 0x30	; 48
    1c90:	21 f4       	brne	.+8      	; 0x1c9a <vfprintf+0x2ee>
    1c92:	9a 2d       	mov	r25, r10
    1c94:	99 7e       	andi	r25, 0xE9	; 233
    1c96:	a9 2e       	mov	r10, r25
    1c98:	09 c0       	rjmp	.+18     	; 0x1cac <vfprintf+0x300>
    1c9a:	a2 fe       	sbrs	r10, 2
    1c9c:	06 c0       	rjmp	.+12     	; 0x1caa <vfprintf+0x2fe>
    1c9e:	b3 94       	inc	r11
    1ca0:	b3 94       	inc	r11
    1ca2:	04 c0       	rjmp	.+8      	; 0x1cac <vfprintf+0x300>
    1ca4:	8a 2d       	mov	r24, r10
    1ca6:	86 78       	andi	r24, 0x86	; 134
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <vfprintf+0x300>
    1caa:	b3 94       	inc	r11
    1cac:	a3 fc       	sbrc	r10, 3
    1cae:	11 c0       	rjmp	.+34     	; 0x1cd2 <vfprintf+0x326>
    1cb0:	a0 fe       	sbrs	r10, 0
    1cb2:	06 c0       	rjmp	.+12     	; 0x1cc0 <vfprintf+0x314>
    1cb4:	b2 14       	cp	r11, r2
    1cb6:	88 f4       	brcc	.+34     	; 0x1cda <vfprintf+0x32e>
    1cb8:	28 0c       	add	r2, r8
    1cba:	92 2c       	mov	r9, r2
    1cbc:	9b 18       	sub	r9, r11
    1cbe:	0e c0       	rjmp	.+28     	; 0x1cdc <vfprintf+0x330>
    1cc0:	b2 14       	cp	r11, r2
    1cc2:	60 f4       	brcc	.+24     	; 0x1cdc <vfprintf+0x330>
    1cc4:	b6 01       	movw	r22, r12
    1cc6:	80 e2       	ldi	r24, 0x20	; 32
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1cce:	b3 94       	inc	r11
    1cd0:	f7 cf       	rjmp	.-18     	; 0x1cc0 <vfprintf+0x314>
    1cd2:	b2 14       	cp	r11, r2
    1cd4:	18 f4       	brcc	.+6      	; 0x1cdc <vfprintf+0x330>
    1cd6:	2b 18       	sub	r2, r11
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <vfprintf+0x332>
    1cda:	98 2c       	mov	r9, r8
    1cdc:	21 2c       	mov	r2, r1
    1cde:	a4 fe       	sbrs	r10, 4
    1ce0:	10 c0       	rjmp	.+32     	; 0x1d02 <vfprintf+0x356>
    1ce2:	b6 01       	movw	r22, r12
    1ce4:	80 e3       	ldi	r24, 0x30	; 48
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1cec:	a2 fe       	sbrs	r10, 2
    1cee:	17 c0       	rjmp	.+46     	; 0x1d1e <vfprintf+0x372>
    1cf0:	a1 fc       	sbrc	r10, 1
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <vfprintf+0x34e>
    1cf4:	88 e7       	ldi	r24, 0x78	; 120
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <vfprintf+0x352>
    1cfa:	88 e5       	ldi	r24, 0x58	; 88
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	b6 01       	movw	r22, r12
    1d00:	0c c0       	rjmp	.+24     	; 0x1d1a <vfprintf+0x36e>
    1d02:	8a 2d       	mov	r24, r10
    1d04:	86 78       	andi	r24, 0x86	; 134
    1d06:	59 f0       	breq	.+22     	; 0x1d1e <vfprintf+0x372>
    1d08:	a1 fe       	sbrs	r10, 1
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <vfprintf+0x364>
    1d0c:	8b e2       	ldi	r24, 0x2B	; 43
    1d0e:	01 c0       	rjmp	.+2      	; 0x1d12 <vfprintf+0x366>
    1d10:	80 e2       	ldi	r24, 0x20	; 32
    1d12:	a7 fc       	sbrc	r10, 7
    1d14:	8d e2       	ldi	r24, 0x2D	; 45
    1d16:	b6 01       	movw	r22, r12
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1d1e:	89 14       	cp	r8, r9
    1d20:	38 f4       	brcc	.+14     	; 0x1d30 <vfprintf+0x384>
    1d22:	b6 01       	movw	r22, r12
    1d24:	80 e3       	ldi	r24, 0x30	; 48
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1d2c:	9a 94       	dec	r9
    1d2e:	f7 cf       	rjmp	.-18     	; 0x1d1e <vfprintf+0x372>
    1d30:	8a 94       	dec	r8
    1d32:	f3 01       	movw	r30, r6
    1d34:	e8 0d       	add	r30, r8
    1d36:	f1 1d       	adc	r31, r1
    1d38:	80 81       	ld	r24, Z
    1d3a:	b6 01       	movw	r22, r12
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1d42:	81 10       	cpse	r8, r1
    1d44:	f5 cf       	rjmp	.-22     	; 0x1d30 <vfprintf+0x384>
    1d46:	22 20       	and	r2, r2
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <vfprintf+0x3a0>
    1d4a:	42 ce       	rjmp	.-892    	; 0x19d0 <vfprintf+0x24>
    1d4c:	b6 01       	movw	r22, r12
    1d4e:	80 e2       	ldi	r24, 0x20	; 32
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1d56:	2a 94       	dec	r2
    1d58:	f6 cf       	rjmp	.-20     	; 0x1d46 <vfprintf+0x39a>
    1d5a:	f6 01       	movw	r30, r12
    1d5c:	86 81       	ldd	r24, Z+6	; 0x06
    1d5e:	97 81       	ldd	r25, Z+7	; 0x07
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <vfprintf+0x3ba>
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	9f ef       	ldi	r25, 0xFF	; 255
    1d66:	2b 96       	adiw	r28, 0x0b	; 11
    1d68:	e2 e1       	ldi	r30, 0x12	; 18
    1d6a:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__epilogue_restores__>

00001d6e <strnlen_P>:
    1d6e:	fc 01       	movw	r30, r24
    1d70:	05 90       	lpm	r0, Z+
    1d72:	61 50       	subi	r22, 0x01	; 1
    1d74:	70 40       	sbci	r23, 0x00	; 0
    1d76:	01 10       	cpse	r0, r1
    1d78:	d8 f7       	brcc	.-10     	; 0x1d70 <strnlen_P+0x2>
    1d7a:	80 95       	com	r24
    1d7c:	90 95       	com	r25
    1d7e:	8e 0f       	add	r24, r30
    1d80:	9f 1f       	adc	r25, r31
    1d82:	08 95       	ret

00001d84 <strnlen>:
    1d84:	fc 01       	movw	r30, r24
    1d86:	61 50       	subi	r22, 0x01	; 1
    1d88:	70 40       	sbci	r23, 0x00	; 0
    1d8a:	01 90       	ld	r0, Z+
    1d8c:	01 10       	cpse	r0, r1
    1d8e:	d8 f7       	brcc	.-10     	; 0x1d86 <strnlen+0x2>
    1d90:	80 95       	com	r24
    1d92:	90 95       	com	r25
    1d94:	8e 0f       	add	r24, r30
    1d96:	9f 1f       	adc	r25, r31
    1d98:	08 95       	ret

00001d9a <strrev>:
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	67 2f       	mov	r22, r23
    1da0:	71 91       	ld	r23, Z+
    1da2:	77 23       	and	r23, r23
    1da4:	e1 f7       	brne	.-8      	; 0x1d9e <strrev+0x4>
    1da6:	32 97       	sbiw	r30, 0x02	; 2
    1da8:	04 c0       	rjmp	.+8      	; 0x1db2 <strrev+0x18>
    1daa:	7c 91       	ld	r23, X
    1dac:	6d 93       	st	X+, r22
    1dae:	70 83       	st	Z, r23
    1db0:	62 91       	ld	r22, -Z
    1db2:	ae 17       	cp	r26, r30
    1db4:	bf 07       	cpc	r27, r31
    1db6:	c8 f3       	brcs	.-14     	; 0x1daa <strrev+0x10>
    1db8:	08 95       	ret

00001dba <fputc>:
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	fb 01       	movw	r30, r22
    1dc4:	23 81       	ldd	r18, Z+3	; 0x03
    1dc6:	21 fd       	sbrc	r18, 1
    1dc8:	03 c0       	rjmp	.+6      	; 0x1dd0 <fputc+0x16>
    1dca:	8f ef       	ldi	r24, 0xFF	; 255
    1dcc:	9f ef       	ldi	r25, 0xFF	; 255
    1dce:	2c c0       	rjmp	.+88     	; 0x1e28 <fputc+0x6e>
    1dd0:	22 ff       	sbrs	r18, 2
    1dd2:	16 c0       	rjmp	.+44     	; 0x1e00 <fputc+0x46>
    1dd4:	46 81       	ldd	r20, Z+6	; 0x06
    1dd6:	57 81       	ldd	r21, Z+7	; 0x07
    1dd8:	24 81       	ldd	r18, Z+4	; 0x04
    1dda:	35 81       	ldd	r19, Z+5	; 0x05
    1ddc:	42 17       	cp	r20, r18
    1dde:	53 07       	cpc	r21, r19
    1de0:	44 f4       	brge	.+16     	; 0x1df2 <fputc+0x38>
    1de2:	a0 81       	ld	r26, Z
    1de4:	b1 81       	ldd	r27, Z+1	; 0x01
    1de6:	9d 01       	movw	r18, r26
    1de8:	2f 5f       	subi	r18, 0xFF	; 255
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	31 83       	std	Z+1, r19	; 0x01
    1dee:	20 83       	st	Z, r18
    1df0:	8c 93       	st	X, r24
    1df2:	26 81       	ldd	r18, Z+6	; 0x06
    1df4:	37 81       	ldd	r19, Z+7	; 0x07
    1df6:	2f 5f       	subi	r18, 0xFF	; 255
    1df8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfa:	37 83       	std	Z+7, r19	; 0x07
    1dfc:	26 83       	std	Z+6, r18	; 0x06
    1dfe:	14 c0       	rjmp	.+40     	; 0x1e28 <fputc+0x6e>
    1e00:	8b 01       	movw	r16, r22
    1e02:	ec 01       	movw	r28, r24
    1e04:	fb 01       	movw	r30, r22
    1e06:	00 84       	ldd	r0, Z+8	; 0x08
    1e08:	f1 85       	ldd	r31, Z+9	; 0x09
    1e0a:	e0 2d       	mov	r30, r0
    1e0c:	09 95       	icall
    1e0e:	89 2b       	or	r24, r25
    1e10:	e1 f6       	brne	.-72     	; 0x1dca <fputc+0x10>
    1e12:	d8 01       	movw	r26, r16
    1e14:	16 96       	adiw	r26, 0x06	; 6
    1e16:	8d 91       	ld	r24, X+
    1e18:	9c 91       	ld	r25, X
    1e1a:	17 97       	sbiw	r26, 0x07	; 7
    1e1c:	01 96       	adiw	r24, 0x01	; 1
    1e1e:	17 96       	adiw	r26, 0x07	; 7
    1e20:	9c 93       	st	X, r25
    1e22:	8e 93       	st	-X, r24
    1e24:	16 97       	sbiw	r26, 0x06	; 6
    1e26:	ce 01       	movw	r24, r28
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	1f 91       	pop	r17
    1e2e:	0f 91       	pop	r16
    1e30:	08 95       	ret

00001e32 <__ultoa_invert>:
    1e32:	fa 01       	movw	r30, r20
    1e34:	aa 27       	eor	r26, r26
    1e36:	28 30       	cpi	r18, 0x08	; 8
    1e38:	51 f1       	breq	.+84     	; 0x1e8e <__ultoa_invert+0x5c>
    1e3a:	20 31       	cpi	r18, 0x10	; 16
    1e3c:	81 f1       	breq	.+96     	; 0x1e9e <__ultoa_invert+0x6c>
    1e3e:	e8 94       	clt
    1e40:	6f 93       	push	r22
    1e42:	6e 7f       	andi	r22, 0xFE	; 254
    1e44:	6e 5f       	subi	r22, 0xFE	; 254
    1e46:	7f 4f       	sbci	r23, 0xFF	; 255
    1e48:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4c:	af 4f       	sbci	r26, 0xFF	; 255
    1e4e:	b1 e0       	ldi	r27, 0x01	; 1
    1e50:	3e d0       	rcall	.+124    	; 0x1ece <__ultoa_invert+0x9c>
    1e52:	b4 e0       	ldi	r27, 0x04	; 4
    1e54:	3c d0       	rcall	.+120    	; 0x1ece <__ultoa_invert+0x9c>
    1e56:	67 0f       	add	r22, r23
    1e58:	78 1f       	adc	r23, r24
    1e5a:	89 1f       	adc	r24, r25
    1e5c:	9a 1f       	adc	r25, r26
    1e5e:	a1 1d       	adc	r26, r1
    1e60:	68 0f       	add	r22, r24
    1e62:	79 1f       	adc	r23, r25
    1e64:	8a 1f       	adc	r24, r26
    1e66:	91 1d       	adc	r25, r1
    1e68:	a1 1d       	adc	r26, r1
    1e6a:	6a 0f       	add	r22, r26
    1e6c:	71 1d       	adc	r23, r1
    1e6e:	81 1d       	adc	r24, r1
    1e70:	91 1d       	adc	r25, r1
    1e72:	a1 1d       	adc	r26, r1
    1e74:	20 d0       	rcall	.+64     	; 0x1eb6 <__ultoa_invert+0x84>
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <__ultoa_invert+0x48>
    1e78:	68 94       	set
    1e7a:	3f 91       	pop	r19
    1e7c:	2a e0       	ldi	r18, 0x0A	; 10
    1e7e:	26 9f       	mul	r18, r22
    1e80:	11 24       	eor	r1, r1
    1e82:	30 19       	sub	r19, r0
    1e84:	30 5d       	subi	r19, 0xD0	; 208
    1e86:	31 93       	st	Z+, r19
    1e88:	de f6       	brtc	.-74     	; 0x1e40 <__ultoa_invert+0xe>
    1e8a:	cf 01       	movw	r24, r30
    1e8c:	08 95       	ret
    1e8e:	46 2f       	mov	r20, r22
    1e90:	47 70       	andi	r20, 0x07	; 7
    1e92:	40 5d       	subi	r20, 0xD0	; 208
    1e94:	41 93       	st	Z+, r20
    1e96:	b3 e0       	ldi	r27, 0x03	; 3
    1e98:	0f d0       	rcall	.+30     	; 0x1eb8 <__ultoa_invert+0x86>
    1e9a:	c9 f7       	brne	.-14     	; 0x1e8e <__ultoa_invert+0x5c>
    1e9c:	f6 cf       	rjmp	.-20     	; 0x1e8a <__ultoa_invert+0x58>
    1e9e:	46 2f       	mov	r20, r22
    1ea0:	4f 70       	andi	r20, 0x0F	; 15
    1ea2:	40 5d       	subi	r20, 0xD0	; 208
    1ea4:	4a 33       	cpi	r20, 0x3A	; 58
    1ea6:	18 f0       	brcs	.+6      	; 0x1eae <__ultoa_invert+0x7c>
    1ea8:	49 5d       	subi	r20, 0xD9	; 217
    1eaa:	31 fd       	sbrc	r19, 1
    1eac:	40 52       	subi	r20, 0x20	; 32
    1eae:	41 93       	st	Z+, r20
    1eb0:	02 d0       	rcall	.+4      	; 0x1eb6 <__ultoa_invert+0x84>
    1eb2:	a9 f7       	brne	.-22     	; 0x1e9e <__ultoa_invert+0x6c>
    1eb4:	ea cf       	rjmp	.-44     	; 0x1e8a <__ultoa_invert+0x58>
    1eb6:	b4 e0       	ldi	r27, 0x04	; 4
    1eb8:	a6 95       	lsr	r26
    1eba:	97 95       	ror	r25
    1ebc:	87 95       	ror	r24
    1ebe:	77 95       	ror	r23
    1ec0:	67 95       	ror	r22
    1ec2:	ba 95       	dec	r27
    1ec4:	c9 f7       	brne	.-14     	; 0x1eb8 <__ultoa_invert+0x86>
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	61 05       	cpc	r22, r1
    1eca:	71 05       	cpc	r23, r1
    1ecc:	08 95       	ret
    1ece:	9b 01       	movw	r18, r22
    1ed0:	ac 01       	movw	r20, r24
    1ed2:	0a 2e       	mov	r0, r26
    1ed4:	06 94       	lsr	r0
    1ed6:	57 95       	ror	r21
    1ed8:	47 95       	ror	r20
    1eda:	37 95       	ror	r19
    1edc:	27 95       	ror	r18
    1ede:	ba 95       	dec	r27
    1ee0:	c9 f7       	brne	.-14     	; 0x1ed4 <__ultoa_invert+0xa2>
    1ee2:	62 0f       	add	r22, r18
    1ee4:	73 1f       	adc	r23, r19
    1ee6:	84 1f       	adc	r24, r20
    1ee8:	95 1f       	adc	r25, r21
    1eea:	a0 1d       	adc	r26, r0
    1eec:	08 95       	ret

00001eee <__prologue_saves__>:
    1eee:	2f 92       	push	r2
    1ef0:	3f 92       	push	r3
    1ef2:	4f 92       	push	r4
    1ef4:	5f 92       	push	r5
    1ef6:	6f 92       	push	r6
    1ef8:	7f 92       	push	r7
    1efa:	8f 92       	push	r8
    1efc:	9f 92       	push	r9
    1efe:	af 92       	push	r10
    1f00:	bf 92       	push	r11
    1f02:	cf 92       	push	r12
    1f04:	df 92       	push	r13
    1f06:	ef 92       	push	r14
    1f08:	ff 92       	push	r15
    1f0a:	0f 93       	push	r16
    1f0c:	1f 93       	push	r17
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	ca 1b       	sub	r28, r26
    1f18:	db 0b       	sbc	r29, r27
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	09 94       	ijmp

00001f26 <__epilogue_restores__>:
    1f26:	2a 88       	ldd	r2, Y+18	; 0x12
    1f28:	39 88       	ldd	r3, Y+17	; 0x11
    1f2a:	48 88       	ldd	r4, Y+16	; 0x10
    1f2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f30:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f32:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f34:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f36:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f38:	b9 84       	ldd	r11, Y+9	; 0x09
    1f3a:	c8 84       	ldd	r12, Y+8	; 0x08
    1f3c:	df 80       	ldd	r13, Y+7	; 0x07
    1f3e:	ee 80       	ldd	r14, Y+6	; 0x06
    1f40:	fd 80       	ldd	r15, Y+5	; 0x05
    1f42:	0c 81       	ldd	r16, Y+4	; 0x04
    1f44:	1b 81       	ldd	r17, Y+3	; 0x03
    1f46:	aa 81       	ldd	r26, Y+2	; 0x02
    1f48:	b9 81       	ldd	r27, Y+1	; 0x01
    1f4a:	ce 0f       	add	r28, r30
    1f4c:	d1 1d       	adc	r29, r1
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	ed 01       	movw	r28, r26
    1f5a:	08 95       	ret

00001f5c <_exit>:
    1f5c:	f8 94       	cli

00001f5e <__stop_program>:
    1f5e:	ff cf       	rjmp	.-2      	; 0x1f5e <__stop_program>
