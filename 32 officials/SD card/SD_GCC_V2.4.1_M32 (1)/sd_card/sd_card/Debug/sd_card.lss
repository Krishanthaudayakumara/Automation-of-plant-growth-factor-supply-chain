
sd_card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000313e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000313e  000031d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000253  00800080  00800080  000031f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000031f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00003260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003dc0  00000000  00000000  00003410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  000071d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002237  00000000  00000000  00007996  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000069c  00000000  00000000  00009bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c1e  00000000  00000000  0000a26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002dee  00000000  00000000  0000ae8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0000dc78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__ctors_end>
       4:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
       8:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
       c:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      10:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      14:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      18:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      1c:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      20:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      24:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      28:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      2c:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      30:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      34:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      38:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      3c:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      40:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      44:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      48:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      4c:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      50:	0c 94 97 03 	jmp	0x72e	; 0x72e <__bad_interrupt>
      54:	ab 05       	cpc	r26, r11
      56:	b0 05       	cpc	r27, r0
      58:	b5 05       	cpc	r27, r5
      5a:	ba 05       	cpc	r27, r10
      5c:	bf 05       	cpc	r27, r15
      5e:	c4 05       	cpc	r28, r4
      60:	c9 05       	cpc	r28, r9
      62:	fd 16       	cp	r15, r29
      64:	22 17       	cp	r18, r18
      66:	73 17       	cp	r23, r19
      68:	3e 18       	sub	r3, r14
      6a:	3e 18       	sub	r3, r14
      6c:	b1 17       	cp	r27, r17
      6e:	bd 17       	cp	r27, r29
      70:	bd 17       	cp	r27, r29
      72:	bd 17       	cp	r27, r29
      74:	30 18       	sub	r3, r0
      76:	3e 18       	sub	r3, r14
      78:	3e 18       	sub	r3, r14
      7a:	3e 18       	sub	r3, r14
      7c:	3e 18       	sub	r3, r14
      7e:	3e 18       	sub	r3, r14
      80:	3e 18       	sub	r3, r14
      82:	3e 18       	sub	r3, r14
      84:	33 18       	sub	r3, r3
      86:	38 18       	sub	r3, r8
      88:	3b 18       	sub	r3, r11
      8a:	3e 18       	sub	r3, r14
      8c:	3e 18       	sub	r3, r14
      8e:	3e 18       	sub	r3, r14
      90:	3e 18       	sub	r3, r14
      92:	3e 18       	sub	r3, r14
      94:	3e 18       	sub	r3, r14
      96:	3e 18       	sub	r3, r14
      98:	3e 18       	sub	r3, r14
      9a:	3e 18       	sub	r3, r14
      9c:	3e 18       	sub	r3, r14
      9e:	3e 18       	sub	r3, r14
      a0:	3e 18       	sub	r3, r14
      a2:	3e 18       	sub	r3, r14
      a4:	3e 18       	sub	r3, r14
      a6:	3e 18       	sub	r3, r14
      a8:	3e 18       	sub	r3, r14
      aa:	3e 18       	sub	r3, r14
      ac:	3e 18       	sub	r3, r14
      ae:	3e 18       	sub	r3, r14
      b0:	3e 18       	sub	r3, r14
      b2:	3e 18       	sub	r3, r14
      b4:	3e 18       	sub	r3, r14
      b6:	3e 18       	sub	r3, r14
      b8:	3e 18       	sub	r3, r14
      ba:	3e 18       	sub	r3, r14
      bc:	3e 18       	sub	r3, r14
      be:	3e 18       	sub	r3, r14
      c0:	3e 18       	sub	r3, r14
      c2:	3e 18       	sub	r3, r14
      c4:	33 18       	sub	r3, r3
      c6:	38 18       	sub	r3, r8
      c8:	3b 18       	sub	r3, r11

000000ca <__trampolines_end>:
      ca:	20 49       	sbci	r18, 0x90	; 144
      cc:	6e 76       	andi	r22, 0x6E	; 110
      ce:	61 6c       	ori	r22, 0xC1	; 193
      d0:	69 64       	ori	r22, 0x49	; 73
      d2:	20 6f       	ori	r18, 0xF0	; 240
      d4:	70 74       	andi	r23, 0x40	; 64
      d6:	69 6f       	ori	r22, 0xF9	; 249
      d8:	6e 21       	and	r22, r14
	...

000000db <__c.2709>:
      db:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
      eb:	6f 6e 67 2e 2e 00                                   ong...

000000f1 <__c.2702>:
      f1:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 3a     Enter file name:
     101:	20 00                                                .

00000103 <__c.2696>:
     103:	52 65 61 64 20 73 75 63 63 65 73 73 66 75 6c 21     Read successful!
	...

00000114 <__c.2691>:
     114:	52 65 61 64 20 66 61 69 6c 65 64 2e 2e 00           Read failed...

00000122 <__c.2688>:
     122:	57 72 69 74 65 20 73 75 63 63 65 73 73 66 75 6c     Write successful
     132:	21 00                                               !.

00000134 <__c.2686>:
     134:	57 72 69 74 65 20 66 61 69 6c 65 64 2e 2e 00        Write failed...

00000143 <__c.2682>:
     143:	20 45 6e 74 65 72 20 74 65 78 74 20 28 45 6e 64      Enter text (End
     153:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

0000015d <__c.2678>:
     15d:	45 72 61 73 65 64 21 00                             Erased!.

00000165 <__c.2676>:
     165:	45 72 61 73 65 20 66 61 69 6c 65 64 2e 2e 00        Erase failed...

00000174 <__c.2673>:
     174:	45 6e 74 65 72 20 74 68 65 20 42 6c 6f 63 6b 20     Enter the Block 
     184:	6e 75 6d 62 65 72 20 28 30 30 30 30 2d 39 39 39     number (0000-999
     194:	39 29 3a 00                                         9):.

00000198 <__c.2670>:
     198:	46 41 54 33 32 20 6f 70 74 69 6f 6e 73 20 64 69     FAT32 options di
     1a8:	73 61 62 6c 65 64 21 00                             sabled!.

000001b0 <__c.2668>:
     1b0:	3e 20 53 65 6c 65 63 74 20 4f 70 74 69 6f 6e 20     > Select Option 
     1c0:	28 30 2d 39 2f 61 2f 62 2f 63 29 3a 20 00           (0-9/a/b/c): .

000001ce <__c.2666>:
     1ce:	3e 20 62 3a 20 55 70 64 61 74 65 20 44 61 74 65     > b: Update Date
     1de:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     1ee:	20 63 3a 20 55 70 64 61 74 65 20 54 69 6d 65 00      c: Update Time.

000001fe <__c.2664>:
     1fe:	3e 20 39 3a 20 52 65 61 64 20 53 44 20 4d 65 6d     > 9: Read SD Mem
     20e:	6f 72 79 20 43 61 70 61 63 69 74 79 20 20 20 20     ory Capacity    
     21e:	20 61 3a 20 53 68 6f 77 20 44 61 74 65 20 26 20      a: Show Date & 
     22e:	54 69 6d 65 00                                      Time.

00000233 <__c.2662>:
     233:	3e 20 37 3a 20 57 72 69 74 65 20 46 69 6c 65 20     > 7: Write File 
     243:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     253:	20 38 3a 20 44 65 6c 65 74 65 20 46 69 6c 65 00      8: Delete File.

00000263 <__c.2660>:
     263:	3e 20 35 3a 20 47 65 74 20 66 69 6c 65 20 6c 69     > 5: Get file li
     273:	73 74 20 20 20 20 20 20 20 20 20 20 20 20 20 20     st              
     283:	20 36 3a 20 52 65 61 64 20 46 69 6c 65 00            6: Read File.

00000291 <__c.2658>:
     291:	3e 20 31 3a 20 57 72 69 74 65 20 73 69 6e 67 6c     > 1: Write singl
     2a1:	65 20 42 6c 6f 63 6b 20 20 20 20 20 20 20 20 20     e Block         
     2b1:	20 32 3a 20 52 65 61 64 20 73 69 6e 67 6c 65 20      2: Read single 
     2c1:	42 6c 6f 63 6b 00                                   Block.

000002c7 <__c.2656>:
     2c7:	3e 20 30 3a 20 45 72 61 73 65 20 42 6c 6f 63 6b     > 0: Erase Block
     2d7:	73 20 00                                            s .

000002da <__c.2654>:
     2da:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 2e     Press any key...
	...

000002eb <__c.2652>:
     2eb:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

000002fc <__c.2650>:
     2fc:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     30c:	44 65 74 65 63 74 65 64 21 00                       Detected!.

00000316 <__c.2647>:
     316:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     326:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     336:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

00000341 <__c.2644>:
     341:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     351:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

0000035e <__c.2640>:
     35e:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     36e:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     37e:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

00000389 <__c.2636>:
     389:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     399:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

000003a6 <__c.2634>:
     3a6:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     3b6:	63 74 65 64 2e 2e 00                                cted...

000003bd <__c.2629>:
     3bd:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3cd:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3dd:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3ed:	2a 2a 2a 2a 00                                      ****.

000003f2 <__c.2627>:
     3f2:	20 20 20 20 44 68 61 72 6d 61 6e 69 27 73 20 6d         Dharmani's m
     402:	69 63 72 6f 53 44 20 43 61 72 64 20 54 65 73 74     icroSD Card Test
     412:	69 6e 67 2e 2e 20 20 00                             ing..  .

0000041a <__c.2625>:
     41a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     42a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     43a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     44a:	2a 2a 2a 2a 00                                      ****.

0000044f <__c.2590>:
     44f:	20 46 72 65 65 20 4d 65 6d 6f 72 79 3a 20 00         Free Memory: .

0000045e <__c.2583>:
     45e:	54 6f 74 61 6c 20 4d 65 6d 6f 72 79 3a 20 00        Total Memory: .

0000046d <__c.2556>:
     46d:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     47d:	20 63 6c 75 73 74 65 72 00                           cluster.

00000486 <__c.2554>:
     486:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
     496:	68 61 69 6e 00                                      hain.

0000049b <__c.2546>:
     49b:	20 46 69 6c 65 20 43 72 65 61 74 65 64 21 20 00      File Created! .

000004ab <__c.2541>:
     4ab:	20 46 69 6c 65 20 61 70 70 65 6e 64 65 64 21 00      File appended!.

000004bb <__c.2538>:
     4bb:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     4cb:	21 00                                               !.

000004cd <__c.2529>:
     4cd:	20 45 6e 74 65 72 20 74 65 78 74 20 28 65 6e 64      Enter text (end
     4dd:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

000004e7 <__c.2527>:
     4e7:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     4f7:	21 00                                               !.

000004f9 <__c.2525>:
     4f9:	20 43 72 65 61 74 69 6e 67 20 46 69 6c 65 2e 2e      Creating File..
	...

0000050a <__c.2521>:
     50a:	20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65 78      File already ex
     51a:	69 73 74 73 2c 20 61 70 70 65 6e 64 69 6e 67 20     ists, appending 
     52a:	64 61 74 61 2e 2e 00                                data...

00000531 <__c.2480>:
     531:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     541:	2e 2e 00                                            ...

00000544 <__c.2468>:
     544:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     554:	20 63 6c 75 73 74 65 72 00                           cluster.

0000055d <__c.2447>:
     55d:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     56d:	20 63 6c 75 73 74 65 72 00                           cluster.

00000576 <__c.2439>:
     576:	52 4f 4f 54 00                                      ROOT.

0000057b <__c.2437>:
     57b:	44 49 52 00                                         DIR.

0000057f <__c.2435>:
     57f:	20 20 20 00                                            .

00000583 <__c.2433>:
     583:	46 49 4c 45 00                                      FILE.

00000588 <__c.2431>:
     588:	20 20 20 00                                            .

0000058c <__c.2425>:
     58c:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

0000059a <__c.2423>:
     59a:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000005a5 <__c.2418>:
     5a5:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     5b5:	69 73 74 21 00                                      ist!.

000005ba <__c.2208>:
     5ba:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

000005ca <__c.2206>:
     5ca:	44 61 74 65 20 55 70 64 61 74 65 20 46 61 69 6c     Date Update Fail
     5da:	65 64 2e 2e 00                                      ed...

000005df <__c.2204>:
     5df:	44 61 74 65 20 55 70 64 61 74 65 64 20 73 75 63     Date Updated suc
     5ef:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

000005f9 <__c.2202>:
     5f9:	45 6e 74 65 72 20 44 61 79 20 28 53 75 6e 64 61     Enter Day (Sunda
     609:	79 3a 30 2c 20 4d 6f 6e 64 61 79 3a 31 2e 2e 2e     y:0, Monday:1...
     619:	29 20 28 30 2d 36 29 3a 00                          ) (0-6):.

00000622 <__c.2199>:
     622:	45 6e 74 65 72 20 44 61 74 65 20 28 64 64 2f 6d     Enter Date (dd/m
     632:	6d 2f 79 79 29 3a 00                                m/yy):.

00000639 <__c.2193>:
     639:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

00000649 <__c.2191>:
     649:	54 69 6d 65 20 55 70 64 61 74 65 20 46 61 69 6c     Time Update Fail
     659:	65 64 2e 2e 00                                      ed...

0000065e <__c.2189>:
     65e:	54 69 6d 65 20 55 70 64 61 74 65 64 20 73 75 63     Time Updated suc
     66e:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

00000678 <__c.2186>:
     678:	45 6e 74 65 72 20 54 69 6d 65 20 69 6e 20 32 34     Enter Time in 24
     688:	68 20 66 6f 72 6d 61 74 28 68 68 3a 6d 6d 3a 73     h format(hh:mm:s
     698:	73 29 3a 00                                         s):.

0000069c <__c.2161>:
     69c:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

000006a4 <__c.2158>:
     6a4:	53 61 74 75 72 64 61 79 00                          Saturday.

000006ad <__c.2155>:
     6ad:	46 72 69 64 61 79 00                                Friday.

000006b4 <__c.2152>:
     6b4:	54 68 75 72 73 64 61 79 00                          Thursday.

000006bd <__c.2149>:
     6bd:	57 65 64 6e 65 73 64 61 79 00                       Wednesday.

000006c7 <__c.2146>:
     6c7:	54 75 65 73 64 61 79 00                             Tuesday.

000006cf <__c.2143>:
     6cf:	4d 6f 6e 64 61 79 00                                Monday.

000006d6 <__c.2139>:
     6d6:	53 75 6e 64 61 79 00                                Sunday.

000006dd <__c.2136>:
     6dd:	20 20 20 20 44 61 79 3a 20 00                           Day: .

000006e7 <__c.2131>:
     6e7:	44 61 74 65 3a 00                                   Date:.

000006ed <__c.2125>:
     6ed:	54 69 6d 65 3a 00 00                                Time:..

000006f4 <__ctors_end>:
     6f4:	11 24       	eor	r1, r1
     6f6:	1f be       	out	0x3f, r1	; 63
     6f8:	cf e5       	ldi	r28, 0x5F	; 95
     6fa:	d8 e0       	ldi	r29, 0x08	; 8
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	cd bf       	out	0x3d, r28	; 61

00000700 <__do_copy_data>:
     700:	10 e0       	ldi	r17, 0x00	; 0
     702:	a0 e6       	ldi	r26, 0x60	; 96
     704:	b0 e0       	ldi	r27, 0x00	; 0
     706:	ee e3       	ldi	r30, 0x3E	; 62
     708:	f1 e3       	ldi	r31, 0x31	; 49
     70a:	02 c0       	rjmp	.+4      	; 0x710 <__do_copy_data+0x10>
     70c:	05 90       	lpm	r0, Z+
     70e:	0d 92       	st	X+, r0
     710:	a0 38       	cpi	r26, 0x80	; 128
     712:	b1 07       	cpc	r27, r17
     714:	d9 f7       	brne	.-10     	; 0x70c <__do_copy_data+0xc>

00000716 <__do_clear_bss>:
     716:	22 e0       	ldi	r18, 0x02	; 2
     718:	a0 e8       	ldi	r26, 0x80	; 128
     71a:	b0 e0       	ldi	r27, 0x00	; 0
     71c:	01 c0       	rjmp	.+2      	; 0x720 <.do_clear_bss_start>

0000071e <.do_clear_bss_loop>:
     71e:	1d 92       	st	X+, r1

00000720 <.do_clear_bss_start>:
     720:	a3 3d       	cpi	r26, 0xD3	; 211
     722:	b2 07       	cpc	r27, r18
     724:	e1 f7       	brne	.-8      	; 0x71e <.do_clear_bss_loop>
     726:	0e 94 30 15 	call	0x2a60	; 0x2a60 <main>
     72a:	0c 94 9d 18 	jmp	0x313a	; 0x313a <_exit>

0000072e <__bad_interrupt>:
     72e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000732 <spi_init>:
	 return 1;
   } 

   i2c_stop();
   return 0;
}
     732:	82 e5       	ldi	r24, 0x52	; 82
     734:	8d b9       	out	0x0d, r24	; 13
     736:	1e b8       	out	0x0e, r1	; 14
     738:	08 95       	ret

0000073a <SPI_transmit>:
     73a:	8f b9       	out	0x0f, r24	; 15
     73c:	77 9b       	sbis	0x0e, 7	; 14
     73e:	fe cf       	rjmp	.-4      	; 0x73c <SPI_transmit+0x2>
     740:	8f b1       	in	r24, 0x0f	; 15
     742:	08 95       	ret

00000744 <SPI_receive>:
     744:	8f ef       	ldi	r24, 0xFF	; 255
     746:	8f b9       	out	0x0f, r24	; 15
     748:	77 9b       	sbis	0x0e, 7	; 14
     74a:	fe cf       	rjmp	.-4      	; 0x748 <SPI_receive+0x4>
     74c:	8f b1       	in	r24, 0x0f	; 15
     74e:	08 95       	ret

00000750 <SD_sendCommand>:
     750:	cf 92       	push	r12
     752:	df 92       	push	r13
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	18 2f       	mov	r17, r24
     760:	6a 01       	movw	r12, r20
     762:	7b 01       	movw	r14, r22
     764:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <SDHC_flag>
     768:	81 11       	cpse	r24, r1
     76a:	15 c0       	rjmp	.+42     	; 0x796 <SD_sendCommand+0x46>
     76c:	8f ee       	ldi	r24, 0xEF	; 239
     76e:	81 0f       	add	r24, r17
     770:	82 30       	cpi	r24, 0x02	; 2
     772:	40 f0       	brcs	.+16     	; 0x784 <SD_sendCommand+0x34>
     774:	18 31       	cpi	r17, 0x18	; 24
     776:	31 f0       	breq	.+12     	; 0x784 <SD_sendCommand+0x34>
     778:	19 31       	cpi	r17, 0x19	; 25
     77a:	21 f0       	breq	.+8      	; 0x784 <SD_sendCommand+0x34>
     77c:	10 32       	cpi	r17, 0x20	; 32
     77e:	11 f0       	breq	.+4      	; 0x784 <SD_sendCommand+0x34>
     780:	11 32       	cpi	r17, 0x21	; 33
     782:	49 f4       	brne	.+18     	; 0x796 <SD_sendCommand+0x46>
     784:	0b 2e       	mov	r0, r27
     786:	b9 e0       	ldi	r27, 0x09	; 9
     788:	cc 0c       	add	r12, r12
     78a:	dd 1c       	adc	r13, r13
     78c:	ee 1c       	adc	r14, r14
     78e:	ff 1c       	adc	r15, r15
     790:	ba 95       	dec	r27
     792:	d1 f7       	brne	.-12     	; 0x788 <SD_sendCommand+0x38>
     794:	b0 2d       	mov	r27, r0
     796:	88 b3       	in	r24, 0x18	; 24
     798:	8f 7e       	andi	r24, 0xEF	; 239
     79a:	88 bb       	out	0x18, r24	; 24
     79c:	81 2f       	mov	r24, r17
     79e:	80 64       	ori	r24, 0x40	; 64
     7a0:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_transmit>
     7a4:	8f 2d       	mov	r24, r15
     7a6:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_transmit>
     7aa:	8e 2d       	mov	r24, r14
     7ac:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_transmit>
     7b0:	8d 2d       	mov	r24, r13
     7b2:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_transmit>
     7b6:	8c 2d       	mov	r24, r12
     7b8:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_transmit>
     7bc:	18 30       	cpi	r17, 0x08	; 8
     7be:	21 f4       	brne	.+8      	; 0x7c8 <SD_sendCommand+0x78>
     7c0:	87 e8       	ldi	r24, 0x87	; 135
     7c2:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_transmit>
     7c6:	0a c0       	rjmp	.+20     	; 0x7dc <SD_sendCommand+0x8c>
     7c8:	85 e9       	ldi	r24, 0x95	; 149
     7ca:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_transmit>
     7ce:	06 c0       	rjmp	.+12     	; 0x7dc <SD_sendCommand+0x8c>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	8c 0f       	add	r24, r28
     7d4:	cf 3f       	cpi	r28, 0xFF	; 255
     7d6:	41 f0       	breq	.+16     	; 0x7e8 <SD_sendCommand+0x98>
     7d8:	c8 2f       	mov	r28, r24
     7da:	01 c0       	rjmp	.+2      	; 0x7de <SD_sendCommand+0x8e>
     7dc:	c0 e0       	ldi	r28, 0x00	; 0
     7de:	0e 94 a2 03 	call	0x744	; 0x744 <SPI_receive>
     7e2:	d8 2f       	mov	r29, r24
     7e4:	8f 3f       	cpi	r24, 0xFF	; 255
     7e6:	a1 f3       	breq	.-24     	; 0x7d0 <SD_sendCommand+0x80>
     7e8:	d1 11       	cpse	r29, r1
     7ea:	12 c0       	rjmp	.+36     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7ec:	1a 33       	cpi	r17, 0x3A	; 58
     7ee:	81 f4       	brne	.+32     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7f0:	0e 94 a2 03 	call	0x744	; 0x744 <SPI_receive>
     7f4:	86 ff       	sbrs	r24, 6
     7f6:	04 c0       	rjmp	.+8      	; 0x800 <__DATA_REGION_LENGTH__>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <SDHC_flag>
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     800:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <SDHC_flag>
     804:	0e 94 a2 03 	call	0x744	; 0x744 <SPI_receive>
     808:	0e 94 a2 03 	call	0x744	; 0x744 <SPI_receive>
     80c:	0e 94 a2 03 	call	0x744	; 0x744 <SPI_receive>
     810:	0e 94 a2 03 	call	0x744	; 0x744 <SPI_receive>
     814:	88 b3       	in	r24, 0x18	; 24
     816:	80 61       	ori	r24, 0x10	; 16
     818:	88 bb       	out	0x18, r24	; 24
     81a:	8d 2f       	mov	r24, r29
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
     826:	df 90       	pop	r13
     828:	cf 90       	pop	r12
     82a:	08 95       	ret

0000082c <SD_erase>:
     82c:	8f 92       	push	r8
     82e:	9f 92       	push	r9
     830:	af 92       	push	r10
     832:	bf 92       	push	r11
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	4b 01       	movw	r8, r22
     83e:	5c 01       	movw	r10, r24
     840:	69 01       	movw	r12, r18
     842:	7a 01       	movw	r14, r20
     844:	ab 01       	movw	r20, r22
     846:	bc 01       	movw	r22, r24
     848:	80 e2       	ldi	r24, 0x20	; 32
     84a:	0e 94 a8 03 	call	0x750	; 0x750 <SD_sendCommand>
     84e:	81 11       	cpse	r24, r1
     850:	15 c0       	rjmp	.+42     	; 0x87c <__stack+0x1d>
     852:	b5 01       	movw	r22, r10
     854:	a4 01       	movw	r20, r8
     856:	4c 0d       	add	r20, r12
     858:	5d 1d       	adc	r21, r13
     85a:	6e 1d       	adc	r22, r14
     85c:	7f 1d       	adc	r23, r15
     85e:	41 50       	subi	r20, 0x01	; 1
     860:	51 09       	sbc	r21, r1
     862:	61 09       	sbc	r22, r1
     864:	71 09       	sbc	r23, r1
     866:	81 e2       	ldi	r24, 0x21	; 33
     868:	0e 94 a8 03 	call	0x750	; 0x750 <SD_sendCommand>
     86c:	81 11       	cpse	r24, r1
     86e:	06 c0       	rjmp	.+12     	; 0x87c <__stack+0x1d>
     870:	40 e0       	ldi	r20, 0x00	; 0
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	ba 01       	movw	r22, r20
     876:	86 e2       	ldi	r24, 0x26	; 38
     878:	0e 94 a8 03 	call	0x750	; 0x750 <SD_sendCommand>
     87c:	ff 90       	pop	r15
     87e:	ef 90       	pop	r14
     880:	df 90       	pop	r13
     882:	cf 90       	pop	r12
     884:	bf 90       	pop	r11
     886:	af 90       	pop	r10
     888:	9f 90       	pop	r9
     88a:	8f 90       	pop	r8
     88c:	08 95       	ret

0000088e <SD_readSingleBlock>:
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	ab 01       	movw	r20, r22
     894:	bc 01       	movw	r22, r24
     896:	81 e1       	ldi	r24, 0x11	; 17
     898:	0e 94 a8 03 	call	0x750	; 0x750 <SD_sendCommand>
     89c:	81 11       	cpse	r24, r1
     89e:	2c c0       	rjmp	.+88     	; 0x8f8 <SD_readSingleBlock+0x6a>
     8a0:	88 b3       	in	r24, 0x18	; 24
     8a2:	8f 7e       	andi	r24, 0xEF	; 239
     8a4:	88 bb       	out	0x18, r24	; 24
     8a6:	c0 e0       	ldi	r28, 0x00	; 0
     8a8:	d0 e0       	ldi	r29, 0x00	; 0
     8aa:	0a c0       	rjmp	.+20     	; 0x8c0 <SD_readSingleBlock+0x32>
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	21 96       	adiw	r28, 0x01	; 1
     8b2:	29 f4       	brne	.+10     	; 0x8be <SD_readSingleBlock+0x30>
     8b4:	88 b3       	in	r24, 0x18	; 24
     8b6:	80 61       	ori	r24, 0x10	; 16
     8b8:	88 bb       	out	0x18, r24	; 24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	1d c0       	rjmp	.+58     	; 0x8f8 <SD_readSingleBlock+0x6a>
     8be:	ec 01       	movw	r28, r24
     8c0:	0e 94 a2 03 	call	0x744	; 0x744 <SPI_receive>
     8c4:	8e 3f       	cpi	r24, 0xFE	; 254
     8c6:	91 f7       	brne	.-28     	; 0x8ac <SD_readSingleBlock+0x1e>
     8c8:	c0 e0       	ldi	r28, 0x00	; 0
     8ca:	d0 e0       	ldi	r29, 0x00	; 0
     8cc:	07 c0       	rjmp	.+14     	; 0x8dc <SD_readSingleBlock+0x4e>
     8ce:	0e 94 a2 03 	call	0x744	; 0x744 <SPI_receive>
     8d2:	fe 01       	movw	r30, r28
     8d4:	eb 55       	subi	r30, 0x5B	; 91
     8d6:	ff 4f       	sbci	r31, 0xFF	; 255
     8d8:	80 83       	st	Z, r24
     8da:	21 96       	adiw	r28, 0x01	; 1
     8dc:	c1 15       	cp	r28, r1
     8de:	82 e0       	ldi	r24, 0x02	; 2
     8e0:	d8 07       	cpc	r29, r24
     8e2:	a8 f3       	brcs	.-22     	; 0x8ce <SD_readSingleBlock+0x40>
     8e4:	0e 94 a2 03 	call	0x744	; 0x744 <SPI_receive>
     8e8:	0e 94 a2 03 	call	0x744	; 0x744 <SPI_receive>
     8ec:	0e 94 a2 03 	call	0x744	; 0x744 <SPI_receive>
     8f0:	88 b3       	in	r24, 0x18	; 24
     8f2:	80 61       	ori	r24, 0x10	; 16
     8f4:	88 bb       	out	0x18, r24	; 24
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <SD_writeSingleBlock>:
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	ab 01       	movw	r20, r22
     904:	bc 01       	movw	r22, r24
     906:	88 e1       	ldi	r24, 0x18	; 24
     908:	0e 94 a8 03 	call	0x750	; 0x750 <SD_sendCommand>
     90c:	81 11       	cpse	r24, r1
     90e:	51 c0       	rjmp	.+162    	; 0x9b2 <SD_writeSingleBlock+0xb4>
     910:	88 b3       	in	r24, 0x18	; 24
     912:	8f 7e       	andi	r24, 0xEF	; 239
     914:	88 bb       	out	0x18, r24	; 24
     916:	8e ef       	ldi	r24, 0xFE	; 254
     918:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_transmit>
     91c:	c0 e0       	ldi	r28, 0x00	; 0
     91e:	d0 e0       	ldi	r29, 0x00	; 0
     920:	07 c0       	rjmp	.+14     	; 0x930 <SD_writeSingleBlock+0x32>
     922:	fe 01       	movw	r30, r28
     924:	eb 55       	subi	r30, 0x5B	; 91
     926:	ff 4f       	sbci	r31, 0xFF	; 255
     928:	80 81       	ld	r24, Z
     92a:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_transmit>
     92e:	21 96       	adiw	r28, 0x01	; 1
     930:	c1 15       	cp	r28, r1
     932:	22 e0       	ldi	r18, 0x02	; 2
     934:	d2 07       	cpc	r29, r18
     936:	a8 f3       	brcs	.-22     	; 0x922 <SD_writeSingleBlock+0x24>
     938:	8f ef       	ldi	r24, 0xFF	; 255
     93a:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_transmit>
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_transmit>
     944:	0e 94 a2 03 	call	0x744	; 0x744 <SPI_receive>
     948:	98 2f       	mov	r25, r24
     94a:	9f 71       	andi	r25, 0x1F	; 31
     94c:	95 30       	cpi	r25, 0x05	; 5
     94e:	69 f0       	breq	.+26     	; 0x96a <SD_writeSingleBlock+0x6c>
     950:	98 b3       	in	r25, 0x18	; 24
     952:	90 61       	ori	r25, 0x10	; 16
     954:	98 bb       	out	0x18, r25	; 24
     956:	2d c0       	rjmp	.+90     	; 0x9b2 <SD_writeSingleBlock+0xb4>
     958:	ce 01       	movw	r24, r28
     95a:	01 96       	adiw	r24, 0x01	; 1
     95c:	21 96       	adiw	r28, 0x01	; 1
     95e:	41 f4       	brne	.+16     	; 0x970 <SD_writeSingleBlock+0x72>
     960:	88 b3       	in	r24, 0x18	; 24
     962:	80 61       	ori	r24, 0x10	; 16
     964:	88 bb       	out	0x18, r24	; 24
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	24 c0       	rjmp	.+72     	; 0x9b2 <SD_writeSingleBlock+0xb4>
     96a:	c0 e0       	ldi	r28, 0x00	; 0
     96c:	d0 e0       	ldi	r29, 0x00	; 0
     96e:	01 c0       	rjmp	.+2      	; 0x972 <SD_writeSingleBlock+0x74>
     970:	ec 01       	movw	r28, r24
     972:	0e 94 a2 03 	call	0x744	; 0x744 <SPI_receive>
     976:	88 23       	and	r24, r24
     978:	79 f3       	breq	.-34     	; 0x958 <SD_writeSingleBlock+0x5a>
     97a:	88 b3       	in	r24, 0x18	; 24
     97c:	80 61       	ori	r24, 0x10	; 16
     97e:	88 bb       	out	0x18, r24	; 24
     980:	8f ef       	ldi	r24, 0xFF	; 255
     982:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_transmit>
     986:	88 b3       	in	r24, 0x18	; 24
     988:	8f 7e       	andi	r24, 0xEF	; 239
     98a:	88 bb       	out	0x18, r24	; 24
     98c:	0a c0       	rjmp	.+20     	; 0x9a2 <SD_writeSingleBlock+0xa4>
     98e:	ce 01       	movw	r24, r28
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	21 96       	adiw	r28, 0x01	; 1
     994:	29 f4       	brne	.+10     	; 0x9a0 <SD_writeSingleBlock+0xa2>
     996:	88 b3       	in	r24, 0x18	; 24
     998:	80 61       	ori	r24, 0x10	; 16
     99a:	88 bb       	out	0x18, r24	; 24
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	09 c0       	rjmp	.+18     	; 0x9b2 <SD_writeSingleBlock+0xb4>
     9a0:	ec 01       	movw	r28, r24
     9a2:	0e 94 a2 03 	call	0x744	; 0x744 <SPI_receive>
     9a6:	88 23       	and	r24, r24
     9a8:	91 f3       	breq	.-28     	; 0x98e <SD_writeSingleBlock+0x90>
     9aa:	88 b3       	in	r24, 0x18	; 24
     9ac:	80 61       	ori	r24, 0x10	; 16
     9ae:	88 bb       	out	0x18, r24	; 24
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <uart0_init>:
     9b8:	1a b8       	out	0x0a, r1	; 10
     9ba:	1b b8       	out	0x0b, r1	; 11
     9bc:	86 e8       	ldi	r24, 0x86	; 134
     9be:	80 bd       	out	0x20, r24	; 32
     9c0:	89 e1       	ldi	r24, 0x19	; 25
     9c2:	89 b9       	out	0x09, r24	; 9
     9c4:	10 bc       	out	0x20, r1	; 32
     9c6:	88 e1       	ldi	r24, 0x18	; 24
     9c8:	8a b9       	out	0x0a, r24	; 10
     9ca:	08 95       	ret

000009cc <receiveByte>:
     9cc:	5f 9b       	sbis	0x0b, 7	; 11
     9ce:	fe cf       	rjmp	.-4      	; 0x9cc <receiveByte>
     9d0:	8b b1       	in	r24, 0x0b	; 11
     9d2:	8c b1       	in	r24, 0x0c	; 12
     9d4:	08 95       	ret

000009d6 <transmitByte>:
     9d6:	5d 9b       	sbis	0x0b, 5	; 11
     9d8:	fe cf       	rjmp	.-4      	; 0x9d6 <transmitByte>
     9da:	8c b9       	out	0x0c, r24	; 12
     9dc:	08 95       	ret

000009de <SD_init>:
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	c0 e0       	ldi	r28, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <SD_init+0x12>
     9e8:	8f ef       	ldi	r24, 0xFF	; 255
     9ea:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_transmit>
     9ee:	cf 5f       	subi	r28, 0xFF	; 255
     9f0:	ca 30       	cpi	r28, 0x0A	; 10
     9f2:	d0 f3       	brcs	.-12     	; 0x9e8 <SD_init+0xa>
     9f4:	88 b3       	in	r24, 0x18	; 24
     9f6:	8f 7e       	andi	r24, 0xEF	; 239
     9f8:	88 bb       	out	0x18, r24	; 24
     9fa:	c0 e0       	ldi	r28, 0x00	; 0
     9fc:	d0 e0       	ldi	r29, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	ba 01       	movw	r22, r20
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	0e 94 a8 03 	call	0x750	; 0x750 <SD_sendCommand>
     a0a:	21 96       	adiw	r28, 0x01	; 1
     a0c:	c1 32       	cpi	r28, 0x21	; 33
     a0e:	d1 05       	cpc	r29, r1
     a10:	08 f0       	brcs	.+2      	; 0xa14 <SD_init+0x36>
     a12:	6c c0       	rjmp	.+216    	; 0xaec <SD_init+0x10e>
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	99 f7       	brne	.-26     	; 0x9fe <SD_init+0x20>
     a18:	88 b3       	in	r24, 0x18	; 24
     a1a:	80 61       	ori	r24, 0x10	; 16
     a1c:	88 bb       	out	0x18, r24	; 24
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_transmit>
     a24:	8f ef       	ldi	r24, 0xFF	; 255
     a26:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_transmit>
     a2a:	c0 e0       	ldi	r28, 0x00	; 0
     a2c:	d0 e0       	ldi	r29, 0x00	; 0
     a2e:	4a ea       	ldi	r20, 0xAA	; 170
     a30:	51 e0       	ldi	r21, 0x01	; 1
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	88 e0       	ldi	r24, 0x08	; 8
     a38:	0e 94 a8 03 	call	0x750	; 0x750 <SD_sendCommand>
     a3c:	21 96       	adiw	r28, 0x01	; 1
     a3e:	cf 3f       	cpi	r28, 0xFF	; 255
     a40:	d1 05       	cpc	r29, r1
     a42:	58 f0       	brcs	.+22     	; 0xa5a <SD_init+0x7c>
     a44:	8d e0       	ldi	r24, 0x0D	; 13
     a46:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
     a4a:	8a e0       	ldi	r24, 0x0A	; 10
     a4c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <cardType>
     a56:	11 e0       	ldi	r17, 0x01	; 1
     a58:	03 c0       	rjmp	.+6      	; 0xa60 <SD_init+0x82>
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	41 f7       	brne	.-48     	; 0xa2e <SD_init+0x50>
     a5e:	12 e0       	ldi	r17, 0x02	; 2
     a60:	c0 e0       	ldi	r28, 0x00	; 0
     a62:	d0 e0       	ldi	r29, 0x00	; 0
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	ba 01       	movw	r22, r20
     a6a:	87 e3       	ldi	r24, 0x37	; 55
     a6c:	0e 94 a8 03 	call	0x750	; 0x750 <SD_sendCommand>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e4       	ldi	r23, 0x40	; 64
     a78:	89 e2       	ldi	r24, 0x29	; 41
     a7a:	0e 94 a8 03 	call	0x750	; 0x750 <SD_sendCommand>
     a7e:	21 96       	adiw	r28, 0x01	; 1
     a80:	cf 3f       	cpi	r28, 0xFF	; 255
     a82:	d1 05       	cpc	r29, r1
     a84:	40 f0       	brcs	.+16     	; 0xa96 <SD_init+0xb8>
     a86:	8d e0       	ldi	r24, 0x0D	; 13
     a88:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
     a8c:	8a e0       	ldi	r24, 0x0A	; 10
     a8e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	2e c0       	rjmp	.+92     	; 0xaf2 <SD_init+0x114>
     a96:	81 11       	cpse	r24, r1
     a98:	e5 cf       	rjmp	.-54     	; 0xa64 <SD_init+0x86>
     a9a:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <SDHC_flag>
     a9e:	12 30       	cpi	r17, 0x02	; 2
     aa0:	39 f5       	brne	.+78     	; 0xaf0 <SD_init+0x112>
     aa2:	c0 e0       	ldi	r28, 0x00	; 0
     aa4:	d0 e0       	ldi	r29, 0x00	; 0
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	ba 01       	movw	r22, r20
     aac:	8a e3       	ldi	r24, 0x3A	; 58
     aae:	0e 94 a8 03 	call	0x750	; 0x750 <SD_sendCommand>
     ab2:	21 96       	adiw	r28, 0x01	; 1
     ab4:	cf 3f       	cpi	r28, 0xFF	; 255
     ab6:	d1 05       	cpc	r29, r1
     ab8:	48 f0       	brcs	.+18     	; 0xacc <SD_init+0xee>
     aba:	8d e0       	ldi	r24, 0x0D	; 13
     abc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
     ac0:	8a e0       	ldi	r24, 0x0A	; 10
     ac2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
     ac6:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <cardType>
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <SD_init+0xf2>
     acc:	81 11       	cpse	r24, r1
     ace:	eb cf       	rjmp	.-42     	; 0xaa6 <SD_init+0xc8>
     ad0:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <SDHC_flag>
     ad4:	81 30       	cpi	r24, 0x01	; 1
     ad6:	29 f4       	brne	.+10     	; 0xae2 <SD_init+0x104>
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <cardType>
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	08 c0       	rjmp	.+16     	; 0xaf2 <SD_init+0x114>
     ae2:	83 e0       	ldi	r24, 0x03	; 3
     ae4:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <cardType>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	03 c0       	rjmp	.+6      	; 0xaf2 <SD_init+0x114>
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	01 c0       	rjmp	.+2      	; 0xaf2 <SD_init+0x114>
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	08 95       	ret

00000afa <transmitString_F>:
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	ec 01       	movw	r28, r24
     b00:	05 c0       	rjmp	.+10     	; 0xb0c <transmitString_F+0x12>
     b02:	21 96       	adiw	r28, 0x01	; 1
     b04:	fc 01       	movw	r30, r24
     b06:	84 91       	lpm	r24, Z
     b08:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
     b0c:	ce 01       	movw	r24, r28
     b0e:	fe 01       	movw	r30, r28
     b10:	24 91       	lpm	r18, Z
     b12:	21 11       	cpse	r18, r1
     b14:	f6 cf       	rjmp	.-20     	; 0xb02 <transmitString_F+0x8>
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	08 95       	ret

00000b1c <transmitString>:
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	ec 01       	movw	r28, r24
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <transmitString+0xe>
     b24:	21 96       	adiw	r28, 0x01	; 1
     b26:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
     b2a:	88 81       	ld	r24, Y
     b2c:	81 11       	cpse	r24, r1
     b2e:	fa cf       	rjmp	.-12     	; 0xb24 <transmitString+0x8>
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	08 95       	ret

00000b36 <RTC_displayDay>:
     b36:	8d ed       	ldi	r24, 0xDD	; 221
     b38:	96 e0       	ldi	r25, 0x06	; 6
     b3a:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
     b3e:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <__data_end+0x3>
     b42:	8e 2f       	mov	r24, r30
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	87 30       	cpi	r24, 0x07	; 7
     b48:	91 05       	cpc	r25, r1
     b4a:	40 f5       	brcc	.+80     	; 0xb9c <RTC_displayDay+0x66>
     b4c:	fc 01       	movw	r30, r24
     b4e:	e6 5d       	subi	r30, 0xD6	; 214
     b50:	ff 4f       	sbci	r31, 0xFF	; 255
     b52:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__tablejump2__>
     b56:	86 ed       	ldi	r24, 0xD6	; 214
     b58:	96 e0       	ldi	r25, 0x06	; 6
     b5a:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
     b5e:	08 95       	ret
     b60:	8f ec       	ldi	r24, 0xCF	; 207
     b62:	96 e0       	ldi	r25, 0x06	; 6
     b64:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
     b68:	08 95       	ret
     b6a:	87 ec       	ldi	r24, 0xC7	; 199
     b6c:	96 e0       	ldi	r25, 0x06	; 6
     b6e:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
     b72:	08 95       	ret
     b74:	8d eb       	ldi	r24, 0xBD	; 189
     b76:	96 e0       	ldi	r25, 0x06	; 6
     b78:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
     b7c:	08 95       	ret
     b7e:	84 eb       	ldi	r24, 0xB4	; 180
     b80:	96 e0       	ldi	r25, 0x06	; 6
     b82:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
     b86:	08 95       	ret
     b88:	8d ea       	ldi	r24, 0xAD	; 173
     b8a:	96 e0       	ldi	r25, 0x06	; 6
     b8c:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
     b90:	08 95       	ret
     b92:	84 ea       	ldi	r24, 0xA4	; 164
     b94:	96 e0       	ldi	r25, 0x06	; 6
     b96:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
     b9a:	08 95       	ret
     b9c:	8c e9       	ldi	r24, 0x9C	; 156
     b9e:	96 e0       	ldi	r25, 0x06	; 6
     ba0:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
     ba4:	08 95       	ret

00000ba6 <RTC_updateRegisters>:
     ba6:	a2 eb       	ldi	r26, 0xB2	; 178
     ba8:	b2 e0       	ldi	r27, 0x02	; 2
     baa:	16 96       	adiw	r26, 0x06	; 6
     bac:	8c 91       	ld	r24, X
     bae:	16 97       	sbiw	r26, 0x06	; 6
     bb0:	87 70       	andi	r24, 0x07	; 7
     bb2:	20 e1       	ldi	r18, 0x10	; 16
     bb4:	82 9f       	mul	r24, r18
     bb6:	c0 01       	movw	r24, r0
     bb8:	11 24       	eor	r1, r1
     bba:	17 96       	adiw	r26, 0x07	; 7
     bbc:	9c 91       	ld	r25, X
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	e0 e8       	ldi	r30, 0x80	; 128
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	9f 70       	andi	r25, 0x0F	; 15
     bc6:	89 2b       	or	r24, r25
     bc8:	80 83       	st	Z, r24
     bca:	13 96       	adiw	r26, 0x03	; 3
     bcc:	8c 91       	ld	r24, X
     bce:	13 97       	sbiw	r26, 0x03	; 3
     bd0:	87 70       	andi	r24, 0x07	; 7
     bd2:	20 e1       	ldi	r18, 0x10	; 16
     bd4:	82 9f       	mul	r24, r18
     bd6:	c0 01       	movw	r24, r0
     bd8:	11 24       	eor	r1, r1
     bda:	14 96       	adiw	r26, 0x04	; 4
     bdc:	9c 91       	ld	r25, X
     bde:	14 97       	sbiw	r26, 0x04	; 4
     be0:	9f 70       	andi	r25, 0x0F	; 15
     be2:	89 2b       	or	r24, r25
     be4:	81 83       	std	Z+1, r24	; 0x01
     be6:	8c 91       	ld	r24, X
     be8:	83 70       	andi	r24, 0x03	; 3
     bea:	20 e1       	ldi	r18, 0x10	; 16
     bec:	82 9f       	mul	r24, r18
     bee:	c0 01       	movw	r24, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	11 96       	adiw	r26, 0x01	; 1
     bf4:	9c 91       	ld	r25, X
     bf6:	9f 70       	andi	r25, 0x0F	; 15
     bf8:	89 2b       	or	r24, r25
     bfa:	82 83       	std	Z+2, r24	; 0x02
     bfc:	a2 ec       	ldi	r26, 0xC2	; 194
     bfe:	b2 e0       	ldi	r27, 0x02	; 2
     c00:	1a 96       	adiw	r26, 0x0a	; 10
     c02:	8c 91       	ld	r24, X
     c04:	1a 97       	sbiw	r26, 0x0a	; 10
     c06:	83 83       	std	Z+3, r24	; 0x03
     c08:	8c 91       	ld	r24, X
     c0a:	83 70       	andi	r24, 0x03	; 3
     c0c:	20 e1       	ldi	r18, 0x10	; 16
     c0e:	82 9f       	mul	r24, r18
     c10:	c0 01       	movw	r24, r0
     c12:	11 24       	eor	r1, r1
     c14:	11 96       	adiw	r26, 0x01	; 1
     c16:	9c 91       	ld	r25, X
     c18:	11 97       	sbiw	r26, 0x01	; 1
     c1a:	9f 70       	andi	r25, 0x0F	; 15
     c1c:	89 2b       	or	r24, r25
     c1e:	84 83       	std	Z+4, r24	; 0x04
     c20:	13 96       	adiw	r26, 0x03	; 3
     c22:	8c 91       	ld	r24, X
     c24:	13 97       	sbiw	r26, 0x03	; 3
     c26:	28 2f       	mov	r18, r24
     c28:	21 70       	andi	r18, 0x01	; 1
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	22 95       	swap	r18
     c2e:	32 95       	swap	r19
     c30:	30 7f       	andi	r19, 0xF0	; 240
     c32:	32 27       	eor	r19, r18
     c34:	20 7f       	andi	r18, 0xF0	; 240
     c36:	32 27       	eor	r19, r18
     c38:	14 96       	adiw	r26, 0x04	; 4
     c3a:	8c 91       	ld	r24, X
     c3c:	14 97       	sbiw	r26, 0x04	; 4
     c3e:	8f 70       	andi	r24, 0x0F	; 15
     c40:	28 2b       	or	r18, r24
     c42:	25 83       	std	Z+5, r18	; 0x05
     c44:	18 96       	adiw	r26, 0x08	; 8
     c46:	8c 91       	ld	r24, X
     c48:	18 97       	sbiw	r26, 0x08	; 8
     c4a:	20 e1       	ldi	r18, 0x10	; 16
     c4c:	82 9f       	mul	r24, r18
     c4e:	c0 01       	movw	r24, r0
     c50:	11 24       	eor	r1, r1
     c52:	19 96       	adiw	r26, 0x09	; 9
     c54:	9c 91       	ld	r25, X
     c56:	9f 70       	andi	r25, 0x0F	; 15
     c58:	89 2b       	or	r24, r25
     c5a:	86 83       	std	Z+6, r24	; 0x06
     c5c:	08 95       	ret

00000c5e <twi_init>:
     c5e:	16 be       	out	0x36, r1	; 54
     c60:	82 e1       	ldi	r24, 0x12	; 18
     c62:	80 b9       	out	0x00, r24	; 0
     c64:	11 b8       	out	0x01, r1	; 1
     c66:	08 95       	ret

00000c68 <i2c_start>:
     c68:	84 ea       	ldi	r24, 0xA4	; 164
     c6a:	86 bf       	out	0x36, r24	; 54
     c6c:	06 b6       	in	r0, 0x36	; 54
     c6e:	07 fe       	sbrs	r0, 7
     c70:	fd cf       	rjmp	.-6      	; 0xc6c <i2c_start+0x4>
     c72:	81 b1       	in	r24, 0x01	; 1
     c74:	88 7f       	andi	r24, 0xF8	; 248
     c76:	88 30       	cpi	r24, 0x08	; 8
     c78:	11 f4       	brne	.+4      	; 0xc7e <i2c_start+0x16>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	08 95       	ret
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	08 95       	ret

00000c82 <i2c_repeatStart>:
     c82:	84 ea       	ldi	r24, 0xA4	; 164
     c84:	86 bf       	out	0x36, r24	; 54
     c86:	06 b6       	in	r0, 0x36	; 54
     c88:	07 fe       	sbrs	r0, 7
     c8a:	fd cf       	rjmp	.-6      	; 0xc86 <i2c_repeatStart+0x4>
     c8c:	81 b1       	in	r24, 0x01	; 1
     c8e:	88 7f       	andi	r24, 0xF8	; 248
     c90:	80 31       	cpi	r24, 0x10	; 16
     c92:	11 f4       	brne	.+4      	; 0xc98 <i2c_repeatStart+0x16>
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	08 95       	ret
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	08 95       	ret

00000c9c <i2c_sendAddress>:
     c9c:	80 fd       	sbrc	r24, 0
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <i2c_sendAddress+0x8>
     ca0:	98 e1       	ldi	r25, 0x18	; 24
     ca2:	01 c0       	rjmp	.+2      	; 0xca6 <i2c_sendAddress+0xa>
     ca4:	90 e4       	ldi	r25, 0x40	; 64
     ca6:	83 b9       	out	0x03, r24	; 3
     ca8:	84 e8       	ldi	r24, 0x84	; 132
     caa:	86 bf       	out	0x36, r24	; 54
     cac:	06 b6       	in	r0, 0x36	; 54
     cae:	07 fe       	sbrs	r0, 7
     cb0:	fd cf       	rjmp	.-6      	; 0xcac <i2c_sendAddress+0x10>
     cb2:	81 b1       	in	r24, 0x01	; 1
     cb4:	88 7f       	andi	r24, 0xF8	; 248
     cb6:	98 13       	cpse	r25, r24
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <i2c_sendAddress+0x22>
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	08 95       	ret
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	08 95       	ret

00000cc2 <i2c_sendData>:
     cc2:	83 b9       	out	0x03, r24	; 3
     cc4:	84 e8       	ldi	r24, 0x84	; 132
     cc6:	86 bf       	out	0x36, r24	; 54
     cc8:	06 b6       	in	r0, 0x36	; 54
     cca:	07 fe       	sbrs	r0, 7
     ccc:	fd cf       	rjmp	.-6      	; 0xcc8 <i2c_sendData+0x6>
     cce:	81 b1       	in	r24, 0x01	; 1
     cd0:	88 7f       	andi	r24, 0xF8	; 248
     cd2:	88 32       	cpi	r24, 0x28	; 40
     cd4:	11 f0       	breq	.+4      	; 0xcda <i2c_sendData+0x18>
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	08 95       	ret
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	08 95       	ret

00000cde <i2c_receiveData_ACK>:
     cde:	84 ec       	ldi	r24, 0xC4	; 196
     ce0:	86 bf       	out	0x36, r24	; 54
     ce2:	06 b6       	in	r0, 0x36	; 54
     ce4:	07 fe       	sbrs	r0, 7
     ce6:	fd cf       	rjmp	.-6      	; 0xce2 <i2c_receiveData_ACK+0x4>
     ce8:	81 b1       	in	r24, 0x01	; 1
     cea:	88 7f       	andi	r24, 0xF8	; 248
     cec:	80 35       	cpi	r24, 0x50	; 80
     cee:	11 f4       	brne	.+4      	; 0xcf4 <i2c_receiveData_ACK+0x16>
     cf0:	83 b1       	in	r24, 0x03	; 3
     cf2:	08 95       	ret
     cf4:	8e e7       	ldi	r24, 0x7E	; 126
     cf6:	08 95       	ret

00000cf8 <i2c_receiveData_NACK>:
     cf8:	84 e8       	ldi	r24, 0x84	; 132
     cfa:	86 bf       	out	0x36, r24	; 54
     cfc:	06 b6       	in	r0, 0x36	; 54
     cfe:	07 fe       	sbrs	r0, 7
     d00:	fd cf       	rjmp	.-6      	; 0xcfc <i2c_receiveData_NACK+0x4>
     d02:	81 b1       	in	r24, 0x01	; 1
     d04:	88 7f       	andi	r24, 0xF8	; 248
     d06:	88 35       	cpi	r24, 0x58	; 88
     d08:	11 f4       	brne	.+4      	; 0xd0e <i2c_receiveData_NACK+0x16>
     d0a:	83 b1       	in	r24, 0x03	; 3
     d0c:	08 95       	ret
     d0e:	8e e7       	ldi	r24, 0x7E	; 126
     d10:	08 95       	ret

00000d12 <i2c_stop>:
     d12:	84 e9       	ldi	r24, 0x94	; 148
     d14:	86 bf       	out	0x36, r24	; 54
     d16:	08 95       	ret

00000d18 <RTC_read>:

//***********************************************************************
//Function to read RTC registers and store them in buffer rtc_register[]
//***********************************************************************    
unsigned char RTC_read(void)
{
     d18:	cf 93       	push	r28

  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
     d1a:	0e 94 34 06 	call	0xc68	; 0xc68 <i2c_start>
   if(errorStatus == 1)
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	21 f4       	brne	.+8      	; 0xd2a <RTC_read+0x12>
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
     d22:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	 return 1;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	3d c0       	rjmp	.+122    	; 0xda4 <RTC_read+0x8c>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
     d2a:	80 ed       	ldi	r24, 0xD0	; 208
     d2c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <i2c_sendAddress>
   
   if(errorStatus == 1)
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	21 f4       	brne	.+8      	; 0xd3c <RTC_read+0x24>
   {
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
     d34:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	 return 1;
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	34 c0       	rjmp	.+104    	; 0xda4 <RTC_read+0x8c>
   } 
   
   errorStatus = i2c_sendData(0x00);
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <i2c_sendData>
   if(errorStatus == 1)
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	21 f4       	brne	.+8      	; 0xd4e <RTC_read+0x36>
   {
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
     d46:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	 return 1;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	2b c0       	rjmp	.+86     	; 0xda4 <RTC_read+0x8c>
   } 

    errorStatus = i2c_repeatStart();
     d4e:	0e 94 41 06 	call	0xc82	; 0xc82 <i2c_repeatStart>
   if(errorStatus == 1)
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	21 f4       	brne	.+8      	; 0xd5e <RTC_read+0x46>
   {
     //transmitString_F(PSTR("RTC repeat start failed.."));
   	 i2c_stop();
     d56:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	 return 1;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	23 c0       	rjmp	.+70     	; 0xda4 <RTC_read+0x8c>
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
     d5e:	81 ed       	ldi	r24, 0xD1	; 209
     d60:	0e 94 4e 06 	call	0xc9c	; 0xc9c <i2c_sendAddress>
   
   if(errorStatus == 1)
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	c1 f4       	brne	.+48     	; 0xd98 <RTC_read+0x80>
   {
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
     d68:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	 return 1;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	1a c0       	rjmp	.+52     	; 0xda4 <RTC_read+0x8c>
   } 
 
    for(i=0;i<7;i++)
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
     d70:	c6 30       	cpi	r28, 0x06	; 6
     d72:	19 f4       	brne	.+6      	; 0xd7a <RTC_read+0x62>
	   	  data = i2c_receiveData_NACK();
     d74:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <i2c_receiveData_NACK>
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <RTC_read+0x66>
	  else
	  	  data = i2c_receiveData_ACK();
     d7a:	0e 94 6f 06 	call	0xcde	; 0xcde <i2c_receiveData_ACK>
		  
   	  if(data == ERROR_CODE)
     d7e:	8e 37       	cpi	r24, 0x7E	; 126
     d80:	21 f4       	brne	.+8      	; 0xd8a <RTC_read+0x72>
   	  {
       		//transmitString_F(PSTR("RTC receive failed.."));
			i2c_stop();
     d82:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	   		return 1;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	0d c0       	rjmp	.+26     	; 0xda4 <RTC_read+0x8c>
   	  }
	  
	  rtc_register[i] = data;
     d8a:	ec 2f       	mov	r30, r28
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	e0 58       	subi	r30, 0x80	; 128
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	80 83       	st	Z, r24
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return 1;
   } 
 
    for(i=0;i<7;i++)
     d94:	cf 5f       	subi	r28, 0xFF	; 255
     d96:	01 c0       	rjmp	.+2      	; 0xd9a <RTC_read+0x82>
     d98:	c0 e0       	ldi	r28, 0x00	; 0
     d9a:	c7 30       	cpi	r28, 0x07	; 7
     d9c:	48 f3       	brcs	.-46     	; 0xd70 <RTC_read+0x58>
   	  }
	  
	  rtc_register[i] = data;
	}
	
	i2c_stop();
     d9e:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	return 0;
     da2:	80 e0       	ldi	r24, 0x00	; 0
}	  
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <RTC_getTime>:
//Function to form time string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
     da8:	0e 94 8c 06 	call	0xd18	; 0xd18 <RTC_read>
   if(error) return 1;
     dac:	81 11       	cpse	r24, r1
     dae:	42 c0       	rjmp	.+132    	; 0xe34 <RTC_getTime+0x8c>

   RTC_read();
     db0:	0e 94 8c 06 	call	0xd18	; 0xd18 <RTC_read>
   time[8] = 0x00;	  //NIL
     db4:	e2 eb       	ldi	r30, 0xB2	; 178
     db6:	f2 e0       	ldi	r31, 0x02	; 2
     db8:	10 86       	std	Z+8, r1	; 0x08
   time[7] = (SECONDS & 0x0f) | 0x30;		 //seconds(1's)
     dba:	a0 e8       	ldi	r26, 0x80	; 128
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	8c 91       	ld	r24, X
     dc0:	98 2f       	mov	r25, r24
     dc2:	9f 70       	andi	r25, 0x0F	; 15
     dc4:	90 63       	ori	r25, 0x30	; 48
     dc6:	97 83       	std	Z+7, r25	; 0x07
   time[6] = ((SECONDS & 0x70) >> 4) | 0x30; //seconds(10's)
     dc8:	80 77       	andi	r24, 0x70	; 112
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	95 95       	asr	r25
     dce:	87 95       	ror	r24
     dd0:	95 95       	asr	r25
     dd2:	87 95       	ror	r24
     dd4:	95 95       	asr	r25
     dd6:	87 95       	ror	r24
     dd8:	95 95       	asr	r25
     dda:	87 95       	ror	r24
     ddc:	80 63       	ori	r24, 0x30	; 48
     dde:	86 83       	std	Z+6, r24	; 0x06
   time[5] = ':';
     de0:	2a e3       	ldi	r18, 0x3A	; 58
     de2:	25 83       	std	Z+5, r18	; 0x05
   
   time[4] = (MINUTES & 0x0f) | 0x30;
     de4:	11 96       	adiw	r26, 0x01	; 1
     de6:	8c 91       	ld	r24, X
     de8:	11 97       	sbiw	r26, 0x01	; 1
     dea:	98 2f       	mov	r25, r24
     dec:	9f 70       	andi	r25, 0x0F	; 15
     dee:	90 63       	ori	r25, 0x30	; 48
     df0:	94 83       	std	Z+4, r25	; 0x04
   time[3] = ((MINUTES & 0x70) >> 4) | 0x30;
     df2:	80 77       	andi	r24, 0x70	; 112
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	95 95       	asr	r25
     df8:	87 95       	ror	r24
     dfa:	95 95       	asr	r25
     dfc:	87 95       	ror	r24
     dfe:	95 95       	asr	r25
     e00:	87 95       	ror	r24
     e02:	95 95       	asr	r25
     e04:	87 95       	ror	r24
     e06:	80 63       	ori	r24, 0x30	; 48
     e08:	83 83       	std	Z+3, r24	; 0x03
   time[2] = ':'; 
     e0a:	22 83       	std	Z+2, r18	; 0x02
   
   time[1] = (HOURS & 0x0f) | 0x30;	
     e0c:	12 96       	adiw	r26, 0x02	; 2
     e0e:	8c 91       	ld	r24, X
     e10:	98 2f       	mov	r25, r24
     e12:	9f 70       	andi	r25, 0x0F	; 15
     e14:	90 63       	ori	r25, 0x30	; 48
     e16:	91 83       	std	Z+1, r25	; 0x01
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;
     e18:	80 73       	andi	r24, 0x30	; 48
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	95 95       	asr	r25
     e1e:	87 95       	ror	r24
     e20:	95 95       	asr	r25
     e22:	87 95       	ror	r24
     e24:	95 95       	asr	r25
     e26:	87 95       	ror	r24
     e28:	95 95       	asr	r25
     e2a:	87 95       	ror	r24
     e2c:	80 63       	ori	r24, 0x30	; 48
     e2e:	80 83       	st	Z, r24

   return 0;
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	08 95       	ret
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
   if(error) return 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
   
   time[1] = (HOURS & 0x0f) | 0x30;	
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;

   return 0;
}
     e36:	08 95       	ret

00000e38 <RTC_displayTime>:
//Function to display time on LCD and send it to PC (thru UART)
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
     e38:	0e 94 d4 06 	call	0xda8	; 0xda8 <RTC_getTime>
  if(error) return 1;
     e3c:	81 11       	cpse	r24, r1
     e3e:	10 c0       	rjmp	.+32     	; 0xe60 <RTC_displayTime+0x28>
  
  TX_NEWLINE;
     e40:	8d e0       	ldi	r24, 0x0D	; 13
     e42:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
     e46:	8a e0       	ldi	r24, 0x0A	; 10
     e48:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
  transmitString_F(PSTR("Time:"));
     e4c:	8d ee       	ldi	r24, 0xED	; 237
     e4e:	96 e0       	ldi	r25, 0x06	; 6
     e50:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
  transmitString(time);
     e54:	82 eb       	ldi	r24, 0xB2	; 178
     e56:	92 e0       	ldi	r25, 0x02	; 2
     e58:	0e 94 8e 05 	call	0xb1c	; 0xb1c <transmitString>

  return 0;
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	08 95       	ret
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
  if(error) return 1;
     e60:	81 e0       	ldi	r24, 0x01	; 1
  TX_NEWLINE;
  transmitString_F(PSTR("Time:"));
  transmitString(time);

  return 0;
}
     e62:	08 95       	ret

00000e64 <RTC_getDate>:
//Function to form date string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
     e64:	0e 94 8c 06 	call	0xd18	; 0xd18 <RTC_read>
  if(error) return 1;
     e68:	81 11       	cpse	r24, r1
     e6a:	3f c0       	rjmp	.+126    	; 0xeea <RTC_getDate+0x86>

  date[11] = 0x00;
     e6c:	e2 ec       	ldi	r30, 0xC2	; 194
     e6e:	f2 e0       	ldi	r31, 0x02	; 2
     e70:	13 86       	std	Z+11, r1	; 0x0b
  date[10] = 0x00;
     e72:	12 86       	std	Z+10, r1	; 0x0a
  date[9] = (YEAR & 0x0f) | 0x30;
     e74:	a0 e8       	ldi	r26, 0x80	; 128
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	16 96       	adiw	r26, 0x06	; 6
     e7a:	8c 91       	ld	r24, X
     e7c:	16 97       	sbiw	r26, 0x06	; 6
     e7e:	98 2f       	mov	r25, r24
     e80:	9f 70       	andi	r25, 0x0F	; 15
     e82:	90 63       	ori	r25, 0x30	; 48
     e84:	91 87       	std	Z+9, r25	; 0x09
  date[8] = ((YEAR & 0xf0) >> 4) | 0x30;
     e86:	82 95       	swap	r24
     e88:	8f 70       	andi	r24, 0x0F	; 15
     e8a:	80 63       	ori	r24, 0x30	; 48
     e8c:	80 87       	std	Z+8, r24	; 0x08
  date[7] = '0';
     e8e:	80 e3       	ldi	r24, 0x30	; 48
     e90:	87 83       	std	Z+7, r24	; 0x07
  date[6] = '2';
     e92:	82 e3       	ldi	r24, 0x32	; 50
     e94:	86 83       	std	Z+6, r24	; 0x06
  date[5] = '/';
     e96:	2f e2       	ldi	r18, 0x2F	; 47
     e98:	25 83       	std	Z+5, r18	; 0x05
  date[4] = (MONTH & 0x0f) | 0x30;
     e9a:	15 96       	adiw	r26, 0x05	; 5
     e9c:	8c 91       	ld	r24, X
     e9e:	15 97       	sbiw	r26, 0x05	; 5
     ea0:	98 2f       	mov	r25, r24
     ea2:	9f 70       	andi	r25, 0x0F	; 15
     ea4:	90 63       	ori	r25, 0x30	; 48
     ea6:	94 83       	std	Z+4, r25	; 0x04
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
     ea8:	80 71       	andi	r24, 0x10	; 16
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	95 95       	asr	r25
     eae:	87 95       	ror	r24
     eb0:	95 95       	asr	r25
     eb2:	87 95       	ror	r24
     eb4:	95 95       	asr	r25
     eb6:	87 95       	ror	r24
     eb8:	95 95       	asr	r25
     eba:	87 95       	ror	r24
     ebc:	80 63       	ori	r24, 0x30	; 48
     ebe:	83 83       	std	Z+3, r24	; 0x03
  date[2] = '/';
     ec0:	22 83       	std	Z+2, r18	; 0x02
  date[1] = (DATE & 0x0f) | 0x30;
     ec2:	14 96       	adiw	r26, 0x04	; 4
     ec4:	8c 91       	ld	r24, X
     ec6:	98 2f       	mov	r25, r24
     ec8:	9f 70       	andi	r25, 0x0F	; 15
     eca:	90 63       	ori	r25, 0x30	; 48
     ecc:	91 83       	std	Z+1, r25	; 0x01
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
     ece:	80 73       	andi	r24, 0x30	; 48
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	95 95       	asr	r25
     ed4:	87 95       	ror	r24
     ed6:	95 95       	asr	r25
     ed8:	87 95       	ror	r24
     eda:	95 95       	asr	r25
     edc:	87 95       	ror	r24
     ede:	95 95       	asr	r25
     ee0:	87 95       	ror	r24
     ee2:	80 63       	ori	r24, 0x30	; 48
     ee4:	80 83       	st	Z, r24
  return 0;
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	08 95       	ret
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
  if(error) return 1;
     eea:	81 e0       	ldi	r24, 0x01	; 1
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
  date[2] = '/';
  date[1] = (DATE & 0x0f) | 0x30;
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
  return 0;
}  
     eec:	08 95       	ret

00000eee <RTC_displayDate>:
//Function to display date on LCD and send it to PC (UART)
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
     eee:	0e 94 32 07 	call	0xe64	; 0xe64 <RTC_getDate>
  if(error) return 1;
     ef2:	81 11       	cpse	r24, r1
     ef4:	12 c0       	rjmp	.+36     	; 0xf1a <RTC_displayDate+0x2c>
  
  TX_NEWLINE;
     ef6:	8d e0       	ldi	r24, 0x0D	; 13
     ef8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
     efc:	8a e0       	ldi	r24, 0x0A	; 10
     efe:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
  transmitString_F(PSTR("Date:")); 
     f02:	87 ee       	ldi	r24, 0xE7	; 231
     f04:	96 e0       	ldi	r25, 0x06	; 6
     f06:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
  transmitString(date);  
     f0a:	82 ec       	ldi	r24, 0xC2	; 194
     f0c:	92 e0       	ldi	r25, 0x02	; 2
     f0e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <transmitString>
  RTC_displayDay();  
     f12:	0e 94 9b 05 	call	0xb36	; 0xb36 <RTC_displayDay>
  
  return 0; 
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	08 95       	ret
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
  if(error) return 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
  transmitString_F(PSTR("Date:")); 
  transmitString(date);  
  RTC_displayDay();  
  
  return 0; 
}
     f1c:	08 95       	ret

00000f1e <getDateTime_FAT>:
{
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
     f1e:	0e 94 8c 06 	call	0xd18	; 0xd18 <RTC_read>
   if(error) return 1;
     f22:	81 11       	cpse	r24, r1
     f24:	80 c0       	rjmp	.+256    	; 0x1026 <getDateTime_FAT+0x108>

   yr = (YEAR & 0xf0) >> 4;
     f26:	e0 e8       	ldi	r30, 0x80	; 128
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	26 81       	ldd	r18, Z+6	; 0x06
     f2c:	82 2f       	mov	r24, r18
     f2e:	82 95       	swap	r24
     f30:	8f 70       	andi	r24, 0x0F	; 15
     f32:	90 e0       	ldi	r25, 0x00	; 0
   yr = (yr * 10)+(YEAR & 0x0f);
     f34:	ac 01       	movw	r20, r24
     f36:	44 0f       	add	r20, r20
     f38:	55 1f       	adc	r21, r21
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	84 0f       	add	r24, r20
     f48:	95 1f       	adc	r25, r21
     f4a:	2f 70       	andi	r18, 0x0F	; 15
     f4c:	82 0f       	add	r24, r18
     f4e:	91 1d       	adc	r25, r1
   yr = yr+2000;
   yr = yr - 1980;
     f50:	44 96       	adiw	r24, 0x14	; 20

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
     f52:	55 81       	ldd	r21, Z+5	; 0x05
     f54:	25 2f       	mov	r18, r21
     f56:	22 95       	swap	r18
     f58:	2f 70       	andi	r18, 0x0F	; 15
   mth = (mth * 10)+(MONTH & 0x0f);
     f5a:	22 0f       	add	r18, r18
     f5c:	42 2f       	mov	r20, r18
     f5e:	44 0f       	add	r20, r20
     f60:	44 0f       	add	r20, r20
     f62:	32 2f       	mov	r19, r18
     f64:	34 0f       	add	r19, r20
     f66:	25 2f       	mov	r18, r21
     f68:	2f 70       	andi	r18, 0x0F	; 15
     f6a:	23 0f       	add	r18, r19

   dateFAT = (dateFAT << 4) | mth;
     f6c:	82 95       	swap	r24
     f6e:	92 95       	swap	r25
     f70:	90 7f       	andi	r25, 0xF0	; 240
     f72:	98 27       	eor	r25, r24
     f74:	80 7f       	andi	r24, 0xF0	; 240
     f76:	98 27       	eor	r25, r24
     f78:	82 2b       	or	r24, r18

   dt = (DATE & 0xf0) >> 4;
     f7a:	54 81       	ldd	r21, Z+4	; 0x04
     f7c:	25 2f       	mov	r18, r21
     f7e:	22 95       	swap	r18
     f80:	2f 70       	andi	r18, 0x0F	; 15
   dt = (dt * 10)+(DATE & 0x0f);
     f82:	22 0f       	add	r18, r18
     f84:	42 2f       	mov	r20, r18
     f86:	44 0f       	add	r20, r20
     f88:	44 0f       	add	r20, r20
     f8a:	32 2f       	mov	r19, r18
     f8c:	34 0f       	add	r19, r20
     f8e:	25 2f       	mov	r18, r21
     f90:	2f 70       	andi	r18, 0x0F	; 15
     f92:	23 0f       	add	r18, r19

   dateFAT = (dateFAT << 5) | dt;
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	82 95       	swap	r24
     f9a:	92 95       	swap	r25
     f9c:	90 7f       	andi	r25, 0xF0	; 240
     f9e:	98 27       	eor	r25, r24
     fa0:	80 7f       	andi	r24, 0xF0	; 240
     fa2:	98 27       	eor	r25, r24
     fa4:	82 2b       	or	r24, r18
     fa6:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <dateFAT+0x1>
     faa:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <dateFAT>


   hr = (HOURS & 0xf0) >> 4;
     fae:	32 81       	ldd	r19, Z+2	; 0x02
     fb0:	83 2f       	mov	r24, r19
     fb2:	82 95       	swap	r24
     fb4:	8f 70       	andi	r24, 0x0F	; 15
   hr = (hr * 10)+(HOURS & 0x0f);
     fb6:	88 0f       	add	r24, r24
     fb8:	28 2f       	mov	r18, r24
     fba:	22 0f       	add	r18, r18
     fbc:	22 0f       	add	r18, r18
     fbe:	98 2f       	mov	r25, r24
     fc0:	92 0f       	add	r25, r18
     fc2:	83 2f       	mov	r24, r19
     fc4:	8f 70       	andi	r24, 0x0F	; 15
     fc6:	89 0f       	add	r24, r25

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
     fc8:	41 81       	ldd	r20, Z+1	; 0x01
     fca:	24 2f       	mov	r18, r20
     fcc:	22 95       	swap	r18
     fce:	2f 70       	andi	r18, 0x0F	; 15
   min = (min * 10)+(MINUTES & 0x0f);
     fd0:	22 0f       	add	r18, r18
     fd2:	32 2f       	mov	r19, r18
     fd4:	33 0f       	add	r19, r19
     fd6:	33 0f       	add	r19, r19
     fd8:	92 2f       	mov	r25, r18
     fda:	93 0f       	add	r25, r19
     fdc:	24 2f       	mov	r18, r20
     fde:	2f 70       	andi	r18, 0x0F	; 15
     fe0:	29 0f       	add	r18, r25

   timeFAT = (timeFAT << 6) | min;
     fe2:	30 e4       	ldi	r19, 0x40	; 64
     fe4:	83 9f       	mul	r24, r19
     fe6:	c0 01       	movw	r24, r0
     fe8:	11 24       	eor	r1, r1
     fea:	82 2b       	or	r24, r18

   sec = (SECONDS & 0xf0) >> 4;
     fec:	50 81       	ld	r21, Z
     fee:	25 2f       	mov	r18, r21
     ff0:	22 95       	swap	r18
     ff2:	2f 70       	andi	r18, 0x0F	; 15
   sec = (sec * 10)+(SECONDS & 0x0f);
     ff4:	22 0f       	add	r18, r18
     ff6:	42 2f       	mov	r20, r18
     ff8:	44 0f       	add	r20, r20
     ffa:	44 0f       	add	r20, r20
     ffc:	32 2f       	mov	r19, r18
     ffe:	34 0f       	add	r19, r20
    1000:	25 2f       	mov	r18, r21
    1002:	2f 70       	andi	r18, 0x0F	; 15
    1004:	23 0f       	add	r18, r19
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)
    1006:	26 95       	lsr	r18

   timeFAT = (timeFAT << 5) | sec;
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	82 95       	swap	r24
    100e:	92 95       	swap	r25
    1010:	90 7f       	andi	r25, 0xF0	; 240
    1012:	98 27       	eor	r25, r24
    1014:	80 7f       	andi	r24, 0xF0	; 240
    1016:	98 27       	eor	r25, r24
    1018:	82 2b       	or	r24, r18
    101a:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <timeFAT+0x1>
    101e:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <timeFAT>

   
   return 0;
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	08 95       	ret
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
   if(error) return 1;
    1026:	81 e0       	ldi	r24, 0x01	; 1

   timeFAT = (timeFAT << 5) | sec;

   
   return 0;
}
    1028:	08 95       	ret

0000102a <RTC_writeTime>:

//******************************************************************
//Function to write new time in the RTC 
//******************************************************************   
unsigned char RTC_writeTime(void)
{
    102a:	cf 93       	push	r28
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    102c:	0e 94 34 06 	call	0xc68	; 0xc68 <i2c_start>
   if(errorStatus == 1)
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	21 f4       	brne	.+8      	; 0x103c <RTC_writeTime+0x12>
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
    1034:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	 return(1);
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	27 c0       	rjmp	.+78     	; 0x108a <RTC_writeTime+0x60>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    103c:	80 ed       	ldi	r24, 0xD0	; 208
    103e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <i2c_sendAddress>
   
   if(errorStatus == 1)
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	21 f4       	brne	.+8      	; 0x104e <RTC_writeTime+0x24>
   {
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
    1046:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	 return(1);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	1e c0       	rjmp	.+60     	; 0x108a <RTC_writeTime+0x60>
   } 
   
   errorStatus = i2c_sendData(0x00);
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	0e 94 61 06 	call	0xcc2	; 0xcc2 <i2c_sendData>
   if(errorStatus == 1)
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	99 f4       	brne	.+38     	; 0x107e <RTC_writeTime+0x54>
   {
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
    1058:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	 return(1);
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	15 c0       	rjmp	.+42     	; 0x108a <RTC_writeTime+0x60>
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    1060:	ec 2f       	mov	r30, r28
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	e0 58       	subi	r30, 0x80	; 128
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 81       	ld	r24, Z
    106a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <i2c_sendData>
   	  if(errorStatus == 1)
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	21 f4       	brne	.+8      	; 0x107a <RTC_writeTime+0x50>
   	  {
       		//transmitString_F(PSTR("RTC write time failed.."));
			i2c_stop();
    1072:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	   		return(1);
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	08 c0       	rjmp	.+16     	; 0x108a <RTC_writeTime+0x60>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=0;i<3;i++)
    107a:	cf 5f       	subi	r28, 0xFF	; 255
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <RTC_writeTime+0x56>
    107e:	c0 e0       	ldi	r28, 0x00	; 0
    1080:	c3 30       	cpi	r28, 0x03	; 3
    1082:	70 f3       	brcs	.-36     	; 0x1060 <RTC_writeTime+0x36>
			i2c_stop();
	   		return(1);
   	  }
    }
	
	i2c_stop();
    1084:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	return(0);
    1088:	80 e0       	ldi	r24, 0x00	; 0
}
    108a:	cf 91       	pop	r28
    108c:	08 95       	ret

0000108e <RTC_updateTime>:
  
//******************************************************************
//Function to update RTC time by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateTime(void)
{
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
  unsigned char data;
  TX_NEWLINE;
    1094:	8d e0       	ldi	r24, 0x0D	; 13
    1096:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    109a:	8a e0       	ldi	r24, 0x0A	; 10
    109c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
  transmitString_F(PSTR("Enter Time in 24h format(hh:mm:ss):")); 
    10a0:	88 e7       	ldi	r24, 0x78	; 120
    10a2:	96 e0       	ldi	r25, 0x06	; 6
    10a4:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
  
    data = receiveByte(); 	   	  	  				//receive hours
    10a8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    10ac:	c8 2f       	mov	r28, r24
	transmitByte(data);
    10ae:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	if(data < 0x30 || data > 0x32)
    10b2:	80 ed       	ldi	r24, 0xD0	; 208
    10b4:	8c 0f       	add	r24, r28
    10b6:	83 30       	cpi	r24, 0x03	; 3
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <RTC_updateTime+0x2e>
    10ba:	72 c0       	rjmp	.+228    	; 0x11a0 <RTC_updateTime+0x112>
	   goto TIME_ERROR;
	   
	time[0]= data;
    10bc:	c0 93 b2 02 	sts	0x02B2, r28	; 0x8002b2 <time>
	 
	data = receiveByte();
    10c0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    10c4:	c8 2f       	mov	r28, r24
	transmitByte(data);
    10c6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	if(data < 0x30 || data > 0x39)
    10ca:	80 ed       	ldi	r24, 0xD0	; 208
    10cc:	8c 0f       	add	r24, r28
    10ce:	8a 30       	cpi	r24, 0x0A	; 10
    10d0:	08 f0       	brcs	.+2      	; 0x10d4 <RTC_updateTime+0x46>
    10d2:	66 c0       	rjmp	.+204    	; 0x11a0 <RTC_updateTime+0x112>
	   goto TIME_ERROR;
	 
	time[1]= data;
    10d4:	02 eb       	ldi	r16, 0xB2	; 178
    10d6:	12 e0       	ldi	r17, 0x02	; 2
    10d8:	f8 01       	movw	r30, r16
    10da:	c1 83       	std	Z+1, r28	; 0x01
	
	transmitByte(':');
    10dc:	8a e3       	ldi	r24, 0x3A	; 58
    10de:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	
	if(((time[1] & 0x0f) + ((time[0] & 0x03)*10)) > 23)
    10e2:	f8 01       	movw	r30, r16
    10e4:	21 81       	ldd	r18, Z+1	; 0x01
    10e6:	2f 70       	andi	r18, 0x0F	; 15
    10e8:	80 81       	ld	r24, Z
    10ea:	83 70       	andi	r24, 0x03	; 3
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	ac 01       	movw	r20, r24
    10f0:	44 0f       	add	r20, r20
    10f2:	55 1f       	adc	r21, r21
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	84 0f       	add	r24, r20
    1102:	95 1f       	adc	r25, r21
    1104:	82 0f       	add	r24, r18
    1106:	91 1d       	adc	r25, r1
    1108:	48 97       	sbiw	r24, 0x18	; 24
    110a:	0c f0       	brlt	.+2      	; 0x110e <RTC_updateTime+0x80>
    110c:	49 c0       	rjmp	.+146    	; 0x11a0 <RTC_updateTime+0x112>
	   goto TIME_ERROR;
	 
	 data = receiveByte();			   			  //receive minutes
    110e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    1112:	c8 2f       	mov	r28, r24
	 transmitByte(data);
    1114:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	if(data < 0x30 || data > 0x35)
    1118:	80 ed       	ldi	r24, 0xD0	; 208
    111a:	8c 0f       	add	r24, r28
    111c:	86 30       	cpi	r24, 0x06	; 6
    111e:	08 f0       	brcs	.+2      	; 0x1122 <RTC_updateTime+0x94>
    1120:	3f c0       	rjmp	.+126    	; 0x11a0 <RTC_updateTime+0x112>
	   goto TIME_ERROR;
	   
	time[3]= data; 
    1122:	c0 93 b5 02 	sts	0x02B5, r28	; 0x8002b5 <time+0x3>
	
	data = receiveByte();
    1126:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    112a:	c8 2f       	mov	r28, r24
	transmitByte(data);
    112c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	if(data < 0x30 || data > 0x39)
    1130:	80 ed       	ldi	r24, 0xD0	; 208
    1132:	8c 0f       	add	r24, r28
    1134:	8a 30       	cpi	r24, 0x0A	; 10
    1136:	a0 f5       	brcc	.+104    	; 0x11a0 <RTC_updateTime+0x112>
	   goto TIME_ERROR;
	   
	time[4]= data; 
    1138:	c0 93 b6 02 	sts	0x02B6, r28	; 0x8002b6 <time+0x4>
	
	transmitByte(':');
    113c:	8a e3       	ldi	r24, 0x3A	; 58
    113e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	
	 data = receiveByte();			   			  //receive seconds
    1142:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    1146:	c8 2f       	mov	r28, r24
	 transmitByte(data);
    1148:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	if(data < 0x30 || data > 0x35)
    114c:	80 ed       	ldi	r24, 0xD0	; 208
    114e:	8c 0f       	add	r24, r28
    1150:	86 30       	cpi	r24, 0x06	; 6
    1152:	30 f5       	brcc	.+76     	; 0x11a0 <RTC_updateTime+0x112>
	   goto TIME_ERROR;
	   
	time[6]= data; 
    1154:	c0 93 b8 02 	sts	0x02B8, r28	; 0x8002b8 <time+0x6>
	
	data = receiveByte();
    1158:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    115c:	c8 2f       	mov	r28, r24
	transmitByte(data);
    115e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	if(data < 0x30 || data > 0x39)
    1162:	80 ed       	ldi	r24, 0xD0	; 208
    1164:	8c 0f       	add	r24, r28
    1166:	8a 30       	cpi	r24, 0x0A	; 10
    1168:	d8 f4       	brcc	.+54     	; 0x11a0 <RTC_updateTime+0x112>
	   goto TIME_ERROR;
	   
	time[7]= data; 
    116a:	c0 93 b9 02 	sts	0x02B9, r28	; 0x8002b9 <time+0x7>
	
	 	  
  RTC_updateRegisters(); 
    116e:	0e 94 d3 05 	call	0xba6	; 0xba6 <RTC_updateRegisters>
  data = RTC_writeTime();
    1172:	0e 94 15 08 	call	0x102a	; 0x102a <RTC_writeTime>
    1176:	c8 2f       	mov	r28, r24

  TX_NEWLINE;
    1178:	8d e0       	ldi	r24, 0x0D	; 13
    117a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    117e:	8a e0       	ldi	r24, 0x0A	; 10
    1180:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
  if(data == 0)
    1184:	c1 11       	cpse	r28, r1
    1186:	06 c0       	rjmp	.+12     	; 0x1194 <RTC_updateTime+0x106>
  {     
  	 transmitString_F(PSTR("Time Updated sucessfully!")); 
    1188:	8e e5       	ldi	r24, 0x5E	; 94
    118a:	96 e0       	ldi	r25, 0x06	; 6
    118c:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
	 return 0;
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	11 c0       	rjmp	.+34     	; 0x11b6 <RTC_updateTime+0x128>
  }	
  else 
  { 
     transmitString_F(PSTR("Time Update Failed.."));
    1194:	89 e4       	ldi	r24, 0x49	; 73
    1196:	96 e0       	ldi	r25, 0x06	; 6
    1198:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
	 return 1;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	0b c0       	rjmp	.+22     	; 0x11b6 <RTC_updateTime+0x128>
  }
TIME_ERROR:

  TX_NEWLINE;
    11a0:	8d e0       	ldi	r24, 0x0D	; 13
    11a2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    11a6:	8a e0       	ldi	r24, 0x0A	; 10
    11a8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    11ac:	89 e3       	ldi	r24, 0x39	; 57
    11ae:	96 e0       	ldi	r25, 0x06	; 6
    11b0:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
  return 1;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
}  
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	08 95       	ret

000011be <RTC_writeDate>:

//******************************************************************
//Function to write new date in the RTC
//******************************************************************   
unsigned char RTC_writeDate(void)
{
    11be:	cf 93       	push	r28
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    11c0:	0e 94 34 06 	call	0xc68	; 0xc68 <i2c_start>
   if(errorStatus == 1)
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	21 f4       	brne	.+8      	; 0x11d0 <RTC_writeDate+0x12>
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
    11c8:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	 return(1);
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	27 c0       	rjmp	.+78     	; 0x121e <RTC_writeDate+0x60>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    11d0:	80 ed       	ldi	r24, 0xD0	; 208
    11d2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <i2c_sendAddress>
   
   if(errorStatus == 1)
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	21 f4       	brne	.+8      	; 0x11e2 <RTC_writeDate+0x24>
   {
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
    11da:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	 return(1);
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	1e c0       	rjmp	.+60     	; 0x121e <RTC_writeDate+0x60>
   } 
   
   errorStatus = i2c_sendData(0x03);
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	0e 94 61 06 	call	0xcc2	; 0xcc2 <i2c_sendData>
   if(errorStatus == 1)
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	99 f4       	brne	.+38     	; 0x1212 <RTC_writeDate+0x54>
   {
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
    11ec:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	 return(1);
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	15 c0       	rjmp	.+42     	; 0x121e <RTC_writeDate+0x60>
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    11f4:	ec 2f       	mov	r30, r28
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	e0 58       	subi	r30, 0x80	; 128
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	80 81       	ld	r24, Z
    11fe:	0e 94 61 06 	call	0xcc2	; 0xcc2 <i2c_sendData>
   	  if(errorStatus == 1)
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	21 f4       	brne	.+8      	; 0x120e <RTC_writeDate+0x50>
   	  {
       		//transmitString_F(PSTR("RTC write date failed.."));
			i2c_stop();
    1206:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	   		return(1);
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	08 c0       	rjmp	.+16     	; 0x121e <RTC_writeDate+0x60>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=3;i<7;i++)
    120e:	cf 5f       	subi	r28, 0xFF	; 255
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <RTC_writeDate+0x56>
    1212:	c3 e0       	ldi	r28, 0x03	; 3
    1214:	c7 30       	cpi	r28, 0x07	; 7
    1216:	70 f3       	brcs	.-36     	; 0x11f4 <RTC_writeDate+0x36>
			i2c_stop();
	   		return(1);
   	  }
    }
	
	i2c_stop();
    1218:	0e 94 89 06 	call	0xd12	; 0xd12 <i2c_stop>
	return(0);
    121c:	80 e0       	ldi	r24, 0x00	; 0
}
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret

00001222 <RTC_updateDate>:
  
//******************************************************************
//Function to update RTC date by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateDate(void)
{
    1222:	cf 93       	push	r28
  unsigned char data;
  TX_NEWLINE;
    1224:	8d e0       	ldi	r24, 0x0D	; 13
    1226:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    122a:	8a e0       	ldi	r24, 0x0A	; 10
    122c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
  transmitString_F(PSTR("Enter Date (dd/mm/yy):")); 
    1230:	82 e2       	ldi	r24, 0x22	; 34
    1232:	96 e0       	ldi	r25, 0x06	; 6
    1234:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
  
    data = receiveByte(); 	   				  		//receive date
    1238:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    123c:	c8 2f       	mov	r28, r24
	transmitByte(data); 	   	  	  				
    123e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	if(data < 0x30 || data > 0x33)
    1242:	80 ed       	ldi	r24, 0xD0	; 208
    1244:	8c 0f       	add	r24, r28
    1246:	84 30       	cpi	r24, 0x04	; 4
    1248:	08 f0       	brcs	.+2      	; 0x124c <RTC_updateDate+0x2a>
    124a:	a7 c0       	rjmp	.+334    	; 0x139a <RTC_updateDate+0x178>
	   goto DATE_ERROR;
	   
	date[0]= data;
    124c:	c0 93 c2 02 	sts	0x02C2, r28	; 0x8002c2 <date>
	 
	data = receiveByte();
    1250:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    1254:	c8 2f       	mov	r28, r24
	transmitByte(data);
    1256:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	if(data < 0x30 || data > 0x39)
    125a:	80 ed       	ldi	r24, 0xD0	; 208
    125c:	8c 0f       	add	r24, r28
    125e:	8a 30       	cpi	r24, 0x0A	; 10
    1260:	08 f0       	brcs	.+2      	; 0x1264 <RTC_updateDate+0x42>
    1262:	9b c0       	rjmp	.+310    	; 0x139a <RTC_updateDate+0x178>
	   goto DATE_ERROR;
	   
	date[1]= data;
    1264:	e2 ec       	ldi	r30, 0xC2	; 194
    1266:	f2 e0       	ldi	r31, 0x02	; 2
    1268:	c1 83       	std	Z+1, r28	; 0x01
	
	if(((date[1] & 0x0f) + ((date[0] & 0x03)*10)) > 31)
    126a:	cf 70       	andi	r28, 0x0F	; 15
    126c:	20 81       	ld	r18, Z
    126e:	23 70       	andi	r18, 0x03	; 3
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	c9 01       	movw	r24, r18
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	22 0f       	add	r18, r18
    127a:	33 1f       	adc	r19, r19
    127c:	22 0f       	add	r18, r18
    127e:	33 1f       	adc	r19, r19
    1280:	22 0f       	add	r18, r18
    1282:	33 1f       	adc	r19, r19
    1284:	28 0f       	add	r18, r24
    1286:	39 1f       	adc	r19, r25
    1288:	2c 0f       	add	r18, r28
    128a:	31 1d       	adc	r19, r1
    128c:	20 32       	cpi	r18, 0x20	; 32
    128e:	31 05       	cpc	r19, r1
    1290:	0c f0       	brlt	.+2      	; 0x1294 <RTC_updateDate+0x72>
    1292:	83 c0       	rjmp	.+262    	; 0x139a <RTC_updateDate+0x178>
	   goto DATE_ERROR;
    transmitByte('/');
    1294:	8f e2       	ldi	r24, 0x2F	; 47
    1296:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	
	date[2] = '/';
    129a:	8f e2       	ldi	r24, 0x2F	; 47
    129c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <date+0x2>
	   
	
	data = receiveByte();			   			  //receive month
    12a0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    12a4:	c8 2f       	mov	r28, r24
	transmitByte(data);
    12a6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	if(data < 0x30 || data > 0x31)
    12aa:	80 ed       	ldi	r24, 0xD0	; 208
    12ac:	8c 0f       	add	r24, r28
    12ae:	82 30       	cpi	r24, 0x02	; 2
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <RTC_updateDate+0x92>
    12b2:	73 c0       	rjmp	.+230    	; 0x139a <RTC_updateDate+0x178>
	  goto DATE_ERROR;
	  
	date[3]= data; 
    12b4:	c0 93 c5 02 	sts	0x02C5, r28	; 0x8002c5 <date+0x3>
	
	data = receiveByte();
    12b8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    12bc:	c8 2f       	mov	r28, r24
	transmitByte(data);
    12be:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	if(data < 0x30 || data > 0x39)
    12c2:	80 ed       	ldi	r24, 0xD0	; 208
    12c4:	8c 0f       	add	r24, r28
    12c6:	8a 30       	cpi	r24, 0x0A	; 10
    12c8:	08 f0       	brcs	.+2      	; 0x12cc <RTC_updateDate+0xaa>
    12ca:	67 c0       	rjmp	.+206    	; 0x139a <RTC_updateDate+0x178>
	  goto DATE_ERROR;
	  
	date[4] = data; 
    12cc:	e2 ec       	ldi	r30, 0xC2	; 194
    12ce:	f2 e0       	ldi	r31, 0x02	; 2
    12d0:	c4 83       	std	Z+4, r28	; 0x04
	
	if(((date[4] & 0x0f) + ((date[3] & 0x03)*10)) > 12)
    12d2:	cf 70       	andi	r28, 0x0F	; 15
    12d4:	23 81       	ldd	r18, Z+3	; 0x03
    12d6:	23 70       	andi	r18, 0x03	; 3
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	c9 01       	movw	r24, r18
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	22 0f       	add	r18, r18
    12e2:	33 1f       	adc	r19, r19
    12e4:	22 0f       	add	r18, r18
    12e6:	33 1f       	adc	r19, r19
    12e8:	22 0f       	add	r18, r18
    12ea:	33 1f       	adc	r19, r19
    12ec:	82 0f       	add	r24, r18
    12ee:	93 1f       	adc	r25, r19
    12f0:	8c 0f       	add	r24, r28
    12f2:	91 1d       	adc	r25, r1
    12f4:	0d 97       	sbiw	r24, 0x0d	; 13
    12f6:	0c f0       	brlt	.+2      	; 0x12fa <RTC_updateDate+0xd8>
    12f8:	50 c0       	rjmp	.+160    	; 0x139a <RTC_updateDate+0x178>
	   goto DATE_ERROR;
	transmitByte('/');
    12fa:	8f e2       	ldi	r24, 0x2F	; 47
    12fc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	   
	
	date[5] = '/';
    1300:	e2 ec       	ldi	r30, 0xC2	; 194
    1302:	f2 e0       	ldi	r31, 0x02	; 2
    1304:	8f e2       	ldi	r24, 0x2F	; 47
    1306:	85 83       	std	Z+5, r24	; 0x05
	
	date[6] = '2'; 	   	   	  	  //year is 20xx
    1308:	82 e3       	ldi	r24, 0x32	; 50
    130a:	86 83       	std	Z+6, r24	; 0x06
	date[7] = '0';
    130c:	80 e3       	ldi	r24, 0x30	; 48
    130e:	87 83       	std	Z+7, r24	; 0x07
	
	data = receiveByte();			   			 
    1310:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    1314:	c8 2f       	mov	r28, r24
	transmitByte(data);
    1316:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	if(data < 0x30 || data > 0x39)
    131a:	80 ed       	ldi	r24, 0xD0	; 208
    131c:	8c 0f       	add	r24, r28
    131e:	8a 30       	cpi	r24, 0x0A	; 10
    1320:	e0 f5       	brcc	.+120    	; 0x139a <RTC_updateDate+0x178>
	   goto DATE_ERROR;
	   
	date[8]= data; 
    1322:	c0 93 ca 02 	sts	0x02CA, r28	; 0x8002ca <date+0x8>
	
	data = receiveByte();
    1326:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    132a:	c8 2f       	mov	r28, r24
	transmitByte(data);
    132c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	if(data < 0x30 || data > 0x39)
    1330:	80 ed       	ldi	r24, 0xD0	; 208
    1332:	8c 0f       	add	r24, r28
    1334:	8a 30       	cpi	r24, 0x0A	; 10
    1336:	88 f5       	brcc	.+98     	; 0x139a <RTC_updateDate+0x178>
	   goto DATE_ERROR;
	   
	date[9]= data; 
    1338:	c0 93 cb 02 	sts	0x02CB, r28	; 0x8002cb <date+0x9>
	
	TX_NEWLINE;
    133c:	8d e0       	ldi	r24, 0x0D	; 13
    133e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    1342:	8a e0       	ldi	r24, 0x0A	; 10
    1344:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    transmitString_F(PSTR("Enter Day (Sunday:0, Monday:1...) (0-6):")); 
    1348:	89 ef       	ldi	r24, 0xF9	; 249
    134a:	95 e0       	ldi	r25, 0x05	; 5
    134c:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
	
	data = receiveByte();				   //receive Day of the week
    1350:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    1354:	c8 2f       	mov	r28, r24
	transmitByte(data);
    1356:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	if(data < 0x30 || data > 0x36)
    135a:	80 ed       	ldi	r24, 0xD0	; 208
    135c:	8c 0f       	add	r24, r28
    135e:	87 30       	cpi	r24, 0x07	; 7
    1360:	e0 f4       	brcc	.+56     	; 0x139a <RTC_updateDate+0x178>
	   goto DATE_ERROR;
	   
	date[10] = data & 0x0f;
    1362:	cf 70       	andi	r28, 0x0F	; 15
    1364:	c0 93 cc 02 	sts	0x02CC, r28	; 0x8002cc <date+0xa>
		 	  
  RTC_updateRegisters(); 
    1368:	0e 94 d3 05 	call	0xba6	; 0xba6 <RTC_updateRegisters>
  data = RTC_writeDate();
    136c:	0e 94 df 08 	call	0x11be	; 0x11be <RTC_writeDate>
    1370:	c8 2f       	mov	r28, r24

  TX_NEWLINE;
    1372:	8d e0       	ldi	r24, 0x0D	; 13
    1374:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    1378:	8a e0       	ldi	r24, 0x0A	; 10
    137a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
  if(data == 0)
    137e:	c1 11       	cpse	r28, r1
    1380:	06 c0       	rjmp	.+12     	; 0x138e <RTC_updateDate+0x16c>
  {
     
  	 transmitString_F(PSTR("Date Updated sucessfully!")); 
    1382:	8f ed       	ldi	r24, 0xDF	; 223
    1384:	95 e0       	ldi	r25, 0x05	; 5
    1386:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
	 return 0;
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	11 c0       	rjmp	.+34     	; 0x13b0 <RTC_updateDate+0x18e>
  }	  
  else
  {
     transmitString_F(PSTR("Date Update Failed.."));
    138e:	8a ec       	ldi	r24, 0xCA	; 202
    1390:	95 e0       	ldi	r25, 0x05	; 5
    1392:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
     return 1;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	0b c0       	rjmp	.+22     	; 0x13b0 <RTC_updateDate+0x18e>
  }

  DATE_ERROR:

  TX_NEWLINE;
    139a:	8d e0       	ldi	r24, 0x0D	; 13
    139c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    13a0:	8a e0       	ldi	r24, 0x0A	; 10
    13a2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    13a6:	8a eb       	ldi	r24, 0xBA	; 186
    13a8:	95 e0       	ldi	r25, 0x05	; 5
    13aa:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
  return 1;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
}  
    13b0:	cf 91       	pop	r28
    13b2:	08 95       	ret

000013b4 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    13b8:	9b 01       	movw	r18, r22
    13ba:	ac 01       	movw	r20, r24
    13bc:	22 50       	subi	r18, 0x02	; 2
    13be:	31 09       	sbc	r19, r1
    13c0:	41 09       	sbc	r20, r1
    13c2:	51 09       	sbc	r21, r1
    13c4:	a0 91 a5 02 	lds	r26, 0x02A5	; 0x8002a5 <sectorPerCluster>
    13c8:	b0 91 a6 02 	lds	r27, 0x02A6	; 0x8002a6 <sectorPerCluster+0x1>
    13cc:	0e 94 83 18 	call	0x3106	; 0x3106 <__muluhisi3>
    13d0:	00 91 8d 00 	lds	r16, 0x008D	; 0x80008d <firstDataSector>
    13d4:	10 91 8e 00 	lds	r17, 0x008E	; 0x80008e <firstDataSector+0x1>
    13d8:	20 91 8f 00 	lds	r18, 0x008F	; 0x80008f <firstDataSector+0x2>
    13dc:	30 91 90 00 	lds	r19, 0x0090	; 0x800090 <firstDataSector+0x3>
    13e0:	60 0f       	add	r22, r16
    13e2:	71 1f       	adc	r23, r17
    13e4:	82 1f       	adc	r24, r18
    13e6:	93 1f       	adc	r25, r19
}
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	08 95       	ret

000013ee <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    13ee:	4f 92       	push	r4
    13f0:	5f 92       	push	r5
    13f2:	6f 92       	push	r6
    13f4:	7f 92       	push	r7
    13f6:	8f 92       	push	r8
    13f8:	9f 92       	push	r9
    13fa:	af 92       	push	r10
    13fc:	bf 92       	push	r11
    13fe:	cf 92       	push	r12
    1400:	df 92       	push	r13
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	d4 2f       	mov	r29, r20
    1410:	28 01       	movw	r4, r16
    1412:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    1414:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <reservedSectorCount>
    1418:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <reservedSectorCount+0x1>
    141c:	c0 90 a7 02 	lds	r12, 0x02A7	; 0x8002a7 <unusedSectors>
    1420:	d0 90 a8 02 	lds	r13, 0x02A8	; 0x8002a8 <unusedSectors+0x1>
    1424:	e0 90 a9 02 	lds	r14, 0x02A9	; 0x8002a9 <unusedSectors+0x2>
    1428:	f0 90 aa 02 	lds	r15, 0x02AA	; 0x8002aa <unusedSectors+0x3>
    142c:	c2 0e       	add	r12, r18
    142e:	d3 1e       	adc	r13, r19
    1430:	e1 1c       	adc	r14, r1
    1432:	f1 1c       	adc	r15, r1
    1434:	4b 01       	movw	r8, r22
    1436:	5c 01       	movw	r10, r24
    1438:	88 0c       	add	r8, r8
    143a:	99 1c       	adc	r9, r9
    143c:	aa 1c       	adc	r10, r10
    143e:	bb 1c       	adc	r11, r11
    1440:	88 0c       	add	r8, r8
    1442:	99 1c       	adc	r9, r9
    1444:	aa 1c       	adc	r10, r10
    1446:	bb 1c       	adc	r11, r11
    1448:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <bytesPerSector>
    144c:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <bytesPerSector+0x1>
    1450:	40 e0       	ldi	r20, 0x00	; 0
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	c5 01       	movw	r24, r10
    1456:	b4 01       	movw	r22, r8
    1458:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <__udivmodsi4>
    145c:	c2 0e       	add	r12, r18
    145e:	d3 1e       	adc	r13, r19
    1460:	e4 1e       	adc	r14, r20
    1462:	f5 1e       	adc	r15, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    1464:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <bytesPerSector>
    1468:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <bytesPerSector+0x1>
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	c5 01       	movw	r24, r10
    1472:	b4 01       	movw	r22, r8
    1474:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <__udivmodsi4>
    1478:	4b 01       	movw	r8, r22
    147a:	5c 01       	movw	r10, r24
                                 unsigned long clusterEntry)
{
unsigned int FATEntryOffset;
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;
    147c:	c0 e0       	ldi	r28, 0x00	; 0

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
    147e:	07 c0       	rjmp	.+14     	; 0x148e <getSetNextCluster+0xa0>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
    1480:	c7 01       	movw	r24, r14
    1482:	b6 01       	movw	r22, r12
    1484:	0e 94 47 04 	call	0x88e	; 0x88e <SD_readSingleBlock>
    1488:	88 23       	and	r24, r24
    148a:	19 f0       	breq	.+6      	; 0x1492 <getSetNextCluster+0xa4>
    148c:	cf 5f       	subi	r28, 0xFF	; 255

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
    148e:	ca 30       	cpi	r28, 0x0A	; 10
    1490:	b8 f3       	brcs	.-18     	; 0x1480 <getSetNextCluster+0x92>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
    1492:	f4 01       	movw	r30, r8
    1494:	eb 55       	subi	r30, 0x5B	; 91
    1496:	ff 4f       	sbci	r31, 0xFF	; 255

if(get_set == GET)
    1498:	d1 11       	cpse	r29, r1
    149a:	08 c0       	rjmp	.+16     	; 0x14ac <getSetNextCluster+0xbe>
  return ((*FATEntryValue) & 0x0fffffff);
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	a2 81       	ldd	r26, Z+2	; 0x02
    14a2:	b3 81       	ldd	r27, Z+3	; 0x03
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	9f 70       	andi	r25, 0x0F	; 15
    14aa:	0b c0       	rjmp	.+22     	; 0x14c2 <getSetNextCluster+0xd4>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    14ac:	40 82       	st	Z, r4
    14ae:	51 82       	std	Z+1, r5	; 0x01
    14b0:	62 82       	std	Z+2, r6	; 0x02
    14b2:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
    14b4:	c7 01       	movw	r24, r14
    14b6:	b6 01       	movw	r22, r12
    14b8:	0e 94 7f 04 	call	0x8fe	; 0x8fe <SD_writeSingleBlock>

return (0);
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	cb 01       	movw	r24, r22
}
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	ff 90       	pop	r15
    14cc:	ef 90       	pop	r14
    14ce:	df 90       	pop	r13
    14d0:	cf 90       	pop	r12
    14d2:	bf 90       	pop	r11
    14d4:	af 90       	pop	r10
    14d6:	9f 90       	pop	r9
    14d8:	8f 90       	pop	r8
    14da:	7f 90       	pop	r7
    14dc:	6f 90       	pop	r6
    14de:	5f 90       	pop	r5
    14e0:	4f 90       	pop	r4
    14e2:	08 95       	ret

000014e4 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    14e4:	cf 92       	push	r12
    14e6:	df 92       	push	r13
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	d8 2f       	mov	r29, r24
    14f2:	c6 2f       	mov	r28, r22
    14f4:	69 01       	movw	r12, r18
    14f6:	7a 01       	movw	r14, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
    14f8:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <unusedSectors>
    14fc:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <unusedSectors+0x1>
    1500:	a0 91 a9 02 	lds	r26, 0x02A9	; 0x8002a9 <unusedSectors+0x2>
    1504:	b0 91 aa 02 	lds	r27, 0x02AA	; 0x8002aa <unusedSectors+0x3>
    1508:	bc 01       	movw	r22, r24
    150a:	cd 01       	movw	r24, r26
    150c:	6f 5f       	subi	r22, 0xFF	; 255
    150e:	7f 4f       	sbci	r23, 0xFF	; 255
    1510:	8f 4f       	sbci	r24, 0xFF	; 255
    1512:	9f 4f       	sbci	r25, 0xFF	; 255
    1514:	0e 94 47 04 	call	0x88e	; 0x88e <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    1518:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <buffer>
    151c:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <buffer+0x1>
    1520:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <buffer+0x2>
    1524:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <buffer+0x3>
    1528:	82 35       	cpi	r24, 0x52	; 82
    152a:	92 45       	sbci	r25, 0x52	; 82
    152c:	a1 46       	sbci	r26, 0x61	; 97
    152e:	b1 44       	sbci	r27, 0x41	; 65
    1530:	09 f0       	breq	.+2      	; 0x1534 <getSetFreeCluster+0x50>
    1532:	58 c0       	rjmp	.+176    	; 0x15e4 <getSetFreeCluster+0x100>
    1534:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <buffer+0x1e4>
    1538:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <buffer+0x1e5>
    153c:	a0 91 8b 02 	lds	r26, 0x028B	; 0x80028b <buffer+0x1e6>
    1540:	b0 91 8c 02 	lds	r27, 0x028C	; 0x80028c <buffer+0x1e7>
    1544:	82 37       	cpi	r24, 0x72	; 114
    1546:	92 47       	sbci	r25, 0x72	; 114
    1548:	a1 44       	sbci	r26, 0x41	; 65
    154a:	b1 46       	sbci	r27, 0x61	; 97
    154c:	09 f0       	breq	.+2      	; 0x1550 <getSetFreeCluster+0x6c>
    154e:	4e c0       	rjmp	.+156    	; 0x15ec <getSetFreeCluster+0x108>
    1550:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <buffer+0x1fc>
    1554:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <buffer+0x1fd>
    1558:	a0 91 a3 02 	lds	r26, 0x02A3	; 0x8002a3 <buffer+0x1fe>
    155c:	b0 91 a4 02 	lds	r27, 0x02A4	; 0x8002a4 <buffer+0x1ff>
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	a5 45       	sbci	r26, 0x55	; 85
    1564:	ba 4a       	sbci	r27, 0xAA	; 170
    1566:	09 f0       	breq	.+2      	; 0x156a <getSetFreeCluster+0x86>
    1568:	45 c0       	rjmp	.+138    	; 0x15f4 <getSetFreeCluster+0x110>
  return 0xffffffff;

 if(get_set == GET)
    156a:	c1 11       	cpse	r28, r1
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <getSetFreeCluster+0xb2>
 {
   if(totOrNext == TOTAL_FREE)
    156e:	d1 30       	cpi	r29, 0x01	; 1
    1570:	49 f4       	brne	.+18     	; 0x1584 <getSetFreeCluster+0xa0>
      return(FS->freeClusterCount);
    1572:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <buffer+0x1e8>
    1576:	70 91 8e 02 	lds	r23, 0x028E	; 0x80028e <buffer+0x1e9>
    157a:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <buffer+0x1ea>
    157e:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <buffer+0x1eb>
    1582:	3b c0       	rjmp	.+118    	; 0x15fa <getSetFreeCluster+0x116>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
    1584:	60 91 91 02 	lds	r22, 0x0291	; 0x800291 <buffer+0x1ec>
    1588:	70 91 92 02 	lds	r23, 0x0292	; 0x800292 <buffer+0x1ed>
    158c:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <buffer+0x1ee>
    1590:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <buffer+0x1ef>
    1594:	32 c0       	rjmp	.+100    	; 0x15fa <getSetFreeCluster+0x116>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
    1596:	d1 30       	cpi	r29, 0x01	; 1
    1598:	49 f4       	brne	.+18     	; 0x15ac <getSetFreeCluster+0xc8>
      FS->freeClusterCount = FSEntry;
    159a:	c0 92 8d 02 	sts	0x028D, r12	; 0x80028d <buffer+0x1e8>
    159e:	d0 92 8e 02 	sts	0x028E, r13	; 0x80028e <buffer+0x1e9>
    15a2:	e0 92 8f 02 	sts	0x028F, r14	; 0x80028f <buffer+0x1ea>
    15a6:	f0 92 90 02 	sts	0x0290, r15	; 0x800290 <buffer+0x1eb>
    15aa:	08 c0       	rjmp	.+16     	; 0x15bc <getSetFreeCluster+0xd8>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
    15ac:	c0 92 91 02 	sts	0x0291, r12	; 0x800291 <buffer+0x1ec>
    15b0:	d0 92 92 02 	sts	0x0292, r13	; 0x800292 <buffer+0x1ed>
    15b4:	e0 92 93 02 	sts	0x0293, r14	; 0x800293 <buffer+0x1ee>
    15b8:	f0 92 94 02 	sts	0x0294, r15	; 0x800294 <buffer+0x1ef>
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
    15bc:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <unusedSectors>
    15c0:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <unusedSectors+0x1>
    15c4:	a0 91 a9 02 	lds	r26, 0x02A9	; 0x8002a9 <unusedSectors+0x2>
    15c8:	b0 91 aa 02 	lds	r27, 0x02AA	; 0x8002aa <unusedSectors+0x3>
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	6f 5f       	subi	r22, 0xFF	; 255
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	8f 4f       	sbci	r24, 0xFF	; 255
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	0e 94 7f 04 	call	0x8fe	; 0x8fe <SD_writeSingleBlock>
 }
 return 0xffffffff;
    15dc:	6f ef       	ldi	r22, 0xFF	; 255
    15de:	7f ef       	ldi	r23, 0xFF	; 255
    15e0:	cb 01       	movw	r24, r22
    15e2:	0b c0       	rjmp	.+22     	; 0x15fa <getSetFreeCluster+0x116>
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
    15e4:	6f ef       	ldi	r22, 0xFF	; 255
    15e6:	7f ef       	ldi	r23, 0xFF	; 255
    15e8:	cb 01       	movw	r24, r22
    15ea:	07 c0       	rjmp	.+14     	; 0x15fa <getSetFreeCluster+0x116>
    15ec:	6f ef       	ldi	r22, 0xFF	; 255
    15ee:	7f ef       	ldi	r23, 0xFF	; 255
    15f0:	cb 01       	movw	r24, r22
    15f2:	03 c0       	rjmp	.+6      	; 0x15fa <getSetFreeCluster+0x116>
    15f4:	6f ef       	ldi	r22, 0xFF	; 255
    15f6:	7f ef       	ldi	r23, 0xFF	; 255
    15f8:	cb 01       	movw	r24, r22
	  FS->nextFreeCluster = FSEntry;
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
 }
 return 0xffffffff;
}
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	ff 90       	pop	r15
    1600:	ef 90       	pop	r14
    1602:	df 90       	pop	r13
    1604:	cf 90       	pop	r12
    1606:	08 95       	ret

00001608 <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
    1608:	cf 92       	push	r12
    160a:	df 92       	push	r13
    160c:	ef 92       	push	r14
    160e:	ff 92       	push	r15
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
    1614:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <unusedSectors>
    1618:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <unusedSectors+0x1>
    161c:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <unusedSectors+0x2>
    1620:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <unusedSectors+0x3>

SD_readSingleBlock(0);
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	cb 01       	movw	r24, r22
    162a:	0e 94 47 04 	call	0x88e	; 0x88e <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    162e:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <buffer>
    1632:	89 3e       	cpi	r24, 0xE9	; 233
    1634:	19 f1       	breq	.+70     	; 0x167c <getBootSectorData+0x74>
    1636:	8b 3e       	cpi	r24, 0xEB	; 235
    1638:	09 f1       	breq	.+66     	; 0x167c <getBootSectorData+0x74>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    163a:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <buffer+0x1fe>
    163e:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <buffer+0x1ff>
    1642:	85 35       	cpi	r24, 0x55	; 85
    1644:	9a 4a       	sbci	r25, 0xAA	; 170
    1646:	09 f0       	breq	.+2      	; 0x164a <getBootSectorData+0x42>
    1648:	96 c0       	rjmp	.+300    	; 0x1776 <getBootSectorData+0x16e>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    164a:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <buffer+0x1c6>
    164e:	70 91 6c 02 	lds	r23, 0x026C	; 0x80026c <buffer+0x1c7>
    1652:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <buffer+0x1c8>
    1656:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <buffer+0x1c9>
    165a:	60 93 a7 02 	sts	0x02A7, r22	; 0x8002a7 <unusedSectors>
    165e:	70 93 a8 02 	sts	0x02A8, r23	; 0x8002a8 <unusedSectors+0x1>
    1662:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <unusedSectors+0x2>
    1666:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <unusedSectors+0x3>
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
    166a:	0e 94 47 04 	call	0x88e	; 0x88e <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    166e:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <buffer>
    1672:	89 3e       	cpi	r24, 0xE9	; 233
    1674:	19 f0       	breq	.+6      	; 0x167c <getBootSectorData+0x74>
    1676:	8b 3e       	cpi	r24, 0xEB	; 235
    1678:	09 f0       	breq	.+2      	; 0x167c <getBootSectorData+0x74>
    167a:	7f c0       	rjmp	.+254    	; 0x177a <getBootSectorData+0x172>
}

bytesPerSector = bpb->bytesPerSector;
    167c:	e5 ea       	ldi	r30, 0xA5	; 165
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	83 85       	ldd	r24, Z+11	; 0x0b
    1682:	94 85       	ldd	r25, Z+12	; 0x0c
    1684:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <bytesPerSector+0x1>
    1688:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <bytesPerSector>
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
    168c:	85 85       	ldd	r24, Z+13	; 0x0d
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <sectorPerCluster+0x1>
    1694:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <sectorPerCluster>
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
    1698:	c6 85       	ldd	r28, Z+14	; 0x0e
    169a:	d7 85       	ldd	r29, Z+15	; 0x0f
    169c:	d0 93 b1 02 	sts	0x02B1, r29	; 0x8002b1 <reservedSectorCount+0x1>
    16a0:	c0 93 b0 02 	sts	0x02B0, r28	; 0x8002b0 <reservedSectorCount>
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
    16a4:	84 a5       	ldd	r24, Z+44	; 0x2c
    16a6:	95 a5       	ldd	r25, Z+45	; 0x2d
    16a8:	a6 a5       	ldd	r26, Z+46	; 0x2e
    16aa:	b7 a5       	ldd	r27, Z+47	; 0x2f
    16ac:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <rootCluster>
    16b0:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <rootCluster+0x1>
    16b4:	a0 93 9d 00 	sts	0x009D, r26	; 0x80009d <rootCluster+0x2>
    16b8:	b0 93 9e 00 	sts	0x009E, r27	; 0x80009e <rootCluster+0x3>
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    16bc:	c4 8c       	ldd	r12, Z+28	; 0x1c
    16be:	d5 8c       	ldd	r13, Z+29	; 0x1d
    16c0:	e6 8c       	ldd	r14, Z+30	; 0x1e
    16c2:	f7 8c       	ldd	r15, Z+31	; 0x1f
    16c4:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <reservedSectorCount>
    16c8:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <reservedSectorCount+0x1>
    16cc:	c8 0e       	add	r12, r24
    16ce:	d9 1e       	adc	r13, r25
    16d0:	e1 1c       	adc	r14, r1
    16d2:	f1 1c       	adc	r15, r1
    16d4:	a0 89       	ldd	r26, Z+16	; 0x10
    16d6:	24 a1       	ldd	r18, Z+36	; 0x24
    16d8:	35 a1       	ldd	r19, Z+37	; 0x25
    16da:	46 a1       	ldd	r20, Z+38	; 0x26
    16dc:	57 a1       	ldd	r21, Z+39	; 0x27
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	0e 94 83 18 	call	0x3106	; 0x3106 <__muluhisi3>
    16e4:	c6 0e       	add	r12, r22
    16e6:	d7 1e       	adc	r13, r23
    16e8:	e8 1e       	adc	r14, r24
    16ea:	f9 1e       	adc	r15, r25
    16ec:	c0 92 8d 00 	sts	0x008D, r12	; 0x80008d <firstDataSector>
    16f0:	d0 92 8e 00 	sts	0x008E, r13	; 0x80008e <firstDataSector+0x1>
    16f4:	e0 92 8f 00 	sts	0x008F, r14	; 0x80008f <firstDataSector+0x2>
    16f8:	f0 92 90 00 	sts	0x0090, r15	; 0x800090 <firstDataSector+0x3>

dataSectors = bpb->totalSectors_F32
    16fc:	c0 a0       	ldd	r12, Z+32	; 0x20
    16fe:	d1 a0       	ldd	r13, Z+33	; 0x21
    1700:	e2 a0       	ldd	r14, Z+34	; 0x22
    1702:	f3 a0       	ldd	r15, Z+35	; 0x23
              - bpb->reservedSectorCount
    1704:	cc 1a       	sub	r12, r28
    1706:	dd 0a       	sbc	r13, r29
    1708:	e1 08       	sbc	r14, r1
    170a:	f1 08       	sbc	r15, r1
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
    170c:	a7 01       	movw	r20, r14
    170e:	96 01       	movw	r18, r12
    1710:	26 1b       	sub	r18, r22
    1712:	37 0b       	sbc	r19, r23
    1714:	48 0b       	sbc	r20, r24
    1716:	59 0b       	sbc	r21, r25
    1718:	ca 01       	movw	r24, r20
    171a:	b9 01       	movw	r22, r18
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    171c:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <sectorPerCluster>
    1720:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <sectorPerCluster+0x1>
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <__udivmodsi4>
    172c:	20 93 97 00 	sts	0x0097, r18	; 0x800097 <totalClusters>
    1730:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <totalClusters+0x1>
    1734:	40 93 99 00 	sts	0x0099, r20	; 0x800099 <totalClusters+0x2>
    1738:	50 93 9a 00 	sts	0x009A, r21	; 0x80009a <totalClusters+0x3>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	a9 01       	movw	r20, r18
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <getSetFreeCluster>
    174a:	c0 90 97 00 	lds	r12, 0x0097	; 0x800097 <totalClusters>
    174e:	d0 90 98 00 	lds	r13, 0x0098	; 0x800098 <totalClusters+0x1>
    1752:	e0 90 99 00 	lds	r14, 0x0099	; 0x800099 <totalClusters+0x2>
    1756:	f0 90 9a 00 	lds	r15, 0x009A	; 0x80009a <totalClusters+0x3>
    175a:	c6 16       	cp	r12, r22
    175c:	d7 06       	cpc	r13, r23
    175e:	e8 06       	cpc	r14, r24
    1760:	f9 06       	cpc	r15, r25
    1762:	20 f4       	brcc	.+8      	; 0x176c <getBootSectorData+0x164>
     freeClusterCountUpdated = 0;
    1764:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <freeClusterCountUpdated>
else
	 freeClusterCountUpdated = 1;
return 0;
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	08 c0       	rjmp	.+16     	; 0x177c <getBootSectorData+0x174>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <freeClusterCountUpdated>
return 0;
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	03 c0       	rjmp	.+6      	; 0x177c <getBootSectorData+0x174>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	01 c0       	rjmp	.+2      	; 0x177c <getBootSectorData+0x174>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    177a:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	ff 90       	pop	r15
    1782:	ef 90       	pop	r14
    1784:	df 90       	pop	r13
    1786:	cf 90       	pop	r12
    1788:	08 95       	ret

0000178a <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	2b 97       	sbiw	r28, 0x0b	; 11
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	ac 01       	movw	r20, r24
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	07 c0       	rjmp	.+14     	; 0x17b2 <convertFileName+0x28>
if(fileName[j] == '.') break;
    17a4:	fa 01       	movw	r30, r20
    17a6:	e9 0f       	add	r30, r25
    17a8:	f1 1d       	adc	r31, r1
    17aa:	80 81       	ld	r24, Z
    17ac:	8e 32       	cpi	r24, 0x2E	; 46
    17ae:	19 f0       	breq	.+6      	; 0x17b6 <convertFileName+0x2c>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
    17b0:	9f 5f       	subi	r25, 0xFF	; 255
    17b2:	9c 30       	cpi	r25, 0x0C	; 12
    17b4:	b8 f3       	brcs	.-18     	; 0x17a4 <convertFileName+0x1a>
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
    17b6:	99 30       	cpi	r25, 0x09	; 9
    17b8:	a8 f0       	brcs	.+42     	; 0x17e4 <convertFileName+0x5a>
    17ba:	81 e3       	ldi	r24, 0x31	; 49
    17bc:	95 e0       	ldi	r25, 0x05	; 5
    17be:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	6d c0       	rjmp	.+218    	; 0x18a0 <convertFileName+0x116>

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	fa 01       	movw	r30, r20
    17cc:	e2 0f       	add	r30, r18
    17ce:	f3 1f       	adc	r31, r19
    17d0:	60 81       	ld	r22, Z
    17d2:	e1 e0       	ldi	r30, 0x01	; 1
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	ec 0f       	add	r30, r28
    17d8:	fd 1f       	adc	r31, r29
    17da:	e2 0f       	add	r30, r18
    17dc:	f3 1f       	adc	r31, r19
    17de:	60 83       	st	Z, r22
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
    17e0:	8f 5f       	subi	r24, 0xFF	; 255
    17e2:	01 c0       	rjmp	.+2      	; 0x17e6 <convertFileName+0x5c>
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	89 17       	cp	r24, r25
    17e8:	70 f3       	brcs	.-36     	; 0x17c6 <convertFileName+0x3c>
    17ea:	29 2f       	mov	r18, r25
    17ec:	09 c0       	rjmp	.+18     	; 0x1800 <convertFileName+0x76>
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
    17ee:	e1 e0       	ldi	r30, 0x01	; 1
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	ec 0f       	add	r30, r28
    17f4:	fd 1f       	adc	r31, r29
    17f6:	e2 0f       	add	r30, r18
    17f8:	f1 1d       	adc	r31, r1
    17fa:	80 e2       	ldi	r24, 0x20	; 32
    17fc:	80 83       	st	Z, r24
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
    17fe:	2f 5f       	subi	r18, 0xFF	; 255
    1800:	28 30       	cpi	r18, 0x08	; 8
    1802:	a8 f3       	brcs	.-22     	; 0x17ee <convertFileName+0x64>
  fileNameFAT[k] = ' ';

j++;
    1804:	31 e0       	ldi	r19, 0x01	; 1
    1806:	39 0f       	add	r19, r25
for(k=8; k<11; k++) //setting file extention
    1808:	98 e0       	ldi	r25, 0x08	; 8
    180a:	1b c0       	rjmp	.+54     	; 0x1842 <convertFileName+0xb8>
{
  if(fileName[j] != 0)
    180c:	fa 01       	movw	r30, r20
    180e:	e3 0f       	add	r30, r19
    1810:	f1 1d       	adc	r31, r1
    1812:	80 81       	ld	r24, Z
    1814:	88 23       	and	r24, r24
    1816:	91 f0       	breq	.+36     	; 0x183c <convertFileName+0xb2>
    fileNameFAT[k] = fileName[j++];
    1818:	3f 5f       	subi	r19, 0xFF	; 255
    181a:	e1 e0       	ldi	r30, 0x01	; 1
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	ec 0f       	add	r30, r28
    1820:	fd 1f       	adc	r31, r29
    1822:	e9 0f       	add	r30, r25
    1824:	f1 1d       	adc	r31, r1
    1826:	80 83       	st	Z, r24
    1828:	0b c0       	rjmp	.+22     	; 0x1840 <convertFileName+0xb6>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
    182a:	e1 e0       	ldi	r30, 0x01	; 1
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	ec 0f       	add	r30, r28
    1830:	fd 1f       	adc	r31, r29
    1832:	e9 0f       	add	r30, r25
    1834:	f1 1d       	adc	r31, r1
    1836:	20 e2       	ldi	r18, 0x20	; 32
    1838:	20 83       	st	Z, r18
    183a:	9f 5f       	subi	r25, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
    183c:	9b 30       	cpi	r25, 0x0B	; 11
    183e:	a8 f3       	brcs	.-22     	; 0x182a <convertFileName+0xa0>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
    1840:	9f 5f       	subi	r25, 0xFF	; 255
    1842:	9b 30       	cpi	r25, 0x0B	; 11
    1844:	18 f3       	brcs	.-58     	; 0x180c <convertFileName+0x82>
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	16 c0       	rjmp	.+44     	; 0x1876 <convertFileName+0xec>
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    184a:	29 2f       	mov	r18, r25
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	e1 e0       	ldi	r30, 0x01	; 1
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	ec 0f       	add	r30, r28
    1854:	fd 1f       	adc	r31, r29
    1856:	e2 0f       	add	r30, r18
    1858:	f3 1f       	adc	r31, r19
    185a:	80 81       	ld	r24, Z
    185c:	6f e9       	ldi	r22, 0x9F	; 159
    185e:	68 0f       	add	r22, r24
    1860:	6a 31       	cpi	r22, 0x1A	; 26
    1862:	40 f4       	brcc	.+16     	; 0x1874 <convertFileName+0xea>
    fileNameFAT[j] -= 0x20;
    1864:	e1 e0       	ldi	r30, 0x01	; 1
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	ec 0f       	add	r30, r28
    186a:	fd 1f       	adc	r31, r29
    186c:	e2 0f       	add	r30, r18
    186e:	f3 1f       	adc	r31, r19
    1870:	80 52       	subi	r24, 0x20	; 32
    1872:	80 83       	st	Z, r24
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
    1874:	9f 5f       	subi	r25, 0xFF	; 255
    1876:	9b 30       	cpi	r25, 0x0B	; 11
    1878:	40 f3       	brcs	.-48     	; 0x184a <convertFileName+0xc0>
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	0e c0       	rjmp	.+28     	; 0x189a <convertFileName+0x110>
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
    187e:	29 2f       	mov	r18, r25
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	fa 01       	movw	r30, r20
    1884:	e2 0f       	add	r30, r18
    1886:	f3 1f       	adc	r31, r19
    1888:	a1 e0       	ldi	r26, 0x01	; 1
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	ac 0f       	add	r26, r28
    188e:	bd 1f       	adc	r27, r29
    1890:	a2 0f       	add	r26, r18
    1892:	b3 1f       	adc	r27, r19
    1894:	8c 91       	ld	r24, X
    1896:	80 83       	st	Z, r24

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
    1898:	9f 5f       	subi	r25, 0xFF	; 255
    189a:	9b 30       	cpi	r25, 0x0B	; 11
    189c:	80 f3       	brcs	.-32     	; 0x187e <convertFileName+0xf4>
  fileName[j] = fileNameFAT[j];

return 0;
    189e:	80 e0       	ldi	r24, 0x00	; 0
}
    18a0:	2b 96       	adiw	r28, 0x0b	; 11
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	08 95       	ret

000018b2 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    18b2:	8f 92       	push	r8
    18b4:	9f 92       	push	r9
    18b6:	af 92       	push	r10
    18b8:	bf 92       	push	r11
    18ba:	cf 92       	push	r12
    18bc:	df 92       	push	r13
    18be:	ef 92       	push	r14
    18c0:	ff 92       	push	r15
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    18c2:	6b 01       	movw	r12, r22
    18c4:	7c 01       	movw	r14, r24
    18c6:	20 e8       	ldi	r18, 0x80	; 128
    18c8:	c2 22       	and	r12, r18
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    18ca:	50 c0       	rjmp	.+160    	; 0x196c <searchNextFreeCluster+0xba>
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    18cc:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <reservedSectorCount>
    18d0:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <reservedSectorCount+0x1>
    18d4:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <unusedSectors>
    18d8:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <unusedSectors+0x1>
    18dc:	a0 91 a9 02 	lds	r26, 0x02A9	; 0x8002a9 <unusedSectors+0x2>
    18e0:	b0 91 aa 02 	lds	r27, 0x02AA	; 0x8002aa <unusedSectors+0x3>
    18e4:	4c 01       	movw	r8, r24
    18e6:	5d 01       	movw	r10, r26
    18e8:	82 0e       	add	r8, r18
    18ea:	93 1e       	adc	r9, r19
    18ec:	a1 1c       	adc	r10, r1
    18ee:	b1 1c       	adc	r11, r1
    18f0:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <bytesPerSector>
    18f4:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <bytesPerSector+0x1>
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	c7 01       	movw	r24, r14
    18fe:	b6 01       	movw	r22, r12
    1900:	66 0f       	add	r22, r22
    1902:	77 1f       	adc	r23, r23
    1904:	88 1f       	adc	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	66 0f       	add	r22, r22
    190a:	77 1f       	adc	r23, r23
    190c:	88 1f       	adc	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <__udivmodsi4>
    1914:	c5 01       	movw	r24, r10
    1916:	b4 01       	movw	r22, r8
    1918:	62 0f       	add	r22, r18
    191a:	73 1f       	adc	r23, r19
    191c:	84 1f       	adc	r24, r20
    191e:	95 1f       	adc	r25, r21
      SD_readSingleBlock(sector);
    1920:	0e 94 47 04 	call	0x88e	; 0x88e <SD_readSingleBlock>
      for(i=0; i<128; i++)
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	1b c0       	rjmp	.+54     	; 0x195e <searchNextFreeCluster+0xac>
      {
       	 value = (unsigned long *) &buffer[i*4];
    1928:	e8 2f       	mov	r30, r24
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	ee 0f       	add	r30, r30
    192e:	ff 1f       	adc	r31, r31
    1930:	ee 0f       	add	r30, r30
    1932:	ff 1f       	adc	r31, r31
    1934:	eb 55       	subi	r30, 0x5B	; 91
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
         if(((*value) & 0x0fffffff) == 0)
    1938:	40 81       	ld	r20, Z
    193a:	51 81       	ldd	r21, Z+1	; 0x01
    193c:	62 81       	ldd	r22, Z+2	; 0x02
    193e:	73 81       	ldd	r23, Z+3	; 0x03
    1940:	7f 70       	andi	r23, 0x0F	; 15
    1942:	45 2b       	or	r20, r21
    1944:	46 2b       	or	r20, r22
    1946:	47 2b       	or	r20, r23
    1948:	49 f4       	brne	.+18     	; 0x195c <searchNextFreeCluster+0xaa>
            return(cluster+i);
    194a:	a7 01       	movw	r20, r14
    194c:	96 01       	movw	r18, r12
    194e:	28 0f       	add	r18, r24
    1950:	31 1d       	adc	r19, r1
    1952:	41 1d       	adc	r20, r1
    1954:	51 1d       	adc	r21, r1
    1956:	ca 01       	movw	r24, r20
    1958:	b9 01       	movw	r22, r18
    195a:	19 c0       	rjmp	.+50     	; 0x198e <searchNextFreeCluster+0xdc>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    195c:	8f 5f       	subi	r24, 0xFF	; 255
    195e:	88 23       	and	r24, r24
    1960:	1c f7       	brge	.-58     	; 0x1928 <searchNextFreeCluster+0x76>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    1962:	30 e8       	ldi	r19, 0x80	; 128
    1964:	c3 0e       	add	r12, r19
    1966:	d1 1c       	adc	r13, r1
    1968:	e1 1c       	adc	r14, r1
    196a:	f1 1c       	adc	r15, r1
    196c:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <totalClusters>
    1970:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <totalClusters+0x1>
    1974:	a0 91 99 00 	lds	r26, 0x0099	; 0x800099 <totalClusters+0x2>
    1978:	b0 91 9a 00 	lds	r27, 0x009A	; 0x80009a <totalClusters+0x3>
    197c:	c8 16       	cp	r12, r24
    197e:	d9 06       	cpc	r13, r25
    1980:	ea 06       	cpc	r14, r26
    1982:	fb 06       	cpc	r15, r27
    1984:	08 f4       	brcc	.+2      	; 0x1988 <searchNextFreeCluster+0xd6>
    1986:	a2 cf       	rjmp	.-188    	; 0x18cc <searchNextFreeCluster+0x1a>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
    1988:	60 e0       	ldi	r22, 0x00	; 0
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	cb 01       	movw	r24, r22
}
    198e:	ff 90       	pop	r15
    1990:	ef 90       	pop	r14
    1992:	df 90       	pop	r13
    1994:	cf 90       	pop	r12
    1996:	bf 90       	pop	r11
    1998:	af 90       	pop	r10
    199a:	9f 90       	pop	r9
    199c:	8f 90       	pop	r8
    199e:	08 95       	ret

000019a0 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
    19a0:	ef 92       	push	r14
    19a2:	ff 92       	push	r15
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	64 97       	sbiw	r28, 0x14	; 20
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	08 2f       	mov	r16, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	ba 01       	movw	r22, r20
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
    19c2:	24 e1       	ldi	r18, 0x14	; 20
    19c4:	eb e6       	ldi	r30, 0x6B	; 107
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	de 01       	movw	r26, r28
    19ca:	11 96       	adiw	r26, 0x01	; 1
    19cc:	01 90       	ld	r0, Z+
    19ce:	0d 92       	st	X+, r0
    19d0:	2a 95       	dec	r18
    19d2:	e1 f7       	brne	.-8      	; 0x19cc <displayMemory+0x2c>
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
    19d4:	1c e0       	ldi	r17, 0x0C	; 12
    19d6:	2d c0       	rjmp	.+90     	; 0x1a32 <displayMemory+0x92>
  {
    if(i==5 || i==9) 
    19d8:	15 30       	cpi	r17, 0x05	; 5
    19da:	11 f0       	breq	.+4      	; 0x19e0 <displayMemory+0x40>
    19dc:	19 30       	cpi	r17, 0x09	; 9
    19de:	61 f4       	brne	.+24     	; 0x19f8 <displayMemory+0x58>
	{
	   memoryString[i-1] = ',';  
    19e0:	e1 2f       	mov	r30, r17
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	31 97       	sbiw	r30, 0x01	; 1
    19e6:	21 e0       	ldi	r18, 0x01	; 1
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	2c 0f       	add	r18, r28
    19ec:	3d 1f       	adc	r19, r29
    19ee:	e2 0f       	add	r30, r18
    19f0:	f3 1f       	adc	r31, r19
    19f2:	2c e2       	ldi	r18, 0x2C	; 44
    19f4:	20 83       	st	Z, r18
	   i--;
    19f6:	11 50       	subi	r17, 0x01	; 1
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    19f8:	e1 2e       	mov	r14, r17
    19fa:	f1 2c       	mov	r15, r1
    19fc:	31 e0       	ldi	r19, 0x01	; 1
    19fe:	e3 1a       	sub	r14, r19
    1a00:	f1 08       	sbc	r15, r1
    1a02:	2a e0       	ldi	r18, 0x0A	; 10
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e0       	ldi	r20, 0x00	; 0
    1a08:	50 e0       	ldi	r21, 0x00	; 0
    1a0a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <__udivmodsi4>
    1a0e:	e1 e0       	ldi	r30, 0x01	; 1
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	ec 0f       	add	r30, r28
    1a14:	fd 1f       	adc	r31, r29
    1a16:	ee 0d       	add	r30, r14
    1a18:	ff 1d       	adc	r31, r15
    1a1a:	60 63       	ori	r22, 0x30	; 48
    1a1c:	60 83       	st	Z, r22
    memory /= 10;
    1a1e:	62 2f       	mov	r22, r18
    1a20:	73 2f       	mov	r23, r19
    1a22:	84 2f       	mov	r24, r20
    1a24:	95 2f       	mov	r25, r21
	if(memory == 0) break;
    1a26:	61 15       	cp	r22, r1
    1a28:	71 05       	cpc	r23, r1
    1a2a:	81 05       	cpc	r24, r1
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	19 f0       	breq	.+6      	; 0x1a36 <displayMemory+0x96>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
    1a30:	11 50       	subi	r17, 0x01	; 1
    1a32:	11 11       	cpse	r17, r1
    1a34:	d1 cf       	rjmp	.-94     	; 0x19d8 <displayMemory+0x38>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
    1a36:	01 30       	cpi	r16, 0x01	; 1
    1a38:	11 f4       	brne	.+4      	; 0x1a3e <displayMemory+0x9e>
    1a3a:	8b e4       	ldi	r24, 0x4B	; 75
    1a3c:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
    1a3e:	ce 01       	movw	r24, r28
    1a40:	01 96       	adiw	r24, 0x01	; 1
    1a42:	0e 94 8e 05 	call	0xb1c	; 0xb1c <transmitString>
}
    1a46:	64 96       	adiw	r28, 0x14	; 20
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	1f 91       	pop	r17
    1a58:	0f 91       	pop	r16
    1a5a:	ff 90       	pop	r15
    1a5c:	ef 90       	pop	r14
    1a5e:	08 95       	ret

00001a60 <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
    1a60:	4f 92       	push	r4
    1a62:	5f 92       	push	r5
    1a64:	6f 92       	push	r6
    1a66:	7f 92       	push	r7
    1a68:	8f 92       	push	r8
    1a6a:	9f 92       	push	r9
    1a6c:	af 92       	push	r10
    1a6e:	bf 92       	push	r11
    1a70:	cf 92       	push	r12
    1a72:	df 92       	push	r13
    1a74:	ef 92       	push	r14
    1a76:	ff 92       	push	r15
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <memoryStatistics+0x1e>
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <memoryStatistics+0x20>
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
    1a84:	a0 91 a5 02 	lds	r26, 0x02A5	; 0x8002a5 <sectorPerCluster>
    1a88:	b0 91 a6 02 	lds	r27, 0x02A6	; 0x8002a6 <sectorPerCluster+0x1>
    1a8c:	20 91 97 00 	lds	r18, 0x0097	; 0x800097 <totalClusters>
    1a90:	30 91 98 00 	lds	r19, 0x0098	; 0x800098 <totalClusters+0x1>
    1a94:	40 91 99 00 	lds	r20, 0x0099	; 0x800099 <totalClusters+0x2>
    1a98:	50 91 9a 00 	lds	r21, 0x009A	; 0x80009a <totalClusters+0x3>
    1a9c:	0e 94 83 18 	call	0x3106	; 0x3106 <__muluhisi3>
    1aa0:	9b 01       	movw	r18, r22
    1aa2:	ac 01       	movw	r20, r24
    1aa4:	01 2e       	mov	r0, r17
    1aa6:	1a e0       	ldi	r17, 0x0A	; 10
    1aa8:	56 95       	lsr	r21
    1aaa:	47 95       	ror	r20
    1aac:	37 95       	ror	r19
    1aae:	27 95       	ror	r18
    1ab0:	1a 95       	dec	r17
    1ab2:	d1 f7       	brne	.-12     	; 0x1aa8 <memoryStatistics+0x48>
    1ab4:	10 2d       	mov	r17, r0
totalMemory *= bytesPerSector;
    1ab6:	a0 91 95 00 	lds	r26, 0x0095	; 0x800095 <bytesPerSector>
    1aba:	b0 91 96 00 	lds	r27, 0x0096	; 0x800096 <bytesPerSector+0x1>
    1abe:	0e 94 83 18 	call	0x3106	; 0x3106 <__muluhisi3>
    1ac2:	6b 01       	movw	r12, r22
    1ac4:	7c 01       	movw	r14, r24

TX_NEWLINE;
    1ac6:	8d e0       	ldi	r24, 0x0D	; 13
    1ac8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    1acc:	8a e0       	ldi	r24, 0x0A	; 10
    1ace:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
TX_NEWLINE;
    1ad2:	8d e0       	ldi	r24, 0x0D	; 13
    1ad4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    1ad8:	8a e0       	ldi	r24, 0x0A	; 10
    1ada:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
transmitString_F(PSTR("Total Memory: "));
    1ade:	8e e5       	ldi	r24, 0x5E	; 94
    1ae0:	94 e0       	ldi	r25, 0x04	; 4
    1ae2:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>

displayMemory (HIGH, totalMemory);
    1ae6:	b7 01       	movw	r22, r14
    1ae8:	a6 01       	movw	r20, r12
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	a9 01       	movw	r20, r18
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <getSetFreeCluster>
    1afe:	4b 01       	movw	r8, r22
    1b00:	5c 01       	movw	r10, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
    1b02:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <totalClusters>
    1b06:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <totalClusters+0x1>
    1b0a:	a0 91 99 00 	lds	r26, 0x0099	; 0x800099 <totalClusters+0x2>
    1b0e:	b0 91 9a 00 	lds	r27, 0x009A	; 0x80009a <totalClusters+0x3>
    1b12:	88 15       	cp	r24, r8
    1b14:	99 05       	cpc	r25, r9
    1b16:	aa 05       	cpc	r26, r10
    1b18:	bb 05       	cpc	r27, r11
    1b1a:	08 f0       	brcs	.+2      	; 0x1b1e <memoryStatistics+0xbe>
    1b1c:	7d c0       	rjmp	.+250    	; 0x1c18 <memoryStatistics+0x1b8>
{
   freeClusterCountUpdated = 0;
    1b1e:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <freeClusterCountUpdated>
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
    1b22:	40 90 9b 00 	lds	r4, 0x009B	; 0x80009b <rootCluster>
    1b26:	50 90 9c 00 	lds	r5, 0x009C	; 0x80009c <rootCluster+0x1>
    1b2a:	60 90 9d 00 	lds	r6, 0x009D	; 0x80009d <rootCluster+0x2>
    1b2e:	70 90 9e 00 	lds	r7, 0x009E	; 0x80009e <rootCluster+0x3>

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
   totalClusterCount = 0;
    1b32:	c1 2c       	mov	r12, r1
    1b34:	d1 2c       	mov	r13, r1
    1b36:	76 01       	movw	r14, r12
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
    1b38:	81 2c       	mov	r8, r1
    1b3a:	91 2c       	mov	r9, r1
    1b3c:	54 01       	movw	r10, r8
   totalClusterCount = 0;
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
    1b3e:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <reservedSectorCount>
    1b42:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <reservedSectorCount+0x1>
    1b46:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <unusedSectors>
    1b4a:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <unusedSectors+0x1>
    1b4e:	a0 91 a9 02 	lds	r26, 0x02A9	; 0x8002a9 <unusedSectors+0x2>
    1b52:	b0 91 aa 02 	lds	r27, 0x02AA	; 0x8002aa <unusedSectors+0x3>
    1b56:	ac 01       	movw	r20, r24
    1b58:	bd 01       	movw	r22, r26
    1b5a:	42 0f       	add	r20, r18
    1b5c:	53 1f       	adc	r21, r19
    1b5e:	61 1d       	adc	r22, r1
    1b60:	71 1d       	adc	r23, r1
    1b62:	49 83       	std	Y+1, r20	; 0x01
    1b64:	5a 83       	std	Y+2, r21	; 0x02
    1b66:	6b 83       	std	Y+3, r22	; 0x03
    1b68:	7c 83       	std	Y+4, r23	; 0x04
    1b6a:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <bytesPerSector>
    1b6e:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <bytesPerSector+0x1>
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	50 e0       	ldi	r21, 0x00	; 0
    1b76:	c3 01       	movw	r24, r6
    1b78:	b2 01       	movw	r22, r4
    1b7a:	66 0f       	add	r22, r22
    1b7c:	77 1f       	adc	r23, r23
    1b7e:	88 1f       	adc	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	66 0f       	add	r22, r22
    1b84:	77 1f       	adc	r23, r23
    1b86:	88 1f       	adc	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <__udivmodsi4>
    1b8e:	69 81       	ldd	r22, Y+1	; 0x01
    1b90:	7a 81       	ldd	r23, Y+2	; 0x02
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	62 0f       	add	r22, r18
    1b98:	73 1f       	adc	r23, r19
    1b9a:	84 1f       	adc	r24, r20
    1b9c:	95 1f       	adc	r25, r21
      SD_readSingleBlock(sector);
    1b9e:	0e 94 47 04 	call	0x88e	; 0x88e <SD_readSingleBlock>
      for(i=0; i<128; i++)
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	2c c0       	rjmp	.+88     	; 0x1c00 <memoryStatistics+0x1a0>
      {
           value = (unsigned long *) &buffer[i*4];
    1ba8:	fc 01       	movw	r30, r24
    1baa:	ee 0f       	add	r30, r30
    1bac:	ff 1f       	adc	r31, r31
    1bae:	ee 0f       	add	r30, r30
    1bb0:	ff 1f       	adc	r31, r31
    1bb2:	eb 55       	subi	r30, 0x5B	; 91
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
         if(((*value)& 0x0fffffff) == 0)
    1bb6:	40 81       	ld	r20, Z
    1bb8:	51 81       	ldd	r21, Z+1	; 0x01
    1bba:	62 81       	ldd	r22, Z+2	; 0x02
    1bbc:	73 81       	ldd	r23, Z+3	; 0x03
    1bbe:	7f 70       	andi	r23, 0x0F	; 15
    1bc0:	45 2b       	or	r20, r21
    1bc2:	46 2b       	or	r20, r22
    1bc4:	47 2b       	or	r20, r23
    1bc6:	29 f4       	brne	.+10     	; 0x1bd2 <memoryStatistics+0x172>
            freeClusters++;;
    1bc8:	5f ef       	ldi	r21, 0xFF	; 255
    1bca:	85 1a       	sub	r8, r21
    1bcc:	95 0a       	sbc	r9, r21
    1bce:	a5 0a       	sbc	r10, r21
    1bd0:	b5 0a       	sbc	r11, r21
        
         totalClusterCount++;
    1bd2:	6f ef       	ldi	r22, 0xFF	; 255
    1bd4:	c6 1a       	sub	r12, r22
    1bd6:	d6 0a       	sbc	r13, r22
    1bd8:	e6 0a       	sbc	r14, r22
    1bda:	f6 0a       	sbc	r15, r22
         if(totalClusterCount == (totalClusters+2)) break;
    1bdc:	40 91 97 00 	lds	r20, 0x0097	; 0x800097 <totalClusters>
    1be0:	50 91 98 00 	lds	r21, 0x0098	; 0x800098 <totalClusters+0x1>
    1be4:	60 91 99 00 	lds	r22, 0x0099	; 0x800099 <totalClusters+0x2>
    1be8:	70 91 9a 00 	lds	r23, 0x009A	; 0x80009a <totalClusters+0x3>
    1bec:	4e 5f       	subi	r20, 0xFE	; 254
    1bee:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf0:	6f 4f       	sbci	r22, 0xFF	; 255
    1bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf4:	c4 16       	cp	r12, r20
    1bf6:	d5 06       	cpc	r13, r21
    1bf8:	e6 06       	cpc	r14, r22
    1bfa:	f7 06       	cpc	r15, r23
    1bfc:	21 f0       	breq	.+8      	; 0x1c06 <memoryStatistics+0x1a6>
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	80 38       	cpi	r24, 0x80	; 128
    1c02:	91 05       	cpc	r25, r1
    1c04:	88 f2       	brcs	.-94     	; 0x1ba8 <memoryStatistics+0x148>
            freeClusters++;;
        
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
    1c06:	80 38       	cpi	r24, 0x80	; 128
    1c08:	91 05       	cpc	r25, r1
    1c0a:	30 f0       	brcs	.+12     	; 0x1c18 <memoryStatistics+0x1b8>
      cluster+=128;
    1c0c:	70 e8       	ldi	r23, 0x80	; 128
    1c0e:	47 0e       	add	r4, r23
    1c10:	51 1c       	adc	r5, r1
    1c12:	61 1c       	adc	r6, r1
    1c14:	71 1c       	adc	r7, r1
    } 
    1c16:	93 cf       	rjmp	.-218    	; 0x1b3e <memoryStatistics+0xde>
}

if(!freeClusterCountUpdated)
    1c18:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <freeClusterCountUpdated>
    1c1c:	81 11       	cpse	r24, r1
    1c1e:	06 c0       	rjmp	.+12     	; 0x1c2c <memoryStatistics+0x1cc>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
    1c20:	a5 01       	movw	r20, r10
    1c22:	94 01       	movw	r18, r8
    1c24:	61 e0       	ldi	r22, 0x01	; 1
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <freeClusterCountUpdated>
freeMemory = freeClusters * sectorPerCluster / 1024;
    1c32:	a0 91 a5 02 	lds	r26, 0x02A5	; 0x8002a5 <sectorPerCluster>
    1c36:	b0 91 a6 02 	lds	r27, 0x02A6	; 0x8002a6 <sectorPerCluster+0x1>
    1c3a:	a5 01       	movw	r20, r10
    1c3c:	94 01       	movw	r18, r8
    1c3e:	0e 94 83 18 	call	0x3106	; 0x3106 <__muluhisi3>
    1c42:	9b 01       	movw	r18, r22
    1c44:	ac 01       	movw	r20, r24
    1c46:	01 2e       	mov	r0, r17
    1c48:	1a e0       	ldi	r17, 0x0A	; 10
    1c4a:	56 95       	lsr	r21
    1c4c:	47 95       	ror	r20
    1c4e:	37 95       	ror	r19
    1c50:	27 95       	ror	r18
    1c52:	1a 95       	dec	r17
    1c54:	d1 f7       	brne	.-12     	; 0x1c4a <memoryStatistics+0x1ea>
    1c56:	10 2d       	mov	r17, r0
freeMemory *= bytesPerSector ;
    1c58:	a0 91 95 00 	lds	r26, 0x0095	; 0x800095 <bytesPerSector>
    1c5c:	b0 91 96 00 	lds	r27, 0x0096	; 0x800096 <bytesPerSector+0x1>
    1c60:	0e 94 83 18 	call	0x3106	; 0x3106 <__muluhisi3>
    1c64:	6b 01       	movw	r12, r22
    1c66:	7c 01       	movw	r14, r24
TX_NEWLINE;
    1c68:	8d e0       	ldi	r24, 0x0D	; 13
    1c6a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    1c6e:	8a e0       	ldi	r24, 0x0A	; 10
    1c70:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
transmitString_F(PSTR(" Free Memory: "));
    1c74:	8f e4       	ldi	r24, 0x4F	; 79
    1c76:	94 e0       	ldi	r25, 0x04	; 4
    1c78:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
displayMemory (HIGH, freeMemory);
    1c7c:	b7 01       	movw	r22, r14
    1c7e:	a6 01       	movw	r20, r12
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <displayMemory>
TX_NEWLINE; 
    1c86:	8d e0       	ldi	r24, 0x0D	; 13
    1c88:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    1c8c:	8a e0       	ldi	r24, 0x0A	; 10
    1c8e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
}
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	df 90       	pop	r13
    1ca4:	cf 90       	pop	r12
    1ca6:	bf 90       	pop	r11
    1ca8:	af 90       	pop	r10
    1caa:	9f 90       	pop	r9
    1cac:	8f 90       	pop	r8
    1cae:	7f 90       	pop	r7
    1cb0:	6f 90       	pop	r6
    1cb2:	5f 90       	pop	r5
    1cb4:	4f 90       	pop	r4
    1cb6:	08 95       	ret

00001cb8 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    1cb8:	cf 92       	push	r12
    1cba:	df 92       	push	r13
    1cbc:	ef 92       	push	r14
    1cbe:	ff 92       	push	r15
    1cc0:	cf 93       	push	r28
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    1cc2:	6a 01       	movw	r12, r20
    1cc4:	7b 01       	movw	r14, r22
    1cc6:	91 e0       	ldi	r25, 0x01	; 1
    1cc8:	d9 22       	and	r13, r25
    1cca:	ee 24       	eor	r14, r14
    1ccc:	ff 24       	eor	r15, r15
    1cce:	cd 28       	or	r12, r13
    1cd0:	ce 28       	or	r12, r14
    1cd2:	cf 28       	or	r12, r15
    1cd4:	51 f4       	brne	.+20     	; 0x1cea <freeMemoryUpdate+0x32>
    1cd6:	03 2e       	mov	r0, r19
    1cd8:	39 e0       	ldi	r19, 0x09	; 9
    1cda:	76 95       	lsr	r23
    1cdc:	67 95       	ror	r22
    1cde:	57 95       	ror	r21
    1ce0:	47 95       	ror	r20
    1ce2:	3a 95       	dec	r19
    1ce4:	d1 f7       	brne	.-12     	; 0x1cda <freeMemoryUpdate+0x22>
    1ce6:	30 2d       	mov	r19, r0
    1ce8:	0d c0       	rjmp	.+26     	; 0x1d04 <freeMemoryUpdate+0x4c>
  else size = (size / 512) +1;
    1cea:	03 2e       	mov	r0, r19
    1cec:	39 e0       	ldi	r19, 0x09	; 9
    1cee:	76 95       	lsr	r23
    1cf0:	67 95       	ror	r22
    1cf2:	57 95       	ror	r21
    1cf4:	47 95       	ror	r20
    1cf6:	3a 95       	dec	r19
    1cf8:	d1 f7       	brne	.-12     	; 0x1cee <freeMemoryUpdate+0x36>
    1cfa:	30 2d       	mov	r19, r0
    1cfc:	4f 5f       	subi	r20, 0xFF	; 255
    1cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    1d00:	6f 4f       	sbci	r22, 0xFF	; 255
    1d02:	7f 4f       	sbci	r23, 0xFF	; 255
  if((size % 8) == 0) size = size / 8;
    1d04:	6a 01       	movw	r12, r20
    1d06:	7b 01       	movw	r14, r22
    1d08:	97 e0       	ldi	r25, 0x07	; 7
    1d0a:	c9 22       	and	r12, r25
    1d0c:	dd 24       	eor	r13, r13
    1d0e:	ee 24       	eor	r14, r14
    1d10:	ff 24       	eor	r15, r15
    1d12:	cd 28       	or	r12, r13
    1d14:	ce 28       	or	r12, r14
    1d16:	cf 28       	or	r12, r15
    1d18:	59 f4       	brne	.+22     	; 0x1d30 <freeMemoryUpdate+0x78>
    1d1a:	6a 01       	movw	r12, r20
    1d1c:	7b 01       	movw	r14, r22
    1d1e:	68 94       	set
    1d20:	12 f8       	bld	r1, 2
    1d22:	f6 94       	lsr	r15
    1d24:	e7 94       	ror	r14
    1d26:	d7 94       	ror	r13
    1d28:	c7 94       	ror	r12
    1d2a:	16 94       	lsr	r1
    1d2c:	d1 f7       	brne	.-12     	; 0x1d22 <freeMemoryUpdate+0x6a>
    1d2e:	0f c0       	rjmp	.+30     	; 0x1d4e <freeMemoryUpdate+0x96>
  else size = (size / 8) +1;
    1d30:	68 94       	set
    1d32:	12 f8       	bld	r1, 2
    1d34:	76 95       	lsr	r23
    1d36:	67 95       	ror	r22
    1d38:	57 95       	ror	r21
    1d3a:	47 95       	ror	r20
    1d3c:	16 94       	lsr	r1
    1d3e:	d1 f7       	brne	.-12     	; 0x1d34 <freeMemoryUpdate+0x7c>
    1d40:	6a 01       	movw	r12, r20
    1d42:	7b 01       	movw	r14, r22
    1d44:	9f ef       	ldi	r25, 0xFF	; 255
    1d46:	c9 1a       	sub	r12, r25
    1d48:	d9 0a       	sbc	r13, r25
    1d4a:	e9 0a       	sbc	r14, r25
    1d4c:	f9 0a       	sbc	r15, r25

  if(freeClusterCountUpdated)
    1d4e:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <freeClusterCountUpdated>
    1d52:	99 23       	and	r25, r25
    1d54:	d9 f0       	breq	.+54     	; 0x1d8c <freeMemoryUpdate+0xd4>
    1d56:	c8 2f       	mov	r28, r24
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	a9 01       	movw	r20, r18
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <getSetFreeCluster>
	if(flag == ADD)
    1d66:	c1 11       	cpse	r28, r1
    1d68:	07 c0       	rjmp	.+14     	; 0x1d78 <freeMemoryUpdate+0xc0>
  	   freeClusters = freeClusters + size;
    1d6a:	a7 01       	movw	r20, r14
    1d6c:	96 01       	movw	r18, r12
    1d6e:	26 0f       	add	r18, r22
    1d70:	37 1f       	adc	r19, r23
    1d72:	48 1f       	adc	r20, r24
    1d74:	59 1f       	adc	r21, r25
    1d76:	06 c0       	rjmp	.+12     	; 0x1d84 <freeMemoryUpdate+0xcc>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    1d78:	9b 01       	movw	r18, r22
    1d7a:	ac 01       	movw	r20, r24
    1d7c:	2c 19       	sub	r18, r12
    1d7e:	3d 09       	sbc	r19, r13
    1d80:	4e 09       	sbc	r20, r14
    1d82:	5f 09       	sbc	r21, r15
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    1d84:	61 e0       	ldi	r22, 0x01	; 1
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <getSetFreeCluster>
  }
}
    1d8c:	cf 91       	pop	r28
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	df 90       	pop	r13
    1d94:	cf 90       	pop	r12
    1d96:	08 95       	ret

00001d98 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    1d98:	4f 92       	push	r4
    1d9a:	5f 92       	push	r5
    1d9c:	6f 92       	push	r6
    1d9e:	7f 92       	push	r7
    1da0:	8f 92       	push	r8
    1da2:	9f 92       	push	r9
    1da4:	af 92       	push	r10
    1da6:	bf 92       	push	r11
    1da8:	cf 92       	push	r12
    1daa:	df 92       	push	r13
    1dac:	ef 92       	push	r14
    1dae:	ff 92       	push	r15
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	2a 97       	sbiw	r28, 0x0a	; 10
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	c8 2e       	mov	r12, r24
    1dca:	7b 01       	movw	r14, r22
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
    1dcc:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <rootCluster>
    1dd0:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <rootCluster+0x1>
    1dd4:	a0 91 9d 00 	lds	r26, 0x009D	; 0x80009d <rootCluster+0x2>
    1dd8:	b0 91 9e 00 	lds	r27, 0x009E	; 0x80009e <rootCluster+0x3>
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
    1dde:	9e 83       	std	Y+6, r25	; 0x06
    1de0:	af 83       	std	Y+7, r26	; 0x07
    1de2:	b8 87       	std	Y+8, r27	; 0x08

while(1)
{
   firstSector = getFirstSector (cluster);
    1de4:	6d 81       	ldd	r22, Y+5	; 0x05
    1de6:	7e 81       	ldd	r23, Y+6	; 0x06
    1de8:	8f 81       	ldd	r24, Y+7	; 0x07
    1dea:	98 85       	ldd	r25, Y+8	; 0x08
    1dec:	0e 94 da 09 	call	0x13b4	; 0x13b4 <getFirstSector>
    1df0:	2b 01       	movw	r4, r22
    1df2:	3c 01       	movw	r6, r24

   for(sector = 0; sector < sectorPerCluster; sector++)
    1df4:	81 2c       	mov	r8, r1
    1df6:	91 2c       	mov	r9, r1
    1df8:	54 01       	movw	r10, r8
    1dfa:	54 c1       	rjmp	.+680    	; 0x20a4 <findFiles+0x30c>
   {
     SD_readSingleBlock (firstSector + sector);
    1dfc:	d5 01       	movw	r26, r10
    1dfe:	c4 01       	movw	r24, r8
    1e00:	84 0d       	add	r24, r4
    1e02:	95 1d       	adc	r25, r5
    1e04:	a6 1d       	adc	r26, r6
    1e06:	b7 1d       	adc	r27, r7
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	9a 83       	std	Y+2, r25	; 0x02
    1e0c:	ab 83       	std	Y+3, r26	; 0x03
    1e0e:	bc 83       	std	Y+4, r27	; 0x04
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	0e 94 47 04 	call	0x88e	; 0x88e <SD_readSingleBlock>
	

     for(i=0; i<bytesPerSector; i+=32)
    1e18:	00 e0       	ldi	r16, 0x00	; 0
    1e1a:	10 e0       	ldi	r17, 0x00	; 0
    1e1c:	36 c1       	rjmp	.+620    	; 0x208a <findFiles+0x2f2>
     {
	    dir = (struct dir_Structure *) &buffer[i];
    1e1e:	d8 01       	movw	r26, r16
    1e20:	ab 55       	subi	r26, 0x5B	; 91
    1e22:	bf 4f       	sbci	r27, 0xFF	; 255
    1e24:	ba 87       	std	Y+10, r27	; 0x0a
    1e26:	a9 87       	std	Y+9, r26	; 0x09

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    1e28:	8c 91       	ld	r24, X
    1e2a:	81 11       	cpse	r24, r1
    1e2c:	0c c0       	rjmp	.+24     	; 0x1e46 <findFiles+0xae>
		{
		  if((flag == GET_FILE) || (flag == DELETE))
    1e2e:	8f ef       	ldi	r24, 0xFF	; 255
    1e30:	8c 0d       	add	r24, r12
    1e32:	82 30       	cpi	r24, 0x02	; 2
    1e34:	08 f0       	brcs	.+2      	; 0x1e38 <findFiles+0xa0>
    1e36:	63 c1       	rjmp	.+710    	; 0x20fe <findFiles+0x366>
		      transmitString_F(PSTR("File does not exist!"));
    1e38:	85 ea       	ldi	r24, 0xA5	; 165
    1e3a:	95 e0       	ldi	r25, 0x05	; 5
    1e3c:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
		  return 0;   
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	61 c1       	rjmp	.+706    	; 0x2108 <findFiles+0x370>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    1e46:	85 3e       	cpi	r24, 0xE5	; 229
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <findFiles+0xb4>
    1e4a:	1d c1       	rjmp	.+570    	; 0x2086 <findFiles+0x2ee>
    1e4c:	e9 85       	ldd	r30, Y+9	; 0x09
    1e4e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1e50:	83 85       	ldd	r24, Z+11	; 0x0b
    1e52:	8f 30       	cpi	r24, 0x0F	; 15
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <findFiles+0xc0>
    1e56:	17 c1       	rjmp	.+558    	; 0x2086 <findFiles+0x2ee>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1e58:	8f ef       	ldi	r24, 0xFF	; 255
    1e5a:	8c 0d       	add	r24, r12
    1e5c:	82 30       	cpi	r24, 0x02	; 2
    1e5e:	08 f0       	brcs	.+2      	; 0x1e62 <findFiles+0xca>
    1e60:	d2 c0       	rjmp	.+420    	; 0x2006 <findFiles+0x26e>
    1e62:	0f c0       	rjmp	.+30     	; 0x1e82 <findFiles+0xea>
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    1e64:	82 2f       	mov	r24, r18
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	e9 85       	ldd	r30, Y+9	; 0x09
    1e6a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1e6c:	e8 0f       	add	r30, r24
    1e6e:	f9 1f       	adc	r31, r25
    1e70:	30 81       	ld	r19, Z
    1e72:	f7 01       	movw	r30, r14
    1e74:	e8 0f       	add	r30, r24
    1e76:	f9 1f       	adc	r31, r25
    1e78:	80 81       	ld	r24, Z
    1e7a:	38 13       	cpse	r19, r24
    1e7c:	05 c0       	rjmp	.+10     	; 0x1e88 <findFiles+0xf0>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    1e7e:	2f 5f       	subi	r18, 0xFF	; 255
    1e80:	01 c0       	rjmp	.+2      	; 0x1e84 <findFiles+0xec>
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	2b 30       	cpi	r18, 0x0B	; 11
    1e86:	70 f3       	brcs	.-36     	; 0x1e64 <findFiles+0xcc>
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
    1e88:	2b 30       	cpi	r18, 0x0B	; 11
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <findFiles+0xf6>
    1e8c:	fc c0       	rjmp	.+504    	; 0x2086 <findFiles+0x2ee>
			{
			  if(flag == GET_FILE)
    1e8e:	f1 e0       	ldi	r31, 0x01	; 1
    1e90:	cf 12       	cpse	r12, r31
    1e92:	42 c0       	rjmp	.+132    	; 0x1f18 <findFiles+0x180>
              {
			    appendFileSector = firstSector + sector;
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	9a 81       	ldd	r25, Y+2	; 0x02
    1e98:	ab 81       	ldd	r26, Y+3	; 0x03
    1e9a:	bc 81       	ldd	r27, Y+4	; 0x04
    1e9c:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <appendFileSector>
    1ea0:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <appendFileSector+0x1>
    1ea4:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <appendFileSector+0x2>
    1ea8:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <appendFileSector+0x3>
				appendFileLocation = i;
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	00 93 87 00 	sts	0x0087, r16	; 0x800087 <appendFileLocation>
    1eb4:	10 93 88 00 	sts	0x0088, r17	; 0x800088 <appendFileLocation+0x1>
    1eb8:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <appendFileLocation+0x2>
    1ebc:	30 93 8a 00 	sts	0x008A, r19	; 0x80008a <appendFileLocation+0x3>
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1ec0:	a9 85       	ldd	r26, Y+9	; 0x09
    1ec2:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ec4:	54 96       	adiw	r26, 0x14	; 20
    1ec6:	8d 91       	ld	r24, X+
    1ec8:	9c 91       	ld	r25, X
    1eca:	55 97       	sbiw	r26, 0x15	; 21
    1ecc:	a0 e0       	ldi	r26, 0x00	; 0
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	55 27       	eor	r21, r21
    1ed4:	44 27       	eor	r20, r20
    1ed6:	e9 85       	ldd	r30, Y+9	; 0x09
    1ed8:	fa 85       	ldd	r31, Y+10	; 0x0a
    1eda:	82 8d       	ldd	r24, Z+26	; 0x1a
    1edc:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ede:	a0 e0       	ldi	r26, 0x00	; 0
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	84 2b       	or	r24, r20
    1ee4:	95 2b       	or	r25, r21
    1ee6:	a6 2b       	or	r26, r22
    1ee8:	b7 2b       	or	r27, r23
    1eea:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <appendStartCluster>
    1eee:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <appendStartCluster+0x1>
    1ef2:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <appendStartCluster+0x2>
    1ef6:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <appendStartCluster+0x3>
				fileSize = dir->fileSize;
    1efa:	84 8d       	ldd	r24, Z+28	; 0x1c
    1efc:	95 8d       	ldd	r25, Z+29	; 0x1d
    1efe:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1f00:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1f02:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <fileSize>
    1f06:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <fileSize+0x1>
    1f0a:	a0 93 93 00 	sts	0x0093, r26	; 0x800093 <fileSize+0x2>
    1f0e:	b0 93 94 00 	sts	0x0094, r27	; 0x800094 <fileSize+0x3>
			    return (dir);
    1f12:	89 85       	ldd	r24, Y+9	; 0x09
    1f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f16:	f8 c0       	rjmp	.+496    	; 0x2108 <findFiles+0x370>
			  }	
			  else    //when flag = DELETE
			  {
			     TX_NEWLINE;
    1f18:	8d e0       	ldi	r24, 0x0D	; 13
    1f1a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    1f1e:	8a e0       	ldi	r24, 0x0A	; 10
    1f20:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
				 transmitString_F(PSTR("Deleting.."));
    1f24:	8a e9       	ldi	r24, 0x9A	; 154
    1f26:	95 e0       	ldi	r25, 0x05	; 5
    1f28:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
				 TX_NEWLINE;
    1f2c:	8d e0       	ldi	r24, 0x0D	; 13
    1f2e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    1f32:	8a e0       	ldi	r24, 0x0A	; 10
    1f34:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
				 TX_NEWLINE;
    1f38:	8d e0       	ldi	r24, 0x0D	; 13
    1f3a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    1f3e:	8a e0       	ldi	r24, 0x0A	; 10
    1f40:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1f44:	a9 85       	ldd	r26, Y+9	; 0x09
    1f46:	ba 85       	ldd	r27, Y+10	; 0x0a
    1f48:	54 96       	adiw	r26, 0x14	; 20
    1f4a:	cd 90       	ld	r12, X+
    1f4c:	dc 90       	ld	r13, X
    1f4e:	55 97       	sbiw	r26, 0x15	; 21
    1f50:	e1 2c       	mov	r14, r1
    1f52:	f1 2c       	mov	r15, r1
    1f54:	d6 01       	movw	r26, r12
    1f56:	99 27       	eor	r25, r25
    1f58:	88 27       	eor	r24, r24
    1f5a:	e9 85       	ldd	r30, Y+9	; 0x09
    1f5c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f5e:	c2 8c       	ldd	r12, Z+26	; 0x1a
    1f60:	d3 8c       	ldd	r13, Z+27	; 0x1b
    1f62:	e1 2c       	mov	r14, r1
    1f64:	f1 2c       	mov	r15, r1
    1f66:	c8 2a       	or	r12, r24
    1f68:	d9 2a       	or	r13, r25
    1f6a:	ea 2a       	or	r14, r26
    1f6c:	fb 2a       	or	r15, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    1f6e:	85 ee       	ldi	r24, 0xE5	; 229
    1f70:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
    1f72:	69 81       	ldd	r22, Y+1	; 0x01
    1f74:	7a 81       	ldd	r23, Y+2	; 0x02
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    1f7e:	a9 85       	ldd	r26, Y+9	; 0x09
    1f80:	ba 85       	ldd	r27, Y+10	; 0x0a
    1f82:	5c 96       	adiw	r26, 0x1c	; 28
    1f84:	4d 91       	ld	r20, X+
    1f86:	5d 91       	ld	r21, X+
    1f88:	6d 91       	ld	r22, X+
    1f8a:	7c 91       	ld	r23, X
    1f8c:	5f 97       	sbiw	r26, 0x1f	; 31
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	a9 01       	movw	r20, r18
    1f9a:	60 e0       	ldi	r22, 0x00	; 0
    1f9c:	82 e0       	ldi	r24, 0x02	; 2
    1f9e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <getSetFreeCluster>
				 if(firstCluster < cluster)
    1fa2:	c6 16       	cp	r12, r22
    1fa4:	d7 06       	cpc	r13, r23
    1fa6:	e8 06       	cpc	r14, r24
    1fa8:	f9 06       	cpc	r15, r25
    1faa:	30 f4       	brcc	.+12     	; 0x1fb8 <findFiles+0x220>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    1fac:	a7 01       	movw	r20, r14
    1fae:	96 01       	movw	r18, r12
    1fb0:	61 e0       	ldi	r22, 0x01	; 1
    1fb2:	82 e0       	ldi	r24, 0x02	; 2
    1fb4:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    1fb8:	00 e0       	ldi	r16, 0x00	; 0
    1fba:	10 e0       	ldi	r17, 0x00	; 0
    1fbc:	98 01       	movw	r18, r16
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	c7 01       	movw	r24, r14
    1fc2:	b6 01       	movw	r22, r12
    1fc4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <getSetNextCluster>
    1fc8:	a6 2e       	mov	r10, r22
    1fca:	b7 2e       	mov	r11, r23
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
    1fce:	99 83       	std	Y+1, r25	; 0x01
					getSetNextCluster (firstCluster, SET, 0);
    1fd0:	00 e0       	ldi	r16, 0x00	; 0
    1fd2:	10 e0       	ldi	r17, 0x00	; 0
    1fd4:	98 01       	movw	r18, r16
    1fd6:	41 e0       	ldi	r20, 0x01	; 1
    1fd8:	c7 01       	movw	r24, r14
    1fda:	b6 01       	movw	r22, r12
    1fdc:	0e 94 f7 09 	call	0x13ee	; 0x13ee <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
					   {transmitString_F(PSTR("File deleted!"));return 0;}
					firstCluster = nextCluster;
    1fe0:	ca 2c       	mov	r12, r10
    1fe2:	db 2c       	mov	r13, r11
    1fe4:	ed 80       	ldd	r14, Y+5	; 0x05
    1fe6:	f9 80       	ldd	r15, Y+1	; 0x01
				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
    1fe8:	b7 ef       	ldi	r27, 0xF7	; 247
    1fea:	cb 16       	cp	r12, r27
    1fec:	bf ef       	ldi	r27, 0xFF	; 255
    1fee:	db 06       	cpc	r13, r27
    1ff0:	eb 06       	cpc	r14, r27
    1ff2:	bf e0       	ldi	r27, 0x0F	; 15
    1ff4:	fb 06       	cpc	r15, r27
    1ff6:	00 f3       	brcs	.-64     	; 0x1fb8 <findFiles+0x220>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
    1ff8:	8c e8       	ldi	r24, 0x8C	; 140
    1ffa:	95 e0       	ldi	r25, 0x05	; 5
    1ffc:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	81 c0       	rjmp	.+258    	; 0x2108 <findFiles+0x370>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    2006:	8d e0       	ldi	r24, 0x0D	; 13
    2008:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    200c:	8a e0       	ldi	r24, 0x0A	; 10
    200e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			 for(j=0; j<11; j++)
    2012:	d1 2c       	mov	r13, r1
    2014:	0e c0       	rjmp	.+28     	; 0x2032 <findFiles+0x29a>
		     {
			   if(j == 8) transmitByte(' ');
    2016:	e8 e0       	ldi	r30, 0x08	; 8
    2018:	de 12       	cpse	r13, r30
    201a:	03 c0       	rjmp	.+6      	; 0x2022 <findFiles+0x28a>
    201c:	80 e2       	ldi	r24, 0x20	; 32
    201e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			   transmitByte (dir->name[j]);
    2022:	e9 85       	ldd	r30, Y+9	; 0x09
    2024:	fa 85       	ldd	r31, Y+10	; 0x0a
    2026:	ed 0d       	add	r30, r13
    2028:	f1 1d       	adc	r31, r1
    202a:	80 81       	ld	r24, Z
    202c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
			 for(j=0; j<11; j++)
    2030:	d3 94       	inc	r13
    2032:	fa e0       	ldi	r31, 0x0A	; 10
    2034:	fd 15       	cp	r31, r13
    2036:	78 f7       	brcc	.-34     	; 0x2016 <findFiles+0x27e>
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
    2038:	88 e8       	ldi	r24, 0x88	; 136
    203a:	95 e0       	ldi	r25, 0x05	; 5
    203c:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    2040:	a9 85       	ldd	r26, Y+9	; 0x09
    2042:	ba 85       	ldd	r27, Y+10	; 0x0a
    2044:	1b 96       	adiw	r26, 0x0b	; 11
    2046:	8c 91       	ld	r24, X
    2048:	80 31       	cpi	r24, 0x10	; 16
    204a:	a1 f0       	breq	.+40     	; 0x2074 <findFiles+0x2dc>
    204c:	88 30       	cpi	r24, 0x08	; 8
    204e:	91 f0       	breq	.+36     	; 0x2074 <findFiles+0x2dc>
			 {
			     transmitString_F (PSTR("FILE" ));
    2050:	83 e8       	ldi	r24, 0x83	; 131
    2052:	95 e0       	ldi	r25, 0x05	; 5
    2054:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
		         transmitString_F (PSTR("   "));
    2058:	8f e7       	ldi	r24, 0x7F	; 127
    205a:	95 e0       	ldi	r25, 0x05	; 5
    205c:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
			     displayMemory (LOW, dir->fileSize);
    2060:	e9 85       	ldd	r30, Y+9	; 0x09
    2062:	fa 85       	ldd	r31, Y+10	; 0x0a
    2064:	44 8d       	ldd	r20, Z+28	; 0x1c
    2066:	55 8d       	ldd	r21, Z+29	; 0x1d
    2068:	66 8d       	ldd	r22, Z+30	; 0x1e
    206a:	77 8d       	ldd	r23, Z+31	; 0x1f
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <displayMemory>
    2072:	09 c0       	rjmp	.+18     	; 0x2086 <findFiles+0x2ee>
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    2074:	80 31       	cpi	r24, 0x10	; 16
    2076:	19 f4       	brne	.+6      	; 0x207e <findFiles+0x2e6>
    2078:	8b e7       	ldi	r24, 0x7B	; 123
    207a:	95 e0       	ldi	r25, 0x05	; 5
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <findFiles+0x2ea>
    207e:	86 e7       	ldi	r24, 0x76	; 118
    2080:	95 e0       	ldi	r25, 0x05	; 5
    2082:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    2086:	00 5e       	subi	r16, 0xE0	; 224
    2088:	1f 4f       	sbci	r17, 0xFF	; 255
    208a:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <bytesPerSector>
    208e:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <bytesPerSector+0x1>
    2092:	08 17       	cp	r16, r24
    2094:	19 07       	cpc	r17, r25
    2096:	08 f4       	brcc	.+2      	; 0x209a <findFiles+0x302>
    2098:	c2 ce       	rjmp	.-636    	; 0x1e1e <findFiles+0x86>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    209a:	ff ef       	ldi	r31, 0xFF	; 255
    209c:	8f 1a       	sub	r8, r31
    209e:	9f 0a       	sbc	r9, r31
    20a0:	af 0a       	sbc	r10, r31
    20a2:	bf 0a       	sbc	r11, r31
    20a4:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <sectorPerCluster>
    20a8:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <sectorPerCluster+0x1>
    20ac:	a0 e0       	ldi	r26, 0x00	; 0
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	88 16       	cp	r8, r24
    20b2:	99 06       	cpc	r9, r25
    20b4:	aa 06       	cpc	r10, r26
    20b6:	bb 06       	cpc	r11, r27
    20b8:	08 f4       	brcc	.+2      	; 0x20bc <findFiles+0x324>
    20ba:	a0 ce       	rjmp	.-704    	; 0x1dfc <findFiles+0x64>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    20bc:	00 e0       	ldi	r16, 0x00	; 0
    20be:	10 e0       	ldi	r17, 0x00	; 0
    20c0:	98 01       	movw	r18, r16
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	6d 81       	ldd	r22, Y+5	; 0x05
    20c6:	7e 81       	ldd	r23, Y+6	; 0x06
    20c8:	8f 81       	ldd	r24, Y+7	; 0x07
    20ca:	98 85       	ldd	r25, Y+8	; 0x08
    20cc:	0e 94 f7 09 	call	0x13ee	; 0x13ee <getSetNextCluster>
    20d0:	6d 83       	std	Y+5, r22	; 0x05
    20d2:	7e 83       	std	Y+6, r23	; 0x06
    20d4:	8f 83       	std	Y+7, r24	; 0x07
    20d6:	98 87       	std	Y+8, r25	; 0x08

   if(cluster > 0x0ffffff6)
    20d8:	67 3f       	cpi	r22, 0xF7	; 247
    20da:	2f ef       	ldi	r18, 0xFF	; 255
    20dc:	72 07       	cpc	r23, r18
    20de:	82 07       	cpc	r24, r18
    20e0:	2f e0       	ldi	r18, 0x0F	; 15
    20e2:	92 07       	cpc	r25, r18
    20e4:	78 f4       	brcc	.+30     	; 0x2104 <findFiles+0x36c>
   	 return 0;
   if(cluster == 0) 
    20e6:	67 2b       	or	r22, r23
    20e8:	68 2b       	or	r22, r24
    20ea:	69 2b       	or	r22, r25
    20ec:	09 f0       	breq	.+2      	; 0x20f0 <findFiles+0x358>
    20ee:	7a ce       	rjmp	.-780    	; 0x1de4 <findFiles+0x4c>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    20f0:	8d e5       	ldi	r24, 0x5D	; 93
    20f2:	95 e0       	ldi	r25, 0x05	; 5
    20f4:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	05 c0       	rjmp	.+10     	; 0x2108 <findFiles+0x370>

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
		{
		  if((flag == GET_FILE) || (flag == DELETE))
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <findFiles+0x370>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
   	 return 0;
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
   if(cluster == 0) 
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
 }
return 0;
}
    2108:	2a 96       	adiw	r28, 0x0a	; 10
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	bf 90       	pop	r11
    2126:	af 90       	pop	r10
    2128:	9f 90       	pop	r9
    212a:	8f 90       	pop	r8
    212c:	7f 90       	pop	r7
    212e:	6f 90       	pop	r6
    2130:	5f 90       	pop	r5
    2132:	4f 90       	pop	r4
    2134:	08 95       	ret

00002136 <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    2136:	4f 92       	push	r4
    2138:	5f 92       	push	r5
    213a:	6f 92       	push	r6
    213c:	7f 92       	push	r7
    213e:	8f 92       	push	r8
    2140:	9f 92       	push	r9
    2142:	af 92       	push	r10
    2144:	bf 92       	push	r11
    2146:	cf 92       	push	r12
    2148:	df 92       	push	r13
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	00 d0       	rcall	.+0      	; 0x2158 <readFile+0x22>
    2158:	00 d0       	rcall	.+0      	; 0x215a <readFile+0x24>
    215a:	00 d0       	rcall	.+0      	; 0x215c <readFile+0x26>
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	18 2f       	mov	r17, r24
    2162:	7a 83       	std	Y+2, r23	; 0x02
    2164:	69 83       	std	Y+1, r22	; 0x01
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    2166:	cb 01       	movw	r24, r22
    2168:	0e 94 c5 0b 	call	0x178a	; 0x178a <convertFileName>
if(error) return 2;
    216c:	81 11       	cpse	r24, r1
    216e:	84 c0       	rjmp	.+264    	; 0x2278 <readFile+0x142>

dir = findFiles (GET_FILE, fileName); //get the file location
    2170:	69 81       	ldd	r22, Y+1	; 0x01
    2172:	7a 81       	ldd	r23, Y+2	; 0x02
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <findFiles>
if(dir == 0) 
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	09 f4       	brne	.+2      	; 0x2180 <readFile+0x4a>
    217e:	7e c0       	rjmp	.+252    	; 0x227c <readFile+0x146>
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    2180:	11 30       	cpi	r17, 0x01	; 1
    2182:	09 f4       	brne	.+2      	; 0x2186 <readFile+0x50>
    2184:	7d c0       	rjmp	.+250    	; 0x2280 <readFile+0x14a>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    2186:	fc 01       	movw	r30, r24
    2188:	44 89       	ldd	r20, Z+20	; 0x14
    218a:	55 89       	ldd	r21, Z+21	; 0x15
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	70 e0       	ldi	r23, 0x00	; 0
    2190:	ba 01       	movw	r22, r20
    2192:	55 27       	eor	r21, r21
    2194:	44 27       	eor	r20, r20
    2196:	c2 8c       	ldd	r12, Z+26	; 0x1a
    2198:	d3 8c       	ldd	r13, Z+27	; 0x1b
    219a:	e1 2c       	mov	r14, r1
    219c:	f1 2c       	mov	r15, r1
    219e:	2a 01       	movw	r4, r20
    21a0:	3b 01       	movw	r6, r22
    21a2:	4c 28       	or	r4, r12
    21a4:	5d 28       	or	r5, r13
    21a6:	6e 28       	or	r6, r14
    21a8:	7f 28       	or	r7, r15

fileSize = dir->fileSize;
    21aa:	84 8c       	ldd	r8, Z+28	; 0x1c
    21ac:	95 8c       	ldd	r9, Z+29	; 0x1d
    21ae:	a6 8c       	ldd	r10, Z+30	; 0x1e
    21b0:	b7 8c       	ldd	r11, Z+31	; 0x1f

TX_NEWLINE;
    21b2:	8d e0       	ldi	r24, 0x0D	; 13
    21b4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    21b8:	8a e0       	ldi	r24, 0x0A	; 10
    21ba:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
TX_NEWLINE;
    21be:	8d e0       	ldi	r24, 0x0D	; 13
    21c0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    21c4:	8a e0       	ldi	r24, 0x0A	; 10
    21c6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
    21ca:	c1 2c       	mov	r12, r1
    21cc:	d1 2c       	mov	r13, r1
    21ce:	76 01       	movw	r14, r12
TX_NEWLINE;
TX_NEWLINE;

while(1)
{
  firstSector = getFirstSector (cluster);
    21d0:	c3 01       	movw	r24, r6
    21d2:	b2 01       	movw	r22, r4
    21d4:	0e 94 da 09 	call	0x13b4	; 0x13b4 <getFirstSector>
    21d8:	69 83       	std	Y+1, r22	; 0x01
    21da:	7a 83       	std	Y+2, r23	; 0x02
    21dc:	8b 83       	std	Y+3, r24	; 0x03
    21de:	9c 83       	std	Y+4, r25	; 0x04

  for(j=0; j<sectorPerCluster; j++)
    21e0:	10 e0       	ldi	r17, 0x00	; 0
    21e2:	2c c0       	rjmp	.+88     	; 0x223c <readFile+0x106>
  {
    SD_readSingleBlock(firstSector + j);
    21e4:	69 81       	ldd	r22, Y+1	; 0x01
    21e6:	7a 81       	ldd	r23, Y+2	; 0x02
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	9c 81       	ldd	r25, Y+4	; 0x04
    21ec:	61 0f       	add	r22, r17
    21ee:	71 1d       	adc	r23, r1
    21f0:	81 1d       	adc	r24, r1
    21f2:	91 1d       	adc	r25, r1
    21f4:	0e 94 47 04 	call	0x88e	; 0x88e <SD_readSingleBlock>
    
	for(k=0; k<512; k++)
    21f8:	1e 82       	std	Y+6, r1	; 0x06
    21fa:	1d 82       	std	Y+5, r1	; 0x05
    21fc:	19 c0       	rjmp	.+50     	; 0x2230 <readFile+0xfa>
    {
      transmitByte(buffer[k]);
    21fe:	ed 81       	ldd	r30, Y+5	; 0x05
    2200:	fe 81       	ldd	r31, Y+6	; 0x06
    2202:	eb 55       	subi	r30, 0x5B	; 91
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 81       	ld	r24, Z
    2208:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
      if ((byteCounter++) >= fileSize ) return 0;
    220c:	d7 01       	movw	r26, r14
    220e:	c6 01       	movw	r24, r12
    2210:	01 96       	adiw	r24, 0x01	; 1
    2212:	a1 1d       	adc	r26, r1
    2214:	b1 1d       	adc	r27, r1
    2216:	c8 14       	cp	r12, r8
    2218:	d9 04       	cpc	r13, r9
    221a:	ea 04       	cpc	r14, r10
    221c:	fb 04       	cpc	r15, r11
    221e:	90 f5       	brcc	.+100    	; 0x2284 <readFile+0x14e>

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    2220:	2d 81       	ldd	r18, Y+5	; 0x05
    2222:	3e 81       	ldd	r19, Y+6	; 0x06
    2224:	2f 5f       	subi	r18, 0xFF	; 255
    2226:	3f 4f       	sbci	r19, 0xFF	; 255
    2228:	3e 83       	std	Y+6, r19	; 0x06
    222a:	2d 83       	std	Y+5, r18	; 0x05
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    222c:	6c 01       	movw	r12, r24
    222e:	7d 01       	movw	r14, r26

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    2230:	8d 81       	ldd	r24, Y+5	; 0x05
    2232:	9e 81       	ldd	r25, Y+6	; 0x06
    2234:	81 15       	cp	r24, r1
    2236:	92 40       	sbci	r25, 0x02	; 2
    2238:	10 f3       	brcs	.-60     	; 0x21fe <readFile+0xc8>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    223a:	1f 5f       	subi	r17, 0xFF	; 255
    223c:	81 2f       	mov	r24, r17
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <sectorPerCluster>
    2244:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <sectorPerCluster+0x1>
    2248:	82 17       	cp	r24, r18
    224a:	93 07       	cpc	r25, r19
    224c:	58 f2       	brcs	.-106    	; 0x21e4 <readFile+0xae>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    224e:	00 e0       	ldi	r16, 0x00	; 0
    2250:	10 e0       	ldi	r17, 0x00	; 0
    2252:	98 01       	movw	r18, r16
    2254:	40 e0       	ldi	r20, 0x00	; 0
    2256:	c3 01       	movw	r24, r6
    2258:	b2 01       	movw	r22, r4
    225a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <getSetNextCluster>
    225e:	2b 01       	movw	r4, r22
    2260:	3c 01       	movw	r6, r24
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    2262:	67 2b       	or	r22, r23
    2264:	68 2b       	or	r22, r24
    2266:	69 2b       	or	r22, r25
    2268:	09 f0       	breq	.+2      	; 0x226c <readFile+0x136>
    226a:	b2 cf       	rjmp	.-156    	; 0x21d0 <readFile+0x9a>
    226c:	84 e4       	ldi	r24, 0x44	; 68
    226e:	95 e0       	ldi	r25, 0x05	; 5
    2270:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	07 c0       	rjmp	.+14     	; 0x2286 <readFile+0x150>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    2278:	82 e0       	ldi	r24, 0x02	; 2
    227a:	05 c0       	rjmp	.+10     	; 0x2286 <readFile+0x150>

dir = findFiles (GET_FILE, fileName); //get the file location
if(dir == 0) 
  return (0);
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	03 c0       	rjmp	.+6      	; 0x2286 <readFile+0x150>

if(flag == VERIFY) return (1);	//specified file name is already existing
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	01 c0       	rjmp	.+2      	; 0x2286 <readFile+0x150>
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    2284:	80 e0       	ldi	r24, 0x00	; 0
  }
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
}
return 0;
}
    2286:	26 96       	adiw	r28, 0x06	; 6
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	1f 91       	pop	r17
    2298:	0f 91       	pop	r16
    229a:	ff 90       	pop	r15
    229c:	ef 90       	pop	r14
    229e:	df 90       	pop	r13
    22a0:	cf 90       	pop	r12
    22a2:	bf 90       	pop	r11
    22a4:	af 90       	pop	r10
    22a6:	9f 90       	pop	r9
    22a8:	8f 90       	pop	r8
    22aa:	7f 90       	pop	r7
    22ac:	6f 90       	pop	r6
    22ae:	5f 90       	pop	r5
    22b0:	4f 90       	pop	r4
    22b2:	08 95       	ret

000022b4 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    22ba:	0e 94 c5 0b 	call	0x178a	; 0x178a <convertFileName>
  if(error) return;
    22be:	81 11       	cpse	r24, r1
    22c0:	04 c0       	rjmp	.+8      	; 0x22ca <deleteFile+0x16>

  findFiles (DELETE, fileName);
    22c2:	be 01       	movw	r22, r28
    22c4:	82 e0       	ldi	r24, 0x02	; 2
    22c6:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <findFiles>
}
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	08 95       	ret

000022d0 <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    22d0:	2f 92       	push	r2
    22d2:	3f 92       	push	r3
    22d4:	4f 92       	push	r4
    22d6:	5f 92       	push	r5
    22d8:	6f 92       	push	r6
    22da:	7f 92       	push	r7
    22dc:	8f 92       	push	r8
    22de:	9f 92       	push	r9
    22e0:	af 92       	push	r10
    22e2:	bf 92       	push	r11
    22e4:	cf 92       	push	r12
    22e6:	df 92       	push	r13
    22e8:	ef 92       	push	r14
    22ea:	ff 92       	push	r15
    22ec:	0f 93       	push	r16
    22ee:	1f 93       	push	r17
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	29 97       	sbiw	r28, 0x09	; 9
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	99 87       	std	Y+9, r25	; 0x09
    2306:	88 87       	std	Y+8, r24	; 0x08
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    2308:	bc 01       	movw	r22, r24
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	0e 94 9b 10 	call	0x2136	; 0x2136 <readFile>

if(j == 1) 
    2310:	81 30       	cpi	r24, 0x01	; 1
    2312:	09 f0       	breq	.+2      	; 0x2316 <writeFile+0x46>
    2314:	58 c0       	rjmp	.+176    	; 0x23c6 <writeFile+0xf6>
{
  transmitString_F(PSTR(" File already exists, appending data..")); 
    2316:	8a e0       	ldi	r24, 0x0A	; 10
    2318:	95 e0       	ldi	r25, 0x05	; 5
    231a:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
  appendFile = 1;
  cluster = appendStartCluster;
    231e:	40 90 bc 02 	lds	r4, 0x02BC	; 0x8002bc <appendStartCluster>
    2322:	50 90 bd 02 	lds	r5, 0x02BD	; 0x8002bd <appendStartCluster+0x1>
    2326:	60 90 be 02 	lds	r6, 0x02BE	; 0x8002be <appendStartCluster+0x2>
    232a:	70 90 bf 02 	lds	r7, 0x02BF	; 0x8002bf <appendStartCluster+0x3>
  clusterCount=0;
    232e:	c1 2c       	mov	r12, r1
    2330:	d1 2c       	mov	r13, r1
    2332:	76 01       	movw	r14, r12
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    2334:	00 e0       	ldi	r16, 0x00	; 0
    2336:	10 e0       	ldi	r17, 0x00	; 0
    2338:	98 01       	movw	r18, r16
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	c3 01       	movw	r24, r6
    233e:	b2 01       	movw	r22, r4
    2340:	0e 94 f7 09 	call	0x13ee	; 0x13ee <getSetNextCluster>
    if(nextCluster == EOF) break;
    2344:	6f 3f       	cpi	r22, 0xFF	; 255
    2346:	2f ef       	ldi	r18, 0xFF	; 255
    2348:	72 07       	cpc	r23, r18
    234a:	82 07       	cpc	r24, r18
    234c:	2f e0       	ldi	r18, 0x0F	; 15
    234e:	92 07       	cpc	r25, r18
    2350:	41 f0       	breq	.+16     	; 0x2362 <writeFile+0x92>
	cluster = nextCluster;
	clusterCount++;
    2352:	af ef       	ldi	r26, 0xFF	; 255
    2354:	ca 1a       	sub	r12, r26
    2356:	da 0a       	sbc	r13, r26
    2358:	ea 0a       	sbc	r14, r26
    235a:	fa 0a       	sbc	r15, r26
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    235c:	2b 01       	movw	r4, r22
    235e:	3c 01       	movw	r6, r24
	clusterCount++;
  }
    2360:	e9 cf       	rjmp	.-46     	; 0x2334 <writeFile+0x64>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    2362:	a0 91 a5 02 	lds	r26, 0x02A5	; 0x8002a5 <sectorPerCluster>
    2366:	b0 91 a6 02 	lds	r27, 0x02A6	; 0x8002a6 <sectorPerCluster+0x1>
    236a:	a7 01       	movw	r20, r14
    236c:	96 01       	movw	r18, r12
    236e:	0e 94 83 18 	call	0x3106	; 0x3106 <__muluhisi3>
    2372:	9b 01       	movw	r18, r22
    2374:	ac 01       	movw	r20, r24
    2376:	a0 91 95 00 	lds	r26, 0x0095	; 0x800095 <bytesPerSector>
    237a:	b0 91 96 00 	lds	r27, 0x0096	; 0x800096 <bytesPerSector+0x1>
    237e:	0e 94 83 18 	call	0x3106	; 0x3106 <__muluhisi3>
    2382:	00 91 91 00 	lds	r16, 0x0091	; 0x800091 <fileSize>
    2386:	10 91 92 00 	lds	r17, 0x0092	; 0x800092 <fileSize+0x1>
    238a:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <fileSize+0x2>
    238e:	30 91 94 00 	lds	r19, 0x0094	; 0x800094 <fileSize+0x3>
    2392:	68 01       	movw	r12, r16
    2394:	79 01       	movw	r14, r18
    2396:	c6 1a       	sub	r12, r22
    2398:	d7 0a       	sbc	r13, r23
    239a:	e8 0a       	sbc	r14, r24
    239c:	f9 0a       	sbc	r15, r25
    239e:	c7 01       	movw	r24, r14
    23a0:	b6 01       	movw	r22, r12
    23a2:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <bytesPerSector>
    23a6:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <bytesPerSector+0x1>
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	50 e0       	ldi	r21, 0x00	; 0
    23ae:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <__udivmodsi4>
    23b2:	29 83       	std	Y+1, r18	; 0x01
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
    23b4:	1e 82       	std	Y+6, r1	; 0x06
    23b6:	1d 82       	std	Y+5, r1	; 0x05
    23b8:	21 2c       	mov	r2, r1
    23ba:	31 2c       	mov	r3, r1
j = readFile (VERIFY, fileName);

if(j == 1) 
{
  transmitString_F(PSTR(" File already exists, appending data..")); 
  appendFile = 1;
    23bc:	21 e0       	ldi	r18, 0x01	; 1
    23be:	2f 83       	std	Y+7, r18	; 0x07
	cluster = nextCluster;
	clusterCount++;
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
    23c0:	cc 24       	eor	r12, r12
    23c2:	c3 94       	inc	r12
    23c4:	52 c0       	rjmp	.+164    	; 0x246a <writeFile+0x19a>
//  appendFile();
//  return;
}
else if(j == 2) 
    23c6:	82 30       	cpi	r24, 0x02	; 2
    23c8:	09 f4       	brne	.+2      	; 0x23cc <writeFile+0xfc>
    23ca:	18 c3       	rjmp	.+1584   	; 0x29fc <writeFile+0x72c>
{
   return; //invalid file name
}
else
{
  TX_NEWLINE;
    23cc:	8d e0       	ldi	r24, 0x0D	; 13
    23ce:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    23d2:	8a e0       	ldi	r24, 0x0A	; 10
    23d4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
  transmitString_F(PSTR(" Creating File.."));
    23d8:	89 ef       	ldi	r24, 0xF9	; 249
    23da:	94 e0       	ldi	r25, 0x04	; 4
    23dc:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	a9 01       	movw	r20, r18
    23e6:	60 e0       	ldi	r22, 0x00	; 0
    23e8:	82 e0       	ldi	r24, 0x02	; 2
    23ea:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <getSetFreeCluster>
  if(cluster > totalClusters)
    23ee:	00 91 97 00 	lds	r16, 0x0097	; 0x800097 <totalClusters>
    23f2:	10 91 98 00 	lds	r17, 0x0098	; 0x800098 <totalClusters+0x1>
    23f6:	20 91 99 00 	lds	r18, 0x0099	; 0x800099 <totalClusters+0x2>
    23fa:	30 91 9a 00 	lds	r19, 0x009A	; 0x80009a <totalClusters+0x3>
    23fe:	06 17       	cp	r16, r22
    2400:	17 07       	cpc	r17, r23
    2402:	28 07       	cpc	r18, r24
    2404:	39 07       	cpc	r19, r25
    2406:	40 f4       	brcc	.+16     	; 0x2418 <writeFile+0x148>
     cluster = rootCluster;
    2408:	60 91 9b 00 	lds	r22, 0x009B	; 0x80009b <rootCluster>
    240c:	70 91 9c 00 	lds	r23, 0x009C	; 0x80009c <rootCluster+0x1>
    2410:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <rootCluster+0x2>
    2414:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <rootCluster+0x3>

  cluster = searchNextFreeCluster(cluster);
    2418:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <searchNextFreeCluster>
    241c:	2b 01       	movw	r4, r22
    241e:	3c 01       	movw	r6, r24
   if(cluster == 0)
    2420:	61 15       	cp	r22, r1
    2422:	71 05       	cpc	r23, r1
    2424:	81 05       	cpc	r24, r1
    2426:	91 05       	cpc	r25, r1
    2428:	59 f4       	brne	.+22     	; 0x2440 <writeFile+0x170>
   {
      TX_NEWLINE;
    242a:	8d e0       	ldi	r24, 0x0D	; 13
    242c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2430:	8a e0       	ldi	r24, 0x0A	; 10
    2432:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    2436:	87 ee       	ldi	r24, 0xE7	; 231
    2438:	94 e0       	ldi	r25, 0x04	; 4
    243a:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
	  return;
    243e:	de c2       	rjmp	.+1468   	; 0x29fc <writeFile+0x72c>
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    2440:	0f ef       	ldi	r16, 0xFF	; 255
    2442:	1f ef       	ldi	r17, 0xFF	; 255
    2444:	2f ef       	ldi	r18, 0xFF	; 255
    2446:	3f e0       	ldi	r19, 0x0F	; 15
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    244e:	13 01       	movw	r2, r6
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    2450:	5e 82       	std	Y+6, r5	; 0x06
    2452:	4d 82       	std	Y+5, r4	; 0x05
  fileSize = 0;
    2454:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <fileSize>
    2458:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <fileSize+0x1>
    245c:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <fileSize+0x2>
    2460:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <fileSize+0x3>
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
    2464:	19 82       	std	Y+1, r1	; 0x01
    2466:	1f 82       	std	Y+7, r1	; 0x07
    2468:	c1 2c       	mov	r12, r1
    246a:	d1 2c       	mov	r13, r1



while(1)
{
   if(start)
    246c:	cc 20       	and	r12, r12
    246e:	89 f1       	breq	.+98     	; 0x24d2 <writeFile+0x202>
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    2470:	c3 01       	movw	r24, r6
    2472:	b2 01       	movw	r22, r4
    2474:	0e 94 da 09 	call	0x13b4	; 0x13b4 <getFirstSector>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	c9 80       	ldd	r12, Y+1	; 0x01
    247e:	8c 0d       	add	r24, r12
    2480:	91 1d       	adc	r25, r1
    2482:	a1 1d       	adc	r26, r1
    2484:	b1 1d       	adc	r27, r1
    2486:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <startBlock>
    248a:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <startBlock+0x1>
    248e:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <startBlock+0x2>
    2492:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <startBlock+0x3>
	  SD_readSingleBlock (startBlock);
    2496:	60 91 a1 00 	lds	r22, 0x00A1	; 0x8000a1 <startBlock>
    249a:	70 91 a2 00 	lds	r23, 0x00A2	; 0x8000a2 <startBlock+0x1>
    249e:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <startBlock+0x2>
    24a2:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <startBlock+0x3>
    24a6:	0e 94 47 04 	call	0x88e	; 0x88e <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    24aa:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <bytesPerSector>
    24ae:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <bytesPerSector+0x1>
    24b2:	40 e0       	ldi	r20, 0x00	; 0
    24b4:	50 e0       	ldi	r21, 0x00	; 0
    24b6:	60 91 91 00 	lds	r22, 0x0091	; 0x800091 <fileSize>
    24ba:	70 91 92 00 	lds	r23, 0x0092	; 0x800092 <fileSize+0x1>
    24be:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <fileSize+0x2>
    24c2:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <fileSize+0x3>
    24c6:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <__udivmodsi4>
    24ca:	7b 01       	movw	r14, r22
	  j = sector;
    24cc:	09 81       	ldd	r16, Y+1	; 0x01

while(1)
{
   if(start)
   {
      start = 0;
    24ce:	c1 2c       	mov	r12, r1
    24d0:	0f c0       	rjmp	.+30     	; 0x24f0 <writeFile+0x220>
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    24d2:	c3 01       	movw	r24, r6
    24d4:	b2 01       	movw	r22, r4
    24d6:	0e 94 da 09 	call	0x13b4	; 0x13b4 <getFirstSector>
    24da:	60 93 a1 00 	sts	0x00A1, r22	; 0x8000a1 <startBlock>
    24de:	70 93 a2 00 	sts	0x00A2, r23	; 0x8000a2 <startBlock+0x1>
    24e2:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <startBlock+0x2>
    24e6:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <startBlock+0x3>
	  i=0;
    24ea:	e1 2c       	mov	r14, r1
    24ec:	f1 2c       	mov	r15, r1
	  j=0;
    24ee:	00 e0       	ldi	r16, 0x00	; 0
   }
   

   TX_NEWLINE;
    24f0:	8d e0       	ldi	r24, 0x0D	; 13
    24f2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    24f6:	8a e0       	ldi	r24, 0x0A	; 10
    24f8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
   transmitString_F(PSTR(" Enter text (end with ~):"));
    24fc:	8d ec       	ldi	r24, 0xCD	; 205
    24fe:	94 e0       	ldi	r25, 0x04	; 4
    2500:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
   
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
    2504:	21 e0       	ldi	r18, 0x01	; 1
    2506:	d2 12       	cpse	r13, r18
    2508:	1e c0       	rjmp	.+60     	; 0x2546 <writeFile+0x276>
	 {
	 	transmitByte ('\n');
    250a:	8a e0       	ldi	r24, 0x0A	; 10
    250c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    2510:	f7 01       	movw	r30, r14
    2512:	eb 55       	subi	r30, 0x5B	; 91
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	8a e0       	ldi	r24, 0x0A	; 10
    2518:	80 83       	st	Z, r24
		fileSize++;
    251a:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <fileSize>
    251e:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <fileSize+0x1>
    2522:	a0 91 93 00 	lds	r26, 0x0093	; 0x800093 <fileSize+0x2>
    2526:	b0 91 94 00 	lds	r27, 0x0094	; 0x800094 <fileSize+0x3>
    252a:	01 96       	adiw	r24, 0x01	; 1
    252c:	a1 1d       	adc	r26, r1
    252e:	b1 1d       	adc	r27, r1
    2530:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <fileSize>
    2534:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <fileSize+0x1>
    2538:	a0 93 93 00 	sts	0x0093, r26	; 0x800093 <fileSize+0x2>
    253c:	b0 93 94 00 	sts	0x0094, r27	; 0x800094 <fileSize+0x3>
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
	 {
	 	transmitByte ('\n');
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    2540:	c7 01       	movw	r24, r14
    2542:	01 96       	adiw	r24, 0x01	; 1
    2544:	7c 01       	movw	r14, r24
		fileSize++;
	 }

	sectorEndFlag = 0;

	 data = receiveByte();
    2546:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    254a:	18 2f       	mov	r17, r24
	 if(data == 0x08)	//'Back Space' key pressed
    254c:	88 30       	cpi	r24, 0x08	; 8
    254e:	19 f5       	brne	.+70     	; 0x2596 <writeFile+0x2c6>
	 { 
	   if(i != 0)
    2550:	e1 14       	cp	r14, r1
    2552:	f1 04       	cpc	r15, r1
    2554:	f1 f0       	breq	.+60     	; 0x2592 <writeFile+0x2c2>
	   { 
	     transmitByte(data);
    2556:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		 transmitByte(' '); 
    255a:	80 e2       	ldi	r24, 0x20	; 32
    255c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	     transmitByte(data); 
    2560:	81 2f       	mov	r24, r17
    2562:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	     i--; 
    2566:	91 e0       	ldi	r25, 0x01	; 1
    2568:	e9 1a       	sub	r14, r25
    256a:	f1 08       	sbc	r15, r1
		 fileSize--;
    256c:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <fileSize>
    2570:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <fileSize+0x1>
    2574:	a0 91 93 00 	lds	r26, 0x0093	; 0x800093 <fileSize+0x2>
    2578:	b0 91 94 00 	lds	r27, 0x0094	; 0x800094 <fileSize+0x3>
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	a1 09       	sbc	r26, r1
    2580:	b1 09       	sbc	r27, r1
    2582:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <fileSize>
    2586:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <fileSize+0x1>
    258a:	a0 93 93 00 	sts	0x0093, r26	; 0x800093 <fileSize+0x2>
    258e:	b0 93 94 00 	sts	0x0094, r27	; 0x800094 <fileSize+0x3>
	 	transmitByte ('\n');
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
		fileSize++;
	 }

	sectorEndFlag = 0;
    2592:	d1 2c       	mov	r13, r1
		 transmitByte(' '); 
	     transmitByte(data); 
	     i--; 
		 fileSize--;
	   } 
	   continue;     
    2594:	76 c0       	rjmp	.+236    	; 0x2682 <writeFile+0x3b2>
	 }
	 transmitByte(data);
    2596:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
     buffer[i++] = data;
    259a:	57 01       	movw	r10, r14
    259c:	af ef       	ldi	r26, 0xFF	; 255
    259e:	aa 1a       	sub	r10, r26
    25a0:	ba 0a       	sbc	r11, r26
    25a2:	f7 01       	movw	r30, r14
    25a4:	eb 55       	subi	r30, 0x5B	; 91
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	10 83       	st	Z, r17
	 fileSize++;
    25aa:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <fileSize>
    25ae:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <fileSize+0x1>
    25b2:	a0 91 93 00 	lds	r26, 0x0093	; 0x800093 <fileSize+0x2>
    25b6:	b0 91 94 00 	lds	r27, 0x0094	; 0x800094 <fileSize+0x3>
    25ba:	01 96       	adiw	r24, 0x01	; 1
    25bc:	a1 1d       	adc	r26, r1
    25be:	b1 1d       	adc	r27, r1
    25c0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <fileSize>
    25c4:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <fileSize+0x1>
    25c8:	a0 93 93 00 	sts	0x0093, r26	; 0x800093 <fileSize+0x2>
    25cc:	b0 93 94 00 	sts	0x0094, r27	; 0x800094 <fileSize+0x3>
     if(data == '\r')  //'Carriege Return (CR)' character
    25d0:	1d 30       	cpi	r17, 0x0D	; 13
    25d2:	21 f5       	brne	.+72     	; 0x261c <writeFile+0x34c>
     {
        if(i == 512)
    25d4:	a1 14       	cp	r10, r1
    25d6:	b2 e0       	ldi	r27, 0x02	; 2
    25d8:	bb 06       	cpc	r11, r27
    25da:	11 f1       	breq	.+68     	; 0x2620 <writeFile+0x350>
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
    25dc:	8a e0       	ldi	r24, 0x0A	; 10
    25de:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    25e2:	f5 01       	movw	r30, r10
    25e4:	eb 55       	subi	r30, 0x5B	; 91
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	8a e0       	ldi	r24, 0x0A	; 10
    25ea:	80 83       	st	Z, r24
		   fileSize++;
    25ec:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <fileSize>
    25f0:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <fileSize+0x1>
    25f4:	a0 91 93 00 	lds	r26, 0x0093	; 0x800093 <fileSize+0x2>
    25f8:	b0 91 94 00 	lds	r27, 0x0094	; 0x800094 <fileSize+0x3>
    25fc:	01 96       	adiw	r24, 0x01	; 1
    25fe:	a1 1d       	adc	r26, r1
    2600:	b1 1d       	adc	r27, r1
    2602:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <fileSize>
    2606:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <fileSize+0x1>
    260a:	a0 93 93 00 	sts	0x0093, r26	; 0x800093 <fileSize+0x2>
    260e:	b0 93 94 00 	sts	0x0094, r27	; 0x800094 <fileSize+0x3>
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    2612:	c7 01       	movw	r24, r14
    2614:	02 96       	adiw	r24, 0x02	; 2
    2616:	5c 01       	movw	r10, r24
	 	transmitByte ('\n');
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
		fileSize++;
	 }

	sectorEndFlag = 0;
    2618:	d1 2c       	mov	r13, r1
    261a:	04 c0       	rjmp	.+8      	; 0x2624 <writeFile+0x354>
    261c:	d1 2c       	mov	r13, r1
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <writeFile+0x354>
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
    2620:	dd 24       	eor	r13, r13
    2622:	d3 94       	inc	r13
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
		   fileSize++;
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    2624:	a1 14       	cp	r10, r1
    2626:	92 e0       	ldi	r25, 0x02	; 2
    2628:	b9 06       	cpc	r11, r25
    262a:	50 f1       	brcs	.+84     	; 0x2680 <writeFile+0x3b0>
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    262c:	60 91 a1 00 	lds	r22, 0x00A1	; 0x8000a1 <startBlock>
    2630:	70 91 a2 00 	lds	r23, 0x00A2	; 0x8000a2 <startBlock+0x1>
    2634:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <startBlock+0x2>
    2638:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <startBlock+0x3>
    263c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <SD_writeSingleBlock>
       j++;
    2640:	0f 5f       	subi	r16, 0xFF	; 255
	   if(j == sectorPerCluster) {j = 0; break;}
    2642:	20 2f       	mov	r18, r16
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <sectorPerCluster>
    264a:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <sectorPerCluster+0x1>
    264e:	28 17       	cp	r18, r24
    2650:	39 07       	cpc	r19, r25
    2652:	d9 f0       	breq	.+54     	; 0x268a <writeFile+0x3ba>
	   startBlock++; 
    2654:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <startBlock>
    2658:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <startBlock+0x1>
    265c:	a0 91 a3 00 	lds	r26, 0x00A3	; 0x8000a3 <startBlock+0x2>
    2660:	b0 91 a4 00 	lds	r27, 0x00A4	; 0x8000a4 <startBlock+0x3>
    2664:	01 96       	adiw	r24, 0x01	; 1
    2666:	a1 1d       	adc	r26, r1
    2668:	b1 1d       	adc	r27, r1
    266a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <startBlock>
    266e:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <startBlock+0x1>
    2672:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <startBlock+0x2>
    2676:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <startBlock+0x3>
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    267a:	e1 2c       	mov	r14, r1
    267c:	f1 2c       	mov	r15, r1
    267e:	01 c0       	rjmp	.+2      	; 0x2682 <writeFile+0x3b2>
    2680:	75 01       	movw	r14, r10
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
	}while (data != '~');
    2682:	1e 37       	cpi	r17, 0x7E	; 126
    2684:	09 f0       	breq	.+2      	; 0x2688 <writeFile+0x3b8>
    2686:	3e cf       	rjmp	.-388    	; 0x2504 <writeFile+0x234>
    2688:	02 c0       	rjmp	.+4      	; 0x268e <writeFile+0x3be>
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    268a:	e1 2c       	mov	r14, r1
    268c:	f1 2c       	mov	r15, r1
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
	}while (data != '~');

   if(data == '~') 
    268e:	1e 37       	cpi	r17, 0x7E	; 126
    2690:	b1 f5       	brne	.+108    	; 0x26fe <writeFile+0x42e>
   {
      fileSize--;	//to remove the last entered '~' character
    2692:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <fileSize>
    2696:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <fileSize+0x1>
    269a:	a0 91 93 00 	lds	r26, 0x0093	; 0x800093 <fileSize+0x2>
    269e:	b0 91 94 00 	lds	r27, 0x0094	; 0x800094 <fileSize+0x3>
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	a1 09       	sbc	r26, r1
    26a6:	b1 09       	sbc	r27, r1
    26a8:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <fileSize>
    26ac:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <fileSize+0x1>
    26b0:	a0 93 93 00 	sts	0x0093, r26	; 0x800093 <fileSize+0x2>
    26b4:	b0 93 94 00 	sts	0x0094, r27	; 0x800094 <fileSize+0x3>
	  i--;
    26b8:	b7 01       	movw	r22, r14
    26ba:	61 50       	subi	r22, 0x01	; 1
    26bc:	71 09       	sbc	r23, r1
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    26be:	06 c0       	rjmp	.+12     	; 0x26cc <writeFile+0x3fc>
        buffer[i]= 0x00;
    26c0:	fb 01       	movw	r30, r22
    26c2:	eb 55       	subi	r30, 0x5B	; 91
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	10 82       	st	Z, r1

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
	  i--;
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    26c8:	6f 5f       	subi	r22, 0xFF	; 255
    26ca:	7f 4f       	sbci	r23, 0xFF	; 255
    26cc:	61 15       	cp	r22, r1
    26ce:	a2 e0       	ldi	r26, 0x02	; 2
    26d0:	7a 07       	cpc	r23, r26
    26d2:	b0 f3       	brcs	.-20     	; 0x26c0 <writeFile+0x3f0>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    26d4:	60 91 a1 00 	lds	r22, 0x00A1	; 0x8000a1 <startBlock>
    26d8:	70 91 a2 00 	lds	r23, 0x00A2	; 0x8000a2 <startBlock+0x1>
    26dc:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <startBlock+0x2>
    26e0:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <startBlock+0x3>
    26e4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <SD_writeSingleBlock>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    26e8:	a3 01       	movw	r20, r6
    26ea:	92 01       	movw	r18, r4
    26ec:	61 e0       	ldi	r22, 0x01	; 1
    26ee:	82 e0       	ldi	r24, 0x02	; 2
    26f0:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <getSetFreeCluster>

error = getDateTime_FAT();    //get current date & time from the RTC
    26f4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <getDateTime_FAT>
if(error) { dateFAT = 0; timeFAT = 0;}
    26f8:	81 11       	cpse	r24, r1
    26fa:	2a c0       	rjmp	.+84     	; 0x2750 <writeFile+0x480>
    26fc:	31 c0       	rjmp	.+98     	; 0x2760 <writeFile+0x490>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    26fe:	c3 01       	movw	r24, r6
    2700:	b2 01       	movw	r22, r4
    2702:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <searchNextFreeCluster>
    2706:	4b 01       	movw	r8, r22
    2708:	5c 01       	movw	r10, r24

   if(cluster == 0)
    270a:	61 15       	cp	r22, r1
    270c:	71 05       	cpc	r23, r1
    270e:	81 05       	cpc	r24, r1
    2710:	91 05       	cpc	r25, r1
    2712:	59 f4       	brne	.+22     	; 0x272a <writeFile+0x45a>
   {
      TX_NEWLINE;
    2714:	8d e0       	ldi	r24, 0x0D	; 13
    2716:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    271a:	8a e0       	ldi	r24, 0x0A	; 10
    271c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    2720:	8b eb       	ldi	r24, 0xBB	; 187
    2722:	94 e0       	ldi	r25, 0x04	; 4
    2724:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
	  return;
    2728:	69 c1       	rjmp	.+722    	; 0x29fc <writeFile+0x72c>
   }

   getSetNextCluster(prevCluster, SET, cluster);
    272a:	8b 01       	movw	r16, r22
    272c:	9c 01       	movw	r18, r24
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	c3 01       	movw	r24, r6
    2732:	b2 01       	movw	r22, r4
    2734:	0e 94 f7 09 	call	0x13ee	; 0x13ee <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    2738:	0f ef       	ldi	r16, 0xFF	; 255
    273a:	1f ef       	ldi	r17, 0xFF	; 255
    273c:	2f ef       	ldi	r18, 0xFF	; 255
    273e:	3f e0       	ldi	r19, 0x0F	; 15
    2740:	41 e0       	ldi	r20, 0x01	; 1
    2742:	c5 01       	movw	r24, r10
    2744:	b4 01       	movw	r22, r8
    2746:	0e 94 f7 09 	call	0x13ee	; 0x13ee <getSetNextCluster>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    274a:	24 01       	movw	r4, r8
    274c:	35 01       	movw	r6, r10
	  return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        
    274e:	8e ce       	rjmp	.-740    	; 0x246c <writeFile+0x19c>

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

error = getDateTime_FAT();    //get current date & time from the RTC
if(error) { dateFAT = 0; timeFAT = 0;}
    2750:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <dateFAT+0x1>
    2754:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <dateFAT>
    2758:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <timeFAT+0x1>
    275c:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <timeFAT>

if(appendFile)  //executes this loop if file is to be appended
    2760:	cf 80       	ldd	r12, Y+7	; 0x07
    2762:	cc 20       	and	r12, r12
    2764:	09 f4       	brne	.+2      	; 0x2768 <writeFile+0x498>
    2766:	59 c0       	rjmp	.+178    	; 0x281a <writeFile+0x54a>
{
  SD_readSingleBlock (appendFileSector);    
    2768:	60 91 cf 02 	lds	r22, 0x02CF	; 0x8002cf <appendFileSector>
    276c:	70 91 d0 02 	lds	r23, 0x02D0	; 0x8002d0 <appendFileSector+0x1>
    2770:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <appendFileSector+0x2>
    2774:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <appendFileSector+0x3>
    2778:	0e 94 47 04 	call	0x88e	; 0x88e <SD_readSingleBlock>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    277c:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <appendFileLocation>
    2780:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <appendFileLocation+0x1>
    2784:	a0 91 89 00 	lds	r26, 0x0089	; 0x800089 <appendFileLocation+0x2>
    2788:	b0 91 8a 00 	lds	r27, 0x008A	; 0x80008a <appendFileLocation+0x3>
    278c:	fc 01       	movw	r30, r24
    278e:	eb 55       	subi	r30, 0x5B	; 91
    2790:	ff 4f       	sbci	r31, 0xFF	; 255

  dir->lastAccessDate = 0;   //date of last access ignored
    2792:	13 8a       	std	Z+19, r1	; 0x13
    2794:	12 8a       	std	Z+18, r1	; 0x12
  dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
    2796:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <timeFAT>
    279a:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <timeFAT+0x1>
    279e:	97 8b       	std	Z+23, r25	; 0x17
    27a0:	86 8b       	std	Z+22, r24	; 0x16
  dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
    27a2:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <dateFAT>
    27a6:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <dateFAT+0x1>
    27aa:	91 8f       	std	Z+25, r25	; 0x19
    27ac:	80 8f       	std	Z+24, r24	; 0x18
  extraMemory = fileSize - dir->fileSize;
    27ae:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <fileSize>
    27b2:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <fileSize+0x1>
    27b6:	a0 91 93 00 	lds	r26, 0x0093	; 0x800093 <fileSize+0x2>
    27ba:	b0 91 94 00 	lds	r27, 0x0094	; 0x800094 <fileSize+0x3>
    27be:	44 8d       	ldd	r20, Z+28	; 0x1c
    27c0:	55 8d       	ldd	r21, Z+29	; 0x1d
    27c2:	66 8d       	ldd	r22, Z+30	; 0x1e
    27c4:	77 8d       	ldd	r23, Z+31	; 0x1f
    27c6:	6c 01       	movw	r12, r24
    27c8:	7d 01       	movw	r14, r26
    27ca:	c4 1a       	sub	r12, r20
    27cc:	d5 0a       	sbc	r13, r21
    27ce:	e6 0a       	sbc	r14, r22
    27d0:	f7 0a       	sbc	r15, r23
  dir->fileSize = fileSize;
    27d2:	84 8f       	std	Z+28, r24	; 0x1c
    27d4:	95 8f       	std	Z+29, r25	; 0x1d
    27d6:	a6 8f       	std	Z+30, r26	; 0x1e
    27d8:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    27da:	60 91 cf 02 	lds	r22, 0x02CF	; 0x8002cf <appendFileSector>
    27de:	70 91 d0 02 	lds	r23, 0x02D0	; 0x8002d0 <appendFileSector+0x1>
    27e2:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <appendFileSector+0x2>
    27e6:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <appendFileSector+0x3>
    27ea:	0e 94 7f 04 	call	0x8fe	; 0x8fe <SD_writeSingleBlock>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    27ee:	b7 01       	movw	r22, r14
    27f0:	a6 01       	movw	r20, r12
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <freeMemoryUpdate>

  
  TX_NEWLINE;
    27f8:	8d e0       	ldi	r24, 0x0D	; 13
    27fa:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    27fe:	8a e0       	ldi	r24, 0x0A	; 10
    2800:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
  transmitString_F(PSTR(" File appended!"));
    2804:	8b ea       	ldi	r24, 0xAB	; 171
    2806:	94 e0       	ldi	r25, 0x04	; 4
    2808:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
  TX_NEWLINE;
    280c:	8d e0       	ldi	r24, 0x0D	; 13
    280e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2812:	8a e0       	ldi	r24, 0x0A	; 10
    2814:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>

  return;
    2818:	f1 c0       	rjmp	.+482    	; 0x29fc <writeFile+0x72c>
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    281a:	c0 90 9b 00 	lds	r12, 0x009B	; 0x80009b <rootCluster>
    281e:	d0 90 9c 00 	lds	r13, 0x009C	; 0x80009c <rootCluster+0x1>
    2822:	e0 90 9d 00 	lds	r14, 0x009D	; 0x80009d <rootCluster+0x2>
    2826:	f0 90 9e 00 	lds	r15, 0x009E	; 0x80009e <rootCluster+0x3>
    282a:	c9 82       	std	Y+1, r12	; 0x01
    282c:	da 82       	std	Y+2, r13	; 0x02
    282e:	eb 82       	std	Y+3, r14	; 0x03
    2830:	fc 82       	std	Y+4, r15	; 0x04
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
    2832:	71 2c       	mov	r7, r1

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    2834:	69 81       	ldd	r22, Y+1	; 0x01
    2836:	7a 81       	ldd	r23, Y+2	; 0x02
    2838:	8b 81       	ldd	r24, Y+3	; 0x03
    283a:	9c 81       	ldd	r25, Y+4	; 0x04
    283c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <getFirstSector>
    2840:	4b 01       	movw	r8, r22
    2842:	5c 01       	movw	r10, r24

   for(sector = 0; sector < sectorPerCluster; sector++)
    2844:	61 2c       	mov	r6, r1
    2846:	7f c0       	rjmp	.+254    	; 0x2946 <writeFile+0x676>
   {
     SD_readSingleBlock (firstSector + sector);
    2848:	75 01       	movw	r14, r10
    284a:	64 01       	movw	r12, r8
    284c:	c6 0c       	add	r12, r6
    284e:	d1 1c       	adc	r13, r1
    2850:	e1 1c       	adc	r14, r1
    2852:	f1 1c       	adc	r15, r1
    2854:	c7 01       	movw	r24, r14
    2856:	b6 01       	movw	r22, r12
    2858:	0e 94 47 04 	call	0x88e	; 0x88e <SD_readSingleBlock>
	

     for(i=0; i<bytesPerSector; i+=32)
    285c:	00 e0       	ldi	r16, 0x00	; 0
    285e:	10 e0       	ldi	r17, 0x00	; 0
    2860:	69 c0       	rjmp	.+210    	; 0x2934 <writeFile+0x664>
     {
	    dir = (struct dir_Structure *) &buffer[i];
    2862:	f8 01       	movw	r30, r16
    2864:	eb 55       	subi	r30, 0x5B	; 91
    2866:	ff 4f       	sbci	r31, 0xFF	; 255

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    2868:	71 10       	cpse	r7, r1
    286a:	c8 c0       	rjmp	.+400    	; 0x29fc <writeFile+0x72c>
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    286c:	80 81       	ld	r24, Z
    286e:	88 23       	and	r24, r24
    2870:	89 f0       	breq	.+34     	; 0x2894 <writeFile+0x5c4>
    2872:	85 3e       	cpi	r24, 0xE5	; 229
    2874:	09 f0       	breq	.+2      	; 0x2878 <writeFile+0x5a8>
    2876:	5c c0       	rjmp	.+184    	; 0x2930 <writeFile+0x660>
    2878:	0f c0       	rjmp	.+30     	; 0x2898 <writeFile+0x5c8>
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    287a:	82 2f       	mov	r24, r18
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	a8 85       	ldd	r26, Y+8	; 0x08
    2880:	b9 85       	ldd	r27, Y+9	; 0x09
    2882:	a8 0f       	add	r26, r24
    2884:	b9 1f       	adc	r27, r25
    2886:	3c 91       	ld	r19, X
    2888:	df 01       	movw	r26, r30
    288a:	a8 0f       	add	r26, r24
    288c:	b9 1f       	adc	r27, r25
    288e:	3c 93       	st	X, r19
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    2890:	2f 5f       	subi	r18, 0xFF	; 255
    2892:	03 c0       	rjmp	.+6      	; 0x289a <writeFile+0x5ca>
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	01 c0       	rjmp	.+2      	; 0x289a <writeFile+0x5ca>
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	2b 30       	cpi	r18, 0x0B	; 11
    289c:	70 f3       	brcs	.-36     	; 0x287a <writeFile+0x5aa>
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    289e:	80 e2       	ldi	r24, 0x20	; 32
    28a0:	83 87       	std	Z+11, r24	; 0x0b
		  dir->NTreserved = 0;			//always set to 0
    28a2:	14 86       	std	Z+12, r1	; 0x0c
		  dir->timeTenth = 0;			//always set to 0
    28a4:	15 86       	std	Z+13, r1	; 0x0d
		  dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
    28a6:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <timeFAT>
    28aa:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <timeFAT+0x1>
    28ae:	37 87       	std	Z+15, r19	; 0x0f
    28b0:	26 87       	std	Z+14, r18	; 0x0e
		  dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
    28b2:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <dateFAT>
    28b6:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <dateFAT+0x1>
    28ba:	91 8b       	std	Z+17, r25	; 0x11
    28bc:	80 8b       	std	Z+16, r24	; 0x10
		  dir->lastAccessDate = 0;   	//date of last access ignored
    28be:	13 8a       	std	Z+19, r1	; 0x13
    28c0:	12 8a       	std	Z+18, r1	; 0x12
		  dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
    28c2:	37 8b       	std	Z+23, r19	; 0x17
    28c4:	26 8b       	std	Z+22, r18	; 0x16
		  dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
    28c6:	91 8f       	std	Z+25, r25	; 0x19
    28c8:	80 8f       	std	Z+24, r24	; 0x18
		  dir->firstClusterHI = firstClusterHigh;
    28ca:	35 8a       	std	Z+21, r3	; 0x15
    28cc:	24 8a       	std	Z+20, r2	; 0x14
		  dir->firstClusterLO = firstClusterLow;
    28ce:	8d 81       	ldd	r24, Y+5	; 0x05
    28d0:	9e 81       	ldd	r25, Y+6	; 0x06
    28d2:	93 8f       	std	Z+27, r25	; 0x1b
    28d4:	82 8f       	std	Z+26, r24	; 0x1a
		  dir->fileSize = fileSize;
    28d6:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <fileSize>
    28da:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <fileSize+0x1>
    28de:	a0 91 93 00 	lds	r26, 0x0093	; 0x800093 <fileSize+0x2>
    28e2:	b0 91 94 00 	lds	r27, 0x0094	; 0x800094 <fileSize+0x3>
    28e6:	84 8f       	std	Z+28, r24	; 0x1c
    28e8:	95 8f       	std	Z+29, r25	; 0x1d
    28ea:	a6 8f       	std	Z+30, r26	; 0x1e
    28ec:	b7 8f       	std	Z+31, r27	; 0x1f

		  SD_writeSingleBlock (firstSector + sector);
    28ee:	c7 01       	movw	r24, r14
    28f0:	b6 01       	movw	r22, r12
    28f2:	0e 94 7f 04 	call	0x8fe	; 0x8fe <SD_writeSingleBlock>
		  fileCreatedFlag = 1;

		  TX_NEWLINE;
    28f6:	8d e0       	ldi	r24, 0x0D	; 13
    28f8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    28fc:	8a e0       	ldi	r24, 0x0A	; 10
    28fe:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		  TX_NEWLINE;
    2902:	8d e0       	ldi	r24, 0x0D	; 13
    2904:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2908:	8a e0       	ldi	r24, 0x0A	; 10
    290a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		  transmitString_F(PSTR(" File Created! "));
    290e:	8b e9       	ldi	r24, 0x9B	; 155
    2910:	94 e0       	ldi	r25, 0x04	; 4
    2912:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    2916:	40 91 91 00 	lds	r20, 0x0091	; 0x800091 <fileSize>
    291a:	50 91 92 00 	lds	r21, 0x0092	; 0x800092 <fileSize+0x1>
    291e:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <fileSize+0x2>
    2922:	70 91 94 00 	lds	r23, 0x0094	; 0x800094 <fileSize+0x3>
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <freeMemoryUpdate>
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_writeSingleBlock (firstSector + sector);
		  fileCreatedFlag = 1;
    292c:	77 24       	eor	r7, r7
    292e:	73 94       	inc	r7
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    2930:	00 5e       	subi	r16, 0xE0	; 224
    2932:	1f 4f       	sbci	r17, 0xFF	; 255
    2934:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <bytesPerSector>
    2938:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <bytesPerSector+0x1>
    293c:	08 17       	cp	r16, r24
    293e:	19 07       	cpc	r17, r25
    2940:	08 f4       	brcc	.+2      	; 0x2944 <writeFile+0x674>
    2942:	8f cf       	rjmp	.-226    	; 0x2862 <writeFile+0x592>

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    2944:	63 94       	inc	r6
    2946:	86 2d       	mov	r24, r6
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <sectorPerCluster>
    294e:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <sectorPerCluster+0x1>
    2952:	82 17       	cp	r24, r18
    2954:	93 07       	cpc	r25, r19
    2956:	08 f4       	brcc	.+2      	; 0x295a <writeFile+0x68a>
    2958:	77 cf       	rjmp	.-274    	; 0x2848 <writeFile+0x578>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    295a:	00 e0       	ldi	r16, 0x00	; 0
    295c:	10 e0       	ldi	r17, 0x00	; 0
    295e:	98 01       	movw	r18, r16
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	69 81       	ldd	r22, Y+1	; 0x01
    2964:	7a 81       	ldd	r23, Y+2	; 0x02
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	9c 81       	ldd	r25, Y+4	; 0x04
    296a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <getSetNextCluster>

   if(cluster > 0x0ffffff6)
    296e:	67 3f       	cpi	r22, 0xF7	; 247
    2970:	af ef       	ldi	r26, 0xFF	; 255
    2972:	7a 07       	cpc	r23, r26
    2974:	8a 07       	cpc	r24, r26
    2976:	af e0       	ldi	r26, 0x0F	; 15
    2978:	9a 07       	cpc	r25, r26
    297a:	78 f1       	brcs	.+94     	; 0x29da <writeFile+0x70a>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    297c:	6f 3f       	cpi	r22, 0xFF	; 255
    297e:	7f 4f       	sbci	r23, 0xFF	; 255
    2980:	8f 4f       	sbci	r24, 0xFF	; 255
    2982:	9f 40       	sbci	r25, 0x0F	; 15
    2984:	29 f5       	brne	.+74     	; 0x29d0 <writeFile+0x700>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    2986:	69 81       	ldd	r22, Y+1	; 0x01
    2988:	7a 81       	ldd	r23, Y+2	; 0x02
    298a:	8b 81       	ldd	r24, Y+3	; 0x03
    298c:	9c 81       	ldd	r25, Y+4	; 0x04
    298e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <searchNextFreeCluster>
    2992:	86 2e       	mov	r8, r22
    2994:	97 2e       	mov	r9, r23
    2996:	a8 2e       	mov	r10, r24
    2998:	b9 2e       	mov	r11, r25
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    299a:	06 2f       	mov	r16, r22
    299c:	17 2f       	mov	r17, r23
    299e:	28 2f       	mov	r18, r24
    29a0:	39 2f       	mov	r19, r25
    29a2:	41 e0       	ldi	r20, 0x01	; 1
    29a4:	69 81       	ldd	r22, Y+1	; 0x01
    29a6:	7a 81       	ldd	r23, Y+2	; 0x02
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	9c 81       	ldd	r25, Y+4	; 0x04
    29ac:	0e 94 f7 09 	call	0x13ee	; 0x13ee <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    29b0:	0f ef       	ldi	r16, 0xFF	; 255
    29b2:	1f ef       	ldi	r17, 0xFF	; 255
    29b4:	2f ef       	ldi	r18, 0xFF	; 255
    29b6:	3f e0       	ldi	r19, 0x0F	; 15
    29b8:	41 e0       	ldi	r20, 0x01	; 1
    29ba:	68 2d       	mov	r22, r8
    29bc:	79 2d       	mov	r23, r9
    29be:	8a 2d       	mov	r24, r10
    29c0:	9b 2d       	mov	r25, r11
    29c2:	0e 94 f7 09 	call	0x13ee	; 0x13ee <getSetNextCluster>

   if(cluster > 0x0ffffff6)
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    29c6:	89 82       	std	Y+1, r8	; 0x01
    29c8:	9a 82       	std	Y+2, r9	; 0x02
    29ca:	ab 82       	std	Y+3, r10	; 0x03
    29cc:	bc 82       	std	Y+4, r11	; 0x04
    29ce:	09 c0       	rjmp	.+18     	; 0x29e2 <writeFile+0x712>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    29d0:	86 e8       	ldi	r24, 0x86	; 134
    29d2:	94 e0       	ldi	r25, 0x04	; 4
    29d4:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
	    return;
    29d8:	11 c0       	rjmp	.+34     	; 0x29fc <writeFile+0x72c>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    29da:	69 83       	std	Y+1, r22	; 0x01
    29dc:	7a 83       	std	Y+2, r23	; 0x02
    29de:	8b 83       	std	Y+3, r24	; 0x03
    29e0:	9c 83       	std	Y+4, r25	; 0x04
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    29e2:	c9 80       	ldd	r12, Y+1	; 0x01
    29e4:	da 80       	ldd	r13, Y+2	; 0x02
    29e6:	eb 80       	ldd	r14, Y+3	; 0x03
    29e8:	fc 80       	ldd	r15, Y+4	; 0x04
    29ea:	cd 28       	or	r12, r13
    29ec:	ce 28       	or	r12, r14
    29ee:	cf 28       	or	r12, r15
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <writeFile+0x724>
    29f2:	20 cf       	rjmp	.-448    	; 0x2834 <writeFile+0x564>
    29f4:	8d e6       	ldi	r24, 0x6D	; 109
    29f6:	94 e0       	ldi	r25, 0x04	; 4
    29f8:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
   
   prevCluster = cluster;
 }
 
 return;
}
    29fc:	29 96       	adiw	r28, 0x09	; 9
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	ff 90       	pop	r15
    2a12:	ef 90       	pop	r14
    2a14:	df 90       	pop	r13
    2a16:	cf 90       	pop	r12
    2a18:	bf 90       	pop	r11
    2a1a:	af 90       	pop	r10
    2a1c:	9f 90       	pop	r9
    2a1e:	8f 90       	pop	r8
    2a20:	7f 90       	pop	r7
    2a22:	6f 90       	pop	r6
    2a24:	5f 90       	pop	r5
    2a26:	4f 90       	pop	r4
    2a28:	3f 90       	pop	r3
    2a2a:	2f 90       	pop	r2
    2a2c:	08 95       	ret

00002a2e <port_init>:
#include "FAT32.c"


void port_init(void)
{
	PORTA = 0x00;
    2a2e:	1b ba       	out	0x1b, r1	; 27
	DDRA  = 0x00;
    2a30:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0xEF;
    2a32:	8f ee       	ldi	r24, 0xEF	; 239
    2a34:	88 bb       	out	0x18, r24	; 24
	DDRB  = 0xBF; //MISO line i/p, rest o/p
    2a36:	8f eb       	ldi	r24, 0xBF	; 191
    2a38:	87 bb       	out	0x17, r24	; 23
	PORTC = 0x00;
    2a3a:	15 ba       	out	0x15, r1	; 21
	DDRC  = 0x00;
    2a3c:	14 ba       	out	0x14, r1	; 20
	PORTD = 0x00;
    2a3e:	12 ba       	out	0x12, r1	; 18
	DDRD  = 0xFE;
    2a40:	8e ef       	ldi	r24, 0xFE	; 254
    2a42:	81 bb       	out	0x11, r24	; 17
    2a44:	08 95       	ret

00002a46 <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
	cli();  //all interrupts disabled
    2a46:	f8 94       	cli
	port_init();
    2a48:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <port_init>
	spi_init();
    2a4c:	0e 94 99 03 	call	0x732	; 0x732 <spi_init>
	twi_init();
    2a50:	0e 94 2f 06 	call	0xc5e	; 0xc5e <twi_init>
	uart0_init();
    2a54:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <uart0_init>

	MCUCR = 0x00;
    2a58:	15 be       	out	0x35, r1	; 53
	GICR  = 0x00;
    2a5a:	1b be       	out	0x3b, r1	; 59
	TIMSK = 0x00; //timer interrupt sources
    2a5c:	19 be       	out	0x39, r1	; 57
    2a5e:	08 95       	ret

00002a60 <main>:
	//all peripherals are now initialized
}

//*************************** MAIN *******************************//
int main(void)
{
    2a60:	cf 93       	push	r28
    2a62:	df 93       	push	r29
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
    2a68:	2d 97       	sbiw	r28, 0x0d	; 13
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a74:	2f ef       	ldi	r18, 0xFF	; 255
    2a76:	80 e7       	ldi	r24, 0x70	; 112
    2a78:	92 e0       	ldi	r25, 0x02	; 2
    2a7a:	21 50       	subi	r18, 0x01	; 1
    2a7c:	80 40       	sbci	r24, 0x00	; 0
    2a7e:	90 40       	sbci	r25, 0x00	; 0
    2a80:	e1 f7       	brne	.-8      	; 0x2a7a <main+0x1a>
    2a82:	00 c0       	rjmp	.+0      	; 0x2a84 <main+0x24>
    2a84:	00 00       	nop
	unsigned int i;
	unsigned char fileName[13];

	_delay_ms(100);  //delay for VCC stabilization

	init_devices();
    2a86:	0e 94 23 15 	call	0x2a46	; 0x2a46 <init_devices>

	PORTD |= 0x04; //switching ON the LED (for testing purpose only)
    2a8a:	82 b3       	in	r24, 0x12	; 18
    2a8c:	84 60       	ori	r24, 0x04	; 4
    2a8e:	82 bb       	out	0x12, r24	; 18

	TX_NEWLINE;
    2a90:	8d e0       	ldi	r24, 0x0D	; 13
    2a92:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2a96:	8a e0       	ldi	r24, 0x0A	; 10
    2a98:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	TX_NEWLINE;
    2a9c:	8d e0       	ldi	r24, 0x0D	; 13
    2a9e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2aa2:	8a e0       	ldi	r24, 0x0A	; 10
    2aa4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	transmitString_F (PSTR("****************************************************"));
    2aa8:	8a e1       	ldi	r24, 0x1A	; 26
    2aaa:	94 e0       	ldi	r25, 0x04	; 4
    2aac:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
	TX_NEWLINE;
    2ab0:	8d e0       	ldi	r24, 0x0D	; 13
    2ab2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2ab6:	8a e0       	ldi	r24, 0x0A	; 10
    2ab8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	transmitString_F (PSTR("    Dharmani's microSD Card Testing..  "));
    2abc:	82 ef       	ldi	r24, 0xF2	; 242
    2abe:	93 e0       	ldi	r25, 0x03	; 3
    2ac0:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
	TX_NEWLINE;
    2ac4:	8d e0       	ldi	r24, 0x0D	; 13
    2ac6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2aca:	8a e0       	ldi	r24, 0x0A	; 10
    2acc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
	transmitString_F (PSTR("****************************************************"));
    2ad0:	8d eb       	ldi	r24, 0xBD	; 189
    2ad2:	93 e0       	ldi	r25, 0x03	; 3
    2ad4:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
	TX_NEWLINE;
    2ad8:	8d e0       	ldi	r24, 0x0D	; 13
    2ada:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2ade:	8a e0       	ldi	r24, 0x0A	; 10
    2ae0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>

	cardType = 0;
    2ae4:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <cardType>

	for (i=0; i<10; i++)
    2ae8:	c1 2c       	mov	r12, r1
    2aea:	d1 2c       	mov	r13, r1
    2aec:	08 c0       	rjmp	.+16     	; 0x2afe <main+0x9e>
	{
		error = SD_init();
    2aee:	0e 94 ef 04 	call	0x9de	; 0x9de <SD_init>
    2af2:	18 2f       	mov	r17, r24
		if(!error) break;
    2af4:	88 23       	and	r24, r24
    2af6:	39 f0       	breq	.+14     	; 0x2b06 <main+0xa6>
	transmitString_F (PSTR("****************************************************"));
	TX_NEWLINE;

	cardType = 0;

	for (i=0; i<10; i++)
    2af8:	2f ef       	ldi	r18, 0xFF	; 255
    2afa:	c2 1a       	sub	r12, r18
    2afc:	d2 0a       	sbc	r13, r18
    2afe:	8a e0       	ldi	r24, 0x0A	; 10
    2b00:	c8 16       	cp	r12, r24
    2b02:	d1 04       	cpc	r13, r1
    2b04:	a0 f3       	brcs	.-24     	; 0x2aee <main+0x8e>
	{
		error = SD_init();
		if(!error) break;
	}

	if(error)
    2b06:	11 23       	and	r17, r17
    2b08:	69 f0       	breq	.+26     	; 0x2b24 <main+0xc4>
	{
		if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    2b0a:	11 30       	cpi	r17, 0x01	; 1
    2b0c:	21 f4       	brne	.+8      	; 0x2b16 <main+0xb6>
    2b0e:	86 ea       	ldi	r24, 0xA6	; 166
    2b10:	93 e0       	ldi	r25, 0x03	; 3
    2b12:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
		if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
    2b16:	12 30       	cpi	r17, 0x02	; 2
    2b18:	21 f4       	brne	.+8      	; 0x2b22 <main+0xc2>
    2b1a:	89 e8       	ldi	r24, 0x89	; 137
    2b1c:	93 e0       	ldi	r25, 0x03	; 3
    2b1e:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
    2b22:	ff cf       	rjmp	.-2      	; 0x2b22 <main+0xc2>

		while(1);  //wait here forever if error in SD init
	}

	switch (cardType)
    2b24:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <cardType>
    2b28:	82 30       	cpi	r24, 0x02	; 2
    2b2a:	49 f0       	breq	.+18     	; 0x2b3e <main+0xde>
    2b2c:	83 30       	cpi	r24, 0x03	; 3
    2b2e:	61 f0       	breq	.+24     	; 0x2b48 <main+0xe8>
    2b30:	81 30       	cpi	r24, 0x01	; 1
    2b32:	79 f4       	brne	.+30     	; 0x2b52 <main+0xf2>
	{
		case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
    2b34:	8e e5       	ldi	r24, 0x5E	; 94
    2b36:	93 e0       	ldi	r25, 0x03	; 3
    2b38:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
		break;
    2b3c:	0e c0       	rjmp	.+28     	; 0x2b5a <main+0xfa>
		case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
    2b3e:	81 e4       	ldi	r24, 0x41	; 65
    2b40:	93 e0       	ldi	r25, 0x03	; 3
    2b42:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
		break;
    2b46:	09 c0       	rjmp	.+18     	; 0x2b5a <main+0xfa>
		case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
    2b48:	86 e1       	ldi	r24, 0x16	; 22
    2b4a:	93 e0       	ldi	r25, 0x03	; 3
    2b4c:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
		break;
    2b50:	04 c0       	rjmp	.+8      	; 0x2b5a <main+0xfa>
		default:transmitString_F(PSTR("Unknown SD Card Detected!"));
    2b52:	8c ef       	ldi	r24, 0xFC	; 252
    2b54:	92 e0       	ldi	r25, 0x02	; 2
    2b56:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
		break;
	}


	SPI_HIGH_SPEED;	//SCK - 4 MHz
    2b5a:	80 e5       	ldi	r24, 0x50	; 80
    2b5c:	8d b9       	out	0x0d, r24	; 13
    2b5e:	8e b1       	in	r24, 0x0e	; 14
    2b60:	81 60       	ori	r24, 0x01	; 1
    2b62:	8e b9       	out	0x0e, r24	; 14
    2b64:	8f ec       	ldi	r24, 0xCF	; 207
    2b66:	97 e0       	ldi	r25, 0x07	; 7
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <main+0x108>
    2b6c:	00 c0       	rjmp	.+0      	; 0x2b6e <main+0x10e>
    2b6e:	00 00       	nop
	_delay_ms(1);   //some delay


	FAT32_active = 1;
	error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    2b70:	0e 94 04 0b 	call	0x1608	; 0x1608 <getBootSectorData>
	if(error)
    2b74:	88 23       	and	r24, r24
    2b76:	61 f0       	breq	.+24     	; 0x2b90 <main+0x130>
	{
		TX_NEWLINE;
    2b78:	8d e0       	ldi	r24, 0x0D	; 13
    2b7a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2b7e:	8a e0       	ldi	r24, 0x0A	; 10
    2b80:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    2b84:	8b ee       	ldi	r24, 0xEB	; 235
    2b86:	92 e0       	ldi	r25, 0x02	; 2
    2b88:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
		FAT32_active = 0;
    2b8c:	f1 2c       	mov	r15, r1
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <main+0x134>

	SPI_HIGH_SPEED;	//SCK - 4 MHz
	_delay_ms(1);   //some delay


	FAT32_active = 1;
    2b90:	ff 24       	eor	r15, r15
    2b92:	f3 94       	inc	r15
		FAT32_active = 0;
	}

	while(1)
	{
		TX_NEWLINE;
    2b94:	8d e0       	ldi	r24, 0x0D	; 13
    2b96:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2b9a:	8a e0       	ldi	r24, 0x0A	; 10
    2b9c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		transmitString_F(PSTR("Press any key..."));
    2ba0:	8a ed       	ldi	r24, 0xDA	; 218
    2ba2:	92 e0       	ldi	r25, 0x02	; 2
    2ba4:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
		TX_NEWLINE;
    2ba8:	8d e0       	ldi	r24, 0x0D	; 13
    2baa:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2bae:	8a e0       	ldi	r24, 0x0A	; 10
    2bb0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		option = receiveByte();
    2bb4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
		TX_NEWLINE;
    2bb8:	8d e0       	ldi	r24, 0x0D	; 13
    2bba:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2bbe:	8a e0       	ldi	r24, 0x0A	; 10
    2bc0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		transmitString_F(PSTR("> 0: Erase Blocks "));
    2bc4:	87 ec       	ldi	r24, 0xC7	; 199
    2bc6:	92 e0       	ldi	r25, 0x02	; 2
    2bc8:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
		TX_NEWLINE;
    2bcc:	8d e0       	ldi	r24, 0x0D	; 13
    2bce:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2bd2:	8a e0       	ldi	r24, 0x0A	; 10
    2bd4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		transmitString_F(PSTR("> 1: Write single Block          2: Read single Block"));
    2bd8:	81 e9       	ldi	r24, 0x91	; 145
    2bda:	92 e0       	ldi	r25, 0x02	; 2
    2bdc:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
		#ifndef FAT_TESTING_ONLY
		TX_NEWLINE;
		transmitString_F(PSTR("> 3: Write multiple Blocks       4: Read multiple Blocks"));
		#endif

		TX_NEWLINE;
    2be0:	8d e0       	ldi	r24, 0x0D	; 13
    2be2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2be6:	8a e0       	ldi	r24, 0x0A	; 10
    2be8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		transmitString_F(PSTR("> 5: Get file list               6: Read File"));
    2bec:	83 e6       	ldi	r24, 0x63	; 99
    2bee:	92 e0       	ldi	r25, 0x02	; 2
    2bf0:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
		TX_NEWLINE;
    2bf4:	8d e0       	ldi	r24, 0x0D	; 13
    2bf6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2bfa:	8a e0       	ldi	r24, 0x0A	; 10
    2bfc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		transmitString_F(PSTR("> 7: Write File                  8: Delete File"));
    2c00:	83 e3       	ldi	r24, 0x33	; 51
    2c02:	92 e0       	ldi	r25, 0x02	; 2
    2c04:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
		TX_NEWLINE;
    2c08:	8d e0       	ldi	r24, 0x0D	; 13
    2c0a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2c0e:	8a e0       	ldi	r24, 0x0A	; 10
    2c10:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		transmitString_F(PSTR("> 9: Read SD Memory Capacity     a: Show Date & Time"));
    2c14:	8e ef       	ldi	r24, 0xFE	; 254
    2c16:	91 e0       	ldi	r25, 0x01	; 1
    2c18:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>

		TX_NEWLINE;
    2c1c:	8d e0       	ldi	r24, 0x0D	; 13
    2c1e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2c22:	8a e0       	ldi	r24, 0x0A	; 10
    2c24:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		transmitString_F(PSTR("> b: Update Date                 c: Update Time"));
    2c28:	8e ec       	ldi	r24, 0xCE	; 206
    2c2a:	91 e0       	ldi	r25, 0x01	; 1
    2c2c:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
		TX_NEWLINE;
    2c30:	8d e0       	ldi	r24, 0x0D	; 13
    2c32:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2c36:	8a e0       	ldi	r24, 0x0A	; 10
    2c38:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>

		TX_NEWLINE;
    2c3c:	8d e0       	ldi	r24, 0x0D	; 13
    2c3e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2c42:	8a e0       	ldi	r24, 0x0A	; 10
    2c44:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		TX_NEWLINE;
    2c48:	8d e0       	ldi	r24, 0x0D	; 13
    2c4a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2c4e:	8a e0       	ldi	r24, 0x0A	; 10
    2c50:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		transmitString_F(PSTR("> Select Option (0-9/a/b/c): "));
    2c54:	80 eb       	ldi	r24, 0xB0	; 176
    2c56:	91 e0       	ldi	r25, 0x01	; 1
    2c58:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>

		/*WARNING: If option 0, 1 or 3 is selected, the card data may not be detected by PC/Laptop again,
		as it may disturb the FAT format. In such a case you will need to format the card again with FAT32.
		This options are given for learnig the raw data transfer to & from the SD Card*/

		option = receiveByte();
    2c5c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    2c60:	08 2f       	mov	r16, r24
		transmitByte(option);
    2c62:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>

		if(option >=0x35 && option <=0x39)  //options 5 to 9 disabled if FAT32 not found
    2c66:	8b ec       	ldi	r24, 0xCB	; 203
    2c68:	80 0f       	add	r24, r16
    2c6a:	85 30       	cpi	r24, 0x05	; 5
    2c6c:	98 f4       	brcc	.+38     	; 0x2c94 <main+0x234>
		{
			if(!FAT32_active)
    2c6e:	f1 10       	cpse	r15, r1
    2c70:	11 c0       	rjmp	.+34     	; 0x2c94 <main+0x234>
			{
				TX_NEWLINE;
    2c72:	8d e0       	ldi	r24, 0x0D	; 13
    2c74:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2c78:	8a e0       	ldi	r24, 0x0A	; 10
    2c7a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
				TX_NEWLINE;
    2c7e:	8d e0       	ldi	r24, 0x0D	; 13
    2c80:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2c84:	8a e0       	ldi	r24, 0x0A	; 10
    2c86:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
				transmitString_F(PSTR("FAT32 options disabled!"));
    2c8a:	88 e9       	ldi	r24, 0x98	; 152
    2c8c:	91 e0       	ldi	r25, 0x01	; 1
    2c8e:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
				continue;
    2c92:	80 cf       	rjmp	.-256    	; 0x2b94 <main+0x134>
			}
		}


		if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
    2c94:	80 ed       	ldi	r24, 0xD0	; 208
    2c96:	80 0f       	add	r24, r16
    2c98:	85 30       	cpi	r24, 0x05	; 5
    2c9a:	08 f0       	brcs	.+2      	; 0x2c9e <main+0x23e>
    2c9c:	96 c0       	rjmp	.+300    	; 0x2dca <main+0x36a>
		{
			TX_NEWLINE;
    2c9e:	8d e0       	ldi	r24, 0x0D	; 13
    2ca0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2ca4:	8a e0       	ldi	r24, 0x0A	; 10
    2ca6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			TX_NEWLINE;
    2caa:	8d e0       	ldi	r24, 0x0D	; 13
    2cac:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2cb0:	8a e0       	ldi	r24, 0x0A	; 10
    2cb2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			transmitString_F(PSTR("Enter the Block number (0000-9999):"));
    2cb6:	84 e7       	ldi	r24, 0x74	; 116
    2cb8:	91 e0       	ldi	r25, 0x01	; 1
    2cba:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
			data = receiveByte(); transmitByte(data);
    2cbe:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    2cc2:	18 2f       	mov	r17, r24
    2cc4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			startBlock = (data & 0x0f) * 1000;
    2cc8:	1f 70       	andi	r17, 0x0F	; 15
    2cca:	28 ee       	ldi	r18, 0xE8	; 232
    2ccc:	33 e0       	ldi	r19, 0x03	; 3
    2cce:	12 9f       	mul	r17, r18
    2cd0:	c0 01       	movw	r24, r0
    2cd2:	13 9f       	mul	r17, r19
    2cd4:	90 0d       	add	r25, r0
    2cd6:	11 24       	eor	r1, r1
    2cd8:	09 2e       	mov	r0, r25
    2cda:	00 0c       	add	r0, r0
    2cdc:	aa 0b       	sbc	r26, r26
    2cde:	bb 0b       	sbc	r27, r27
    2ce0:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <startBlock>
    2ce4:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <startBlock+0x1>
    2ce8:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <startBlock+0x2>
    2cec:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <startBlock+0x3>
			data = receiveByte(); transmitByte(data);
    2cf0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    2cf4:	18 2f       	mov	r17, r24
    2cf6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			startBlock += (data & 0x0f) * 100;
    2cfa:	1f 70       	andi	r17, 0x0F	; 15
    2cfc:	24 e6       	ldi	r18, 0x64	; 100
    2cfe:	12 9f       	mul	r17, r18
    2d00:	c0 01       	movw	r24, r0
    2d02:	11 24       	eor	r1, r1
    2d04:	40 91 a1 00 	lds	r20, 0x00A1	; 0x8000a1 <startBlock>
    2d08:	50 91 a2 00 	lds	r21, 0x00A2	; 0x8000a2 <startBlock+0x1>
    2d0c:	60 91 a3 00 	lds	r22, 0x00A3	; 0x8000a3 <startBlock+0x2>
    2d10:	70 91 a4 00 	lds	r23, 0x00A4	; 0x8000a4 <startBlock+0x3>
    2d14:	09 2e       	mov	r0, r25
    2d16:	00 0c       	add	r0, r0
    2d18:	aa 0b       	sbc	r26, r26
    2d1a:	bb 0b       	sbc	r27, r27
    2d1c:	84 0f       	add	r24, r20
    2d1e:	95 1f       	adc	r25, r21
    2d20:	a6 1f       	adc	r26, r22
    2d22:	b7 1f       	adc	r27, r23
    2d24:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <startBlock>
    2d28:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <startBlock+0x1>
    2d2c:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <startBlock+0x2>
    2d30:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <startBlock+0x3>
			data = receiveByte(); transmitByte(data);
    2d34:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    2d38:	18 2f       	mov	r17, r24
    2d3a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			startBlock += (data & 0x0f) * 10;
    2d3e:	1f 70       	andi	r17, 0x0F	; 15
    2d40:	21 2f       	mov	r18, r17
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	c9 01       	movw	r24, r18
    2d46:	88 0f       	add	r24, r24
    2d48:	99 1f       	adc	r25, r25
    2d4a:	22 0f       	add	r18, r18
    2d4c:	33 1f       	adc	r19, r19
    2d4e:	22 0f       	add	r18, r18
    2d50:	33 1f       	adc	r19, r19
    2d52:	22 0f       	add	r18, r18
    2d54:	33 1f       	adc	r19, r19
    2d56:	82 0f       	add	r24, r18
    2d58:	93 1f       	adc	r25, r19
    2d5a:	40 91 a1 00 	lds	r20, 0x00A1	; 0x8000a1 <startBlock>
    2d5e:	50 91 a2 00 	lds	r21, 0x00A2	; 0x8000a2 <startBlock+0x1>
    2d62:	60 91 a3 00 	lds	r22, 0x00A3	; 0x8000a3 <startBlock+0x2>
    2d66:	70 91 a4 00 	lds	r23, 0x00A4	; 0x8000a4 <startBlock+0x3>
    2d6a:	09 2e       	mov	r0, r25
    2d6c:	00 0c       	add	r0, r0
    2d6e:	aa 0b       	sbc	r26, r26
    2d70:	bb 0b       	sbc	r27, r27
    2d72:	84 0f       	add	r24, r20
    2d74:	95 1f       	adc	r25, r21
    2d76:	a6 1f       	adc	r26, r22
    2d78:	b7 1f       	adc	r27, r23
    2d7a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <startBlock>
    2d7e:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <startBlock+0x1>
    2d82:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <startBlock+0x2>
    2d86:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <startBlock+0x3>
			data = receiveByte(); transmitByte(data);
    2d8a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    2d8e:	18 2f       	mov	r17, r24
    2d90:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			startBlock += (data & 0x0f);
    2d94:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <startBlock>
    2d98:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <startBlock+0x1>
    2d9c:	a0 91 a3 00 	lds	r26, 0x00A3	; 0x8000a3 <startBlock+0x2>
    2da0:	b0 91 a4 00 	lds	r27, 0x00A4	; 0x8000a4 <startBlock+0x3>
    2da4:	1f 70       	andi	r17, 0x0F	; 15
    2da6:	81 0f       	add	r24, r17
    2da8:	91 1d       	adc	r25, r1
    2daa:	a1 1d       	adc	r26, r1
    2dac:	b1 1d       	adc	r27, r1
    2dae:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <startBlock>
    2db2:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <startBlock+0x1>
    2db6:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <startBlock+0x2>
    2dba:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <startBlock+0x3>
			TX_NEWLINE;
    2dbe:	8d e0       	ldi	r24, 0x0D	; 13
    2dc0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2dc4:	8a e0       	ldi	r24, 0x0A	; 10
    2dc6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		}

		totalBlocks = 1;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	a0 e0       	ldi	r26, 0x00	; 0
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <totalBlocks>
    2dd6:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <totalBlocks+0x1>
    2dda:	a0 93 ae 02 	sts	0x02AE, r26	; 0x8002ae <totalBlocks+0x2>
    2dde:	b0 93 af 02 	sts	0x02AF, r27	; 0x8002af <totalBlocks+0x3>
			totalBlocks += (data & 0x0f);
			TX_NEWLINE;
		}
		#endif

		switch (option)
    2de2:	80 2f       	mov	r24, r16
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	fc 01       	movw	r30, r24
    2de8:	f0 97       	sbiw	r30, 0x30	; 48
    2dea:	e4 33       	cpi	r30, 0x34	; 52
    2dec:	f1 05       	cpc	r31, r1
    2dee:	08 f0       	brcs	.+2      	; 0x2df2 <main+0x392>
    2df0:	45 c1       	rjmp	.+650    	; 0x307c <main+0x61c>
    2df2:	ef 5c       	subi	r30, 0xCF	; 207
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__tablejump2__>
		{
			case '0': //error = SD_erase (block, totalBlocks);
			error = SD_erase (startBlock, totalBlocks);
    2dfa:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <totalBlocks>
    2dfe:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <totalBlocks+0x1>
    2e02:	40 91 ae 02 	lds	r20, 0x02AE	; 0x8002ae <totalBlocks+0x2>
    2e06:	50 91 af 02 	lds	r21, 0x02AF	; 0x8002af <totalBlocks+0x3>
    2e0a:	60 91 a1 00 	lds	r22, 0x00A1	; 0x8000a1 <startBlock>
    2e0e:	70 91 a2 00 	lds	r23, 0x00A2	; 0x8000a2 <startBlock+0x1>
    2e12:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <startBlock+0x2>
    2e16:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <startBlock+0x3>
    2e1a:	0e 94 16 04 	call	0x82c	; 0x82c <SD_erase>
    2e1e:	18 2f       	mov	r17, r24
			TX_NEWLINE;
    2e20:	8d e0       	ldi	r24, 0x0D	; 13
    2e22:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2e26:	8a e0       	ldi	r24, 0x0A	; 10
    2e28:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			if(error)
    2e2c:	11 23       	and	r17, r17
    2e2e:	29 f0       	breq	.+10     	; 0x2e3a <main+0x3da>
			transmitString_F(PSTR("Erase failed.."));
    2e30:	85 e6       	ldi	r24, 0x65	; 101
    2e32:	91 e0       	ldi	r25, 0x01	; 1
    2e34:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
    2e38:	37 c1       	rjmp	.+622    	; 0x30a8 <main+0x648>
			else
			transmitString_F(PSTR("Erased!"));
    2e3a:	8d e5       	ldi	r24, 0x5D	; 93
    2e3c:	91 e0       	ldi	r25, 0x01	; 1
    2e3e:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
    2e42:	32 c1       	rjmp	.+612    	; 0x30a8 <main+0x648>
			break;

			case '1': TX_NEWLINE;
    2e44:	8d e0       	ldi	r24, 0x0D	; 13
    2e46:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2e4a:	8a e0       	ldi	r24, 0x0A	; 10
    2e4c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			transmitString_F(PSTR(" Enter text (End with ~):"));
    2e50:	83 e4       	ldi	r24, 0x43	; 67
    2e52:	91 e0       	ldi	r25, 0x01	; 1
    2e54:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
			i=0;
    2e58:	c1 2c       	mov	r12, r1
    2e5a:	d1 2c       	mov	r13, r1
			do
			{
				data = receiveByte();
    2e5c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    2e60:	18 2f       	mov	r17, r24
				transmitByte(data);
    2e62:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
				buffer[i++] = data;
    2e66:	56 01       	movw	r10, r12
    2e68:	8f ef       	ldi	r24, 0xFF	; 255
    2e6a:	a8 1a       	sub	r10, r24
    2e6c:	b8 0a       	sbc	r11, r24
    2e6e:	f6 01       	movw	r30, r12
    2e70:	eb 55       	subi	r30, 0x5B	; 91
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	10 83       	st	Z, r17
				if(data == 0x0d)
    2e76:	1d 30       	cpi	r17, 0x0D	; 13
    2e78:	61 f4       	brne	.+24     	; 0x2e92 <main+0x432>
				{
					transmitByte(0x0a);
    2e7a:	8a e0       	ldi	r24, 0x0A	; 10
    2e7c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
					buffer[i++] = 0x0a;
    2e80:	92 e0       	ldi	r25, 0x02	; 2
    2e82:	c9 0e       	add	r12, r25
    2e84:	d1 1c       	adc	r13, r1
    2e86:	f5 01       	movw	r30, r10
    2e88:	eb 55       	subi	r30, 0x5B	; 91
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	8a e0       	ldi	r24, 0x0A	; 10
    2e8e:	80 83       	st	Z, r24
    2e90:	01 c0       	rjmp	.+2      	; 0x2e94 <main+0x434>
			i=0;
			do
			{
				data = receiveByte();
				transmitByte(data);
				buffer[i++] = data;
    2e92:	65 01       	movw	r12, r10
				if(data == 0x0d)
				{
					transmitByte(0x0a);
					buffer[i++] = 0x0a;
				}
				if(i == 512) break;
    2e94:	c1 14       	cp	r12, r1
    2e96:	22 e0       	ldi	r18, 0x02	; 2
    2e98:	d2 06       	cpc	r13, r18
    2e9a:	11 f0       	breq	.+4      	; 0x2ea0 <main+0x440>
			}while (data != '~');
    2e9c:	1e 37       	cpi	r17, 0x7E	; 126
    2e9e:	f1 f6       	brne	.-68     	; 0x2e5c <main+0x3fc>

			error = SD_writeSingleBlock (startBlock);
    2ea0:	60 91 a1 00 	lds	r22, 0x00A1	; 0x8000a1 <startBlock>
    2ea4:	70 91 a2 00 	lds	r23, 0x00A2	; 0x8000a2 <startBlock+0x1>
    2ea8:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <startBlock+0x2>
    2eac:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <startBlock+0x3>
    2eb0:	0e 94 7f 04 	call	0x8fe	; 0x8fe <SD_writeSingleBlock>
    2eb4:	18 2f       	mov	r17, r24
			TX_NEWLINE;
    2eb6:	8d e0       	ldi	r24, 0x0D	; 13
    2eb8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2ebc:	8a e0       	ldi	r24, 0x0A	; 10
    2ebe:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			TX_NEWLINE;
    2ec2:	8d e0       	ldi	r24, 0x0D	; 13
    2ec4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2ec8:	8a e0       	ldi	r24, 0x0A	; 10
    2eca:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			if(error)
    2ece:	11 23       	and	r17, r17
    2ed0:	29 f0       	breq	.+10     	; 0x2edc <main+0x47c>
			transmitString_F(PSTR("Write failed.."));
    2ed2:	84 e3       	ldi	r24, 0x34	; 52
    2ed4:	91 e0       	ldi	r25, 0x01	; 1
    2ed6:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
    2eda:	e6 c0       	rjmp	.+460    	; 0x30a8 <main+0x648>
			else
			transmitString_F(PSTR("Write successful!"));
    2edc:	82 e2       	ldi	r24, 0x22	; 34
    2ede:	91 e0       	ldi	r25, 0x01	; 1
    2ee0:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
    2ee4:	e1 c0       	rjmp	.+450    	; 0x30a8 <main+0x648>
			break;

			case '2': error = SD_readSingleBlock (startBlock);
    2ee6:	60 91 a1 00 	lds	r22, 0x00A1	; 0x8000a1 <startBlock>
    2eea:	70 91 a2 00 	lds	r23, 0x00A2	; 0x8000a2 <startBlock+0x1>
    2eee:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <startBlock+0x2>
    2ef2:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <startBlock+0x3>
    2ef6:	0e 94 47 04 	call	0x88e	; 0x88e <SD_readSingleBlock>
    2efa:	18 2f       	mov	r17, r24
			TX_NEWLINE;
    2efc:	8d e0       	ldi	r24, 0x0D	; 13
    2efe:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2f02:	8a e0       	ldi	r24, 0x0A	; 10
    2f04:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			if(error)
    2f08:	11 23       	and	r17, r17
    2f0a:	a1 f0       	breq	.+40     	; 0x2f34 <main+0x4d4>
			transmitString_F(PSTR("Read failed.."));
    2f0c:	84 e1       	ldi	r24, 0x14	; 20
    2f0e:	91 e0       	ldi	r25, 0x01	; 1
    2f10:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
    2f14:	c9 c0       	rjmp	.+402    	; 0x30a8 <main+0x648>
			else
			{
				for(i=0;i<512;i++)
				{
					if(buffer[i] == '~') break;
    2f16:	f8 01       	movw	r30, r16
    2f18:	eb 55       	subi	r30, 0x5B	; 91
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 81       	ld	r24, Z
    2f1e:	8e 37       	cpi	r24, 0x7E	; 126
    2f20:	79 f0       	breq	.+30     	; 0x2f40 <main+0x4e0>
					transmitByte(buffer[i]);
    2f22:	f8 01       	movw	r30, r16
    2f24:	eb 55       	subi	r30, 0x5B	; 91
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	80 81       	ld	r24, Z
    2f2a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			TX_NEWLINE;
			if(error)
			transmitString_F(PSTR("Read failed.."));
			else
			{
				for(i=0;i<512;i++)
    2f2e:	0f 5f       	subi	r16, 0xFF	; 255
    2f30:	1f 4f       	sbci	r17, 0xFF	; 255
    2f32:	02 c0       	rjmp	.+4      	; 0x2f38 <main+0x4d8>
    2f34:	00 e0       	ldi	r16, 0x00	; 0
    2f36:	10 e0       	ldi	r17, 0x00	; 0
    2f38:	01 15       	cp	r16, r1
    2f3a:	82 e0       	ldi	r24, 0x02	; 2
    2f3c:	18 07       	cpc	r17, r24
    2f3e:	58 f3       	brcs	.-42     	; 0x2f16 <main+0x4b6>
				{
					if(buffer[i] == '~') break;
					transmitByte(buffer[i]);
				}
				TX_NEWLINE;
    2f40:	8d e0       	ldi	r24, 0x0D	; 13
    2f42:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2f46:	8a e0       	ldi	r24, 0x0A	; 10
    2f48:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
				TX_NEWLINE;
    2f4c:	8d e0       	ldi	r24, 0x0D	; 13
    2f4e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2f52:	8a e0       	ldi	r24, 0x0A	; 10
    2f54:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
				transmitString_F(PSTR("Read successful!"));
    2f58:	83 e0       	ldi	r24, 0x03	; 3
    2f5a:	91 e0       	ldi	r25, 0x01	; 1
    2f5c:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
    2f60:	a3 c0       	rjmp	.+326    	; 0x30a8 <main+0x648>
			else
			transmitString_F(PSTR("Read successful!"));
			break;
			#endif

			case '5': TX_NEWLINE;
    2f62:	8d e0       	ldi	r24, 0x0D	; 13
    2f64:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2f68:	8a e0       	ldi	r24, 0x0A	; 10
    2f6a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			findFiles(GET_LIST,0);
    2f6e:	60 e0       	ldi	r22, 0x00	; 0
    2f70:	70 e0       	ldi	r23, 0x00	; 0
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <findFiles>
			break;
    2f78:	97 c0       	rjmp	.+302    	; 0x30a8 <main+0x648>

			case '6':
			case '7':
			case '8': TX_NEWLINE;
    2f7a:	8d e0       	ldi	r24, 0x0D	; 13
    2f7c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2f80:	8a e0       	ldi	r24, 0x0A	; 10
    2f82:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			TX_NEWLINE;
    2f86:	8d e0       	ldi	r24, 0x0D	; 13
    2f88:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    2f8c:	8a e0       	ldi	r24, 0x0A	; 10
    2f8e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			transmitString_F(PSTR("Enter file name: "));
    2f92:	81 ef       	ldi	r24, 0xF1	; 241
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
			for(i=0; i<13; i++)
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	08 c0       	rjmp	.+16     	; 0x2fb0 <main+0x550>
			fileName[i] = 0x00;   //clearing any previously stored file name
    2fa0:	e1 e0       	ldi	r30, 0x01	; 1
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	ec 0f       	add	r30, r28
    2fa6:	fd 1f       	adc	r31, r29
    2fa8:	e8 0f       	add	r30, r24
    2faa:	f9 1f       	adc	r31, r25
    2fac:	10 82       	st	Z, r1
			case '6':
			case '7':
			case '8': TX_NEWLINE;
			TX_NEWLINE;
			transmitString_F(PSTR("Enter file name: "));
			for(i=0; i<13; i++)
    2fae:	01 96       	adiw	r24, 0x01	; 1
    2fb0:	8d 30       	cpi	r24, 0x0D	; 13
    2fb2:	91 05       	cpc	r25, r1
    2fb4:	a8 f3       	brcs	.-22     	; 0x2fa0 <main+0x540>
    2fb6:	c1 2c       	mov	r12, r1
    2fb8:	d1 2c       	mov	r13, r1
    2fba:	01 c0       	rjmp	.+2      	; 0x2fbe <main+0x55e>
					}
					continue;
				}
				if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
				transmitByte(data);
				fileName[i++] = data;
    2fbc:	65 01       	movw	r12, r10
			for(i=0; i<13; i++)
			fileName[i] = 0x00;   //clearing any previously stored file name
			i=0;
			while(1)
			{
				data = receiveByte();
    2fbe:	0e 94 e6 04 	call	0x9cc	; 0x9cc <receiveByte>
    2fc2:	18 2f       	mov	r17, r24
				if(data == 0x0d) break;  //'ENTER' key pressed
    2fc4:	8d 30       	cpi	r24, 0x0D	; 13
    2fc6:	61 f1       	breq	.+88     	; 0x3020 <main+0x5c0>
				if(data == 0x08)	//'Back Space' key pressed
    2fc8:	88 30       	cpi	r24, 0x08	; 8
    2fca:	79 f4       	brne	.+30     	; 0x2fea <main+0x58a>
				{
					if(i != 0)
    2fcc:	c1 14       	cp	r12, r1
    2fce:	d1 04       	cpc	r13, r1
    2fd0:	b1 f3       	breq	.-20     	; 0x2fbe <main+0x55e>
					{
						transmitByte(data);
    2fd2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
						transmitByte(' ');
    2fd6:	80 e2       	ldi	r24, 0x20	; 32
    2fd8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
						transmitByte(data);
    2fdc:	81 2f       	mov	r24, r17
    2fde:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
						i--;
    2fe2:	91 e0       	ldi	r25, 0x01	; 1
    2fe4:	c9 1a       	sub	r12, r25
    2fe6:	d1 08       	sbc	r13, r1
					}
					continue;
    2fe8:	ea cf       	rjmp	.-44     	; 0x2fbe <main+0x55e>
				}
				if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    2fea:	80 ee       	ldi	r24, 0xE0	; 224
    2fec:	81 0f       	add	r24, r17
    2fee:	8f 35       	cpi	r24, 0x5F	; 95
    2ff0:	30 f7       	brcc	.-52     	; 0x2fbe <main+0x55e>
				transmitByte(data);
    2ff2:	81 2f       	mov	r24, r17
    2ff4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
				fileName[i++] = data;
    2ff8:	56 01       	movw	r10, r12
    2ffa:	2f ef       	ldi	r18, 0xFF	; 255
    2ffc:	a2 1a       	sub	r10, r18
    2ffe:	b2 0a       	sbc	r11, r18
    3000:	e1 e0       	ldi	r30, 0x01	; 1
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	ec 0f       	add	r30, r28
    3006:	fd 1f       	adc	r31, r29
    3008:	ec 0d       	add	r30, r12
    300a:	fd 1d       	adc	r31, r13
    300c:	10 83       	st	Z, r17
				if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    300e:	8d e0       	ldi	r24, 0x0D	; 13
    3010:	a8 16       	cp	r10, r24
    3012:	b1 04       	cpc	r11, r1
    3014:	99 f6       	brne	.-90     	; 0x2fbc <main+0x55c>
    3016:	8b ed       	ldi	r24, 0xDB	; 219
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
					}
					continue;
				}
				if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
				transmitByte(data);
				fileName[i++] = data;
    301e:	65 01       	movw	r12, r10
				if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
			}
			if(i>12) break;
    3020:	9d e0       	ldi	r25, 0x0D	; 13
    3022:	c9 16       	cp	r12, r25
    3024:	d1 04       	cpc	r13, r1
    3026:	08 f0       	brcs	.+2      	; 0x302a <main+0x5ca>
    3028:	3f c0       	rjmp	.+126    	; 0x30a8 <main+0x648>
			
			TX_NEWLINE;
    302a:	8d e0       	ldi	r24, 0x0D	; 13
    302c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    3030:	8a e0       	ldi	r24, 0x0A	; 10
    3032:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			if(option == '6')
    3036:	06 33       	cpi	r16, 0x36	; 54
    3038:	31 f4       	brne	.+12     	; 0x3046 <main+0x5e6>
			readFile( READ, fileName);
    303a:	be 01       	movw	r22, r28
    303c:	6f 5f       	subi	r22, 0xFF	; 255
    303e:	7f 4f       	sbci	r23, 0xFF	; 255
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	0e 94 9b 10 	call	0x2136	; 0x2136 <readFile>
			if(option == '7')
    3046:	07 33       	cpi	r16, 0x37	; 55
    3048:	21 f4       	brne	.+8      	; 0x3052 <main+0x5f2>
			writeFile(fileName);
    304a:	ce 01       	movw	r24, r28
    304c:	01 96       	adiw	r24, 0x01	; 1
    304e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <writeFile>
			if(option == '8')
    3052:	08 33       	cpi	r16, 0x38	; 56
    3054:	49 f5       	brne	.+82     	; 0x30a8 <main+0x648>
			deleteFile(fileName);
    3056:	ce 01       	movw	r24, r28
    3058:	01 96       	adiw	r24, 0x01	; 1
    305a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <deleteFile>
    305e:	24 c0       	rjmp	.+72     	; 0x30a8 <main+0x648>
			break;

			case '9': memoryStatistics();
    3060:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <memoryStatistics>
			break;
    3064:	21 c0       	rjmp	.+66     	; 0x30a8 <main+0x648>

			case 'a':
			case 'A': RTC_displayDate();
    3066:	0e 94 77 07 	call	0xeee	; 0xeee <RTC_displayDate>
			RTC_displayTime();
    306a:	0e 94 1c 07 	call	0xe38	; 0xe38 <RTC_displayTime>
			break;
    306e:	1c c0       	rjmp	.+56     	; 0x30a8 <main+0x648>
			case 'b':
			case 'B': RTC_updateDate();
    3070:	0e 94 11 09 	call	0x1222	; 0x1222 <RTC_updateDate>
			break;
    3074:	19 c0       	rjmp	.+50     	; 0x30a8 <main+0x648>
			case 'c':
			case 'C': RTC_updateTime();
    3076:	0e 94 47 08 	call	0x108e	; 0x108e <RTC_updateTime>
			break;
    307a:	16 c0       	rjmp	.+44     	; 0x30a8 <main+0x648>

			default: TX_NEWLINE;
    307c:	8d e0       	ldi	r24, 0x0D	; 13
    307e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    3082:	8a e0       	ldi	r24, 0x0A	; 10
    3084:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			TX_NEWLINE;
    3088:	8d e0       	ldi	r24, 0x0D	; 13
    308a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    308e:	8a e0       	ldi	r24, 0x0A	; 10
    3090:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
			transmitString_F(PSTR(" Invalid option!"));
    3094:	8a ec       	ldi	r24, 0xCA	; 202
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	0e 94 7d 05 	call	0xafa	; 0xafa <transmitString_F>
			TX_NEWLINE;
    309c:	8d e0       	ldi	r24, 0x0D	; 13
    309e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    30a2:	8a e0       	ldi	r24, 0x0A	; 10
    30a4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
		}

		TX_NEWLINE;
    30a8:	8d e0       	ldi	r24, 0x0D	; 13
    30aa:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    30ae:	8a e0       	ldi	r24, 0x0A	; 10
    30b0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <transmitByte>
    30b4:	6f cd       	rjmp	.-1314   	; 0x2b94 <main+0x134>

000030b6 <__udivmodsi4>:
    30b6:	a1 e2       	ldi	r26, 0x21	; 33
    30b8:	1a 2e       	mov	r1, r26
    30ba:	aa 1b       	sub	r26, r26
    30bc:	bb 1b       	sub	r27, r27
    30be:	fd 01       	movw	r30, r26
    30c0:	0d c0       	rjmp	.+26     	; 0x30dc <__udivmodsi4_ep>

000030c2 <__udivmodsi4_loop>:
    30c2:	aa 1f       	adc	r26, r26
    30c4:	bb 1f       	adc	r27, r27
    30c6:	ee 1f       	adc	r30, r30
    30c8:	ff 1f       	adc	r31, r31
    30ca:	a2 17       	cp	r26, r18
    30cc:	b3 07       	cpc	r27, r19
    30ce:	e4 07       	cpc	r30, r20
    30d0:	f5 07       	cpc	r31, r21
    30d2:	20 f0       	brcs	.+8      	; 0x30dc <__udivmodsi4_ep>
    30d4:	a2 1b       	sub	r26, r18
    30d6:	b3 0b       	sbc	r27, r19
    30d8:	e4 0b       	sbc	r30, r20
    30da:	f5 0b       	sbc	r31, r21

000030dc <__udivmodsi4_ep>:
    30dc:	66 1f       	adc	r22, r22
    30de:	77 1f       	adc	r23, r23
    30e0:	88 1f       	adc	r24, r24
    30e2:	99 1f       	adc	r25, r25
    30e4:	1a 94       	dec	r1
    30e6:	69 f7       	brne	.-38     	; 0x30c2 <__udivmodsi4_loop>
    30e8:	60 95       	com	r22
    30ea:	70 95       	com	r23
    30ec:	80 95       	com	r24
    30ee:	90 95       	com	r25
    30f0:	9b 01       	movw	r18, r22
    30f2:	ac 01       	movw	r20, r24
    30f4:	bd 01       	movw	r22, r26
    30f6:	cf 01       	movw	r24, r30
    30f8:	08 95       	ret

000030fa <__tablejump2__>:
    30fa:	ee 0f       	add	r30, r30
    30fc:	ff 1f       	adc	r31, r31
    30fe:	05 90       	lpm	r0, Z+
    3100:	f4 91       	lpm	r31, Z
    3102:	e0 2d       	mov	r30, r0
    3104:	09 94       	ijmp

00003106 <__muluhisi3>:
    3106:	0e 94 8e 18 	call	0x311c	; 0x311c <__umulhisi3>
    310a:	a5 9f       	mul	r26, r21
    310c:	90 0d       	add	r25, r0
    310e:	b4 9f       	mul	r27, r20
    3110:	90 0d       	add	r25, r0
    3112:	a4 9f       	mul	r26, r20
    3114:	80 0d       	add	r24, r0
    3116:	91 1d       	adc	r25, r1
    3118:	11 24       	eor	r1, r1
    311a:	08 95       	ret

0000311c <__umulhisi3>:
    311c:	a2 9f       	mul	r26, r18
    311e:	b0 01       	movw	r22, r0
    3120:	b3 9f       	mul	r27, r19
    3122:	c0 01       	movw	r24, r0
    3124:	a3 9f       	mul	r26, r19
    3126:	70 0d       	add	r23, r0
    3128:	81 1d       	adc	r24, r1
    312a:	11 24       	eor	r1, r1
    312c:	91 1d       	adc	r25, r1
    312e:	b2 9f       	mul	r27, r18
    3130:	70 0d       	add	r23, r0
    3132:	81 1d       	adc	r24, r1
    3134:	11 24       	eor	r1, r1
    3136:	91 1d       	adc	r25, r1
    3138:	08 95       	ret

0000313a <_exit>:
    313a:	f8 94       	cli

0000313c <__stop_program>:
    313c:	ff cf       	rjmp	.-2      	; 0x313c <__stop_program>
